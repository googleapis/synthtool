// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_dlp_protos || ($protobuf.roots._google_cloud_dlp_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.privacy = (function() {
    
            /**
             * Namespace privacy.
             * @memberof google
             * @namespace
             */
            var privacy = {};
    
            privacy.dlp = (function() {
    
                /**
                 * Namespace dlp.
                 * @memberof google.privacy
                 * @namespace
                 */
                var dlp = {};
    
                dlp.v2 = (function() {
    
                    /**
                     * Namespace v2.
                     * @memberof google.privacy.dlp
                     * @namespace
                     */
                    var v2 = {};
    
                    v2.DlpService = (function() {
    
                        /**
                         * Constructs a new DlpService service.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DlpService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function DlpService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (DlpService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DlpService;
    
                        /**
                         * Creates new DlpService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {DlpService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        DlpService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#inspectContent}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef InspectContentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.InspectContentResponse} [response] InspectContentResponse
                         */
    
                        /**
                         * Calls InspectContent.
                         * @function inspectContent
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IInspectContentRequest} request InspectContentRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.InspectContentCallback} callback Node-style callback called with the error, if any, and InspectContentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.inspectContent = function inspectContent(request, callback) {
                            return this.rpcCall(inspectContent, $root.google.privacy.dlp.v2.InspectContentRequest, $root.google.privacy.dlp.v2.InspectContentResponse, request, callback);
                        }, "name", { value: "InspectContent" });
    
                        /**
                         * Calls InspectContent.
                         * @function inspectContent
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IInspectContentRequest} request InspectContentRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.InspectContentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#redactImage}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef RedactImageCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.RedactImageResponse} [response] RedactImageResponse
                         */
    
                        /**
                         * Calls RedactImage.
                         * @function redactImage
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IRedactImageRequest} request RedactImageRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.RedactImageCallback} callback Node-style callback called with the error, if any, and RedactImageResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.redactImage = function redactImage(request, callback) {
                            return this.rpcCall(redactImage, $root.google.privacy.dlp.v2.RedactImageRequest, $root.google.privacy.dlp.v2.RedactImageResponse, request, callback);
                        }, "name", { value: "RedactImage" });
    
                        /**
                         * Calls RedactImage.
                         * @function redactImage
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IRedactImageRequest} request RedactImageRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.RedactImageResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#deidentifyContent}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef DeidentifyContentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DeidentifyContentResponse} [response] DeidentifyContentResponse
                         */
    
                        /**
                         * Calls DeidentifyContent.
                         * @function deidentifyContent
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeidentifyContentRequest} request DeidentifyContentRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.DeidentifyContentCallback} callback Node-style callback called with the error, if any, and DeidentifyContentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.deidentifyContent = function deidentifyContent(request, callback) {
                            return this.rpcCall(deidentifyContent, $root.google.privacy.dlp.v2.DeidentifyContentRequest, $root.google.privacy.dlp.v2.DeidentifyContentResponse, request, callback);
                        }, "name", { value: "DeidentifyContent" });
    
                        /**
                         * Calls DeidentifyContent.
                         * @function deidentifyContent
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeidentifyContentRequest} request DeidentifyContentRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DeidentifyContentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#reidentifyContent}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ReidentifyContentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ReidentifyContentResponse} [response] ReidentifyContentResponse
                         */
    
                        /**
                         * Calls ReidentifyContent.
                         * @function reidentifyContent
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IReidentifyContentRequest} request ReidentifyContentRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ReidentifyContentCallback} callback Node-style callback called with the error, if any, and ReidentifyContentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.reidentifyContent = function reidentifyContent(request, callback) {
                            return this.rpcCall(reidentifyContent, $root.google.privacy.dlp.v2.ReidentifyContentRequest, $root.google.privacy.dlp.v2.ReidentifyContentResponse, request, callback);
                        }, "name", { value: "ReidentifyContent" });
    
                        /**
                         * Calls ReidentifyContent.
                         * @function reidentifyContent
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IReidentifyContentRequest} request ReidentifyContentRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ReidentifyContentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#listInfoTypes}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ListInfoTypesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ListInfoTypesResponse} [response] ListInfoTypesResponse
                         */
    
                        /**
                         * Calls ListInfoTypes.
                         * @function listInfoTypes
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListInfoTypesRequest} request ListInfoTypesRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ListInfoTypesCallback} callback Node-style callback called with the error, if any, and ListInfoTypesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.listInfoTypes = function listInfoTypes(request, callback) {
                            return this.rpcCall(listInfoTypes, $root.google.privacy.dlp.v2.ListInfoTypesRequest, $root.google.privacy.dlp.v2.ListInfoTypesResponse, request, callback);
                        }, "name", { value: "ListInfoTypes" });
    
                        /**
                         * Calls ListInfoTypes.
                         * @function listInfoTypes
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListInfoTypesRequest} request ListInfoTypesRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ListInfoTypesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#createInspectTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef CreateInspectTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.InspectTemplate} [response] InspectTemplate
                         */
    
                        /**
                         * Calls CreateInspectTemplate.
                         * @function createInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateInspectTemplateRequest} request CreateInspectTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.CreateInspectTemplateCallback} callback Node-style callback called with the error, if any, and InspectTemplate
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.createInspectTemplate = function createInspectTemplate(request, callback) {
                            return this.rpcCall(createInspectTemplate, $root.google.privacy.dlp.v2.CreateInspectTemplateRequest, $root.google.privacy.dlp.v2.InspectTemplate, request, callback);
                        }, "name", { value: "CreateInspectTemplate" });
    
                        /**
                         * Calls CreateInspectTemplate.
                         * @function createInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateInspectTemplateRequest} request CreateInspectTemplateRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.InspectTemplate>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#updateInspectTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef UpdateInspectTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.InspectTemplate} [response] InspectTemplate
                         */
    
                        /**
                         * Calls UpdateInspectTemplate.
                         * @function updateInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateInspectTemplateRequest} request UpdateInspectTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.UpdateInspectTemplateCallback} callback Node-style callback called with the error, if any, and InspectTemplate
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.updateInspectTemplate = function updateInspectTemplate(request, callback) {
                            return this.rpcCall(updateInspectTemplate, $root.google.privacy.dlp.v2.UpdateInspectTemplateRequest, $root.google.privacy.dlp.v2.InspectTemplate, request, callback);
                        }, "name", { value: "UpdateInspectTemplate" });
    
                        /**
                         * Calls UpdateInspectTemplate.
                         * @function updateInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateInspectTemplateRequest} request UpdateInspectTemplateRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.InspectTemplate>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#getInspectTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef GetInspectTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.InspectTemplate} [response] InspectTemplate
                         */
    
                        /**
                         * Calls GetInspectTemplate.
                         * @function getInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetInspectTemplateRequest} request GetInspectTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.GetInspectTemplateCallback} callback Node-style callback called with the error, if any, and InspectTemplate
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.getInspectTemplate = function getInspectTemplate(request, callback) {
                            return this.rpcCall(getInspectTemplate, $root.google.privacy.dlp.v2.GetInspectTemplateRequest, $root.google.privacy.dlp.v2.InspectTemplate, request, callback);
                        }, "name", { value: "GetInspectTemplate" });
    
                        /**
                         * Calls GetInspectTemplate.
                         * @function getInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetInspectTemplateRequest} request GetInspectTemplateRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.InspectTemplate>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#listInspectTemplates}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ListInspectTemplatesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ListInspectTemplatesResponse} [response] ListInspectTemplatesResponse
                         */
    
                        /**
                         * Calls ListInspectTemplates.
                         * @function listInspectTemplates
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesRequest} request ListInspectTemplatesRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ListInspectTemplatesCallback} callback Node-style callback called with the error, if any, and ListInspectTemplatesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.listInspectTemplates = function listInspectTemplates(request, callback) {
                            return this.rpcCall(listInspectTemplates, $root.google.privacy.dlp.v2.ListInspectTemplatesRequest, $root.google.privacy.dlp.v2.ListInspectTemplatesResponse, request, callback);
                        }, "name", { value: "ListInspectTemplates" });
    
                        /**
                         * Calls ListInspectTemplates.
                         * @function listInspectTemplates
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesRequest} request ListInspectTemplatesRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ListInspectTemplatesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#deleteInspectTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef DeleteInspectTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteInspectTemplate.
                         * @function deleteInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteInspectTemplateRequest} request DeleteInspectTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.DeleteInspectTemplateCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.deleteInspectTemplate = function deleteInspectTemplate(request, callback) {
                            return this.rpcCall(deleteInspectTemplate, $root.google.privacy.dlp.v2.DeleteInspectTemplateRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteInspectTemplate" });
    
                        /**
                         * Calls DeleteInspectTemplate.
                         * @function deleteInspectTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteInspectTemplateRequest} request DeleteInspectTemplateRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#createDeidentifyTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef CreateDeidentifyTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DeidentifyTemplate} [response] DeidentifyTemplate
                         */
    
                        /**
                         * Calls CreateDeidentifyTemplate.
                         * @function createDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest} request CreateDeidentifyTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.CreateDeidentifyTemplateCallback} callback Node-style callback called with the error, if any, and DeidentifyTemplate
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.createDeidentifyTemplate = function createDeidentifyTemplate(request, callback) {
                            return this.rpcCall(createDeidentifyTemplate, $root.google.privacy.dlp.v2.CreateDeidentifyTemplateRequest, $root.google.privacy.dlp.v2.DeidentifyTemplate, request, callback);
                        }, "name", { value: "CreateDeidentifyTemplate" });
    
                        /**
                         * Calls CreateDeidentifyTemplate.
                         * @function createDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest} request CreateDeidentifyTemplateRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DeidentifyTemplate>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#updateDeidentifyTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef UpdateDeidentifyTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DeidentifyTemplate} [response] DeidentifyTemplate
                         */
    
                        /**
                         * Calls UpdateDeidentifyTemplate.
                         * @function updateDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest} request UpdateDeidentifyTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.UpdateDeidentifyTemplateCallback} callback Node-style callback called with the error, if any, and DeidentifyTemplate
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.updateDeidentifyTemplate = function updateDeidentifyTemplate(request, callback) {
                            return this.rpcCall(updateDeidentifyTemplate, $root.google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest, $root.google.privacy.dlp.v2.DeidentifyTemplate, request, callback);
                        }, "name", { value: "UpdateDeidentifyTemplate" });
    
                        /**
                         * Calls UpdateDeidentifyTemplate.
                         * @function updateDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest} request UpdateDeidentifyTemplateRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DeidentifyTemplate>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#getDeidentifyTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef GetDeidentifyTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DeidentifyTemplate} [response] DeidentifyTemplate
                         */
    
                        /**
                         * Calls GetDeidentifyTemplate.
                         * @function getDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetDeidentifyTemplateRequest} request GetDeidentifyTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.GetDeidentifyTemplateCallback} callback Node-style callback called with the error, if any, and DeidentifyTemplate
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.getDeidentifyTemplate = function getDeidentifyTemplate(request, callback) {
                            return this.rpcCall(getDeidentifyTemplate, $root.google.privacy.dlp.v2.GetDeidentifyTemplateRequest, $root.google.privacy.dlp.v2.DeidentifyTemplate, request, callback);
                        }, "name", { value: "GetDeidentifyTemplate" });
    
                        /**
                         * Calls GetDeidentifyTemplate.
                         * @function getDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetDeidentifyTemplateRequest} request GetDeidentifyTemplateRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DeidentifyTemplate>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#listDeidentifyTemplates}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ListDeidentifyTemplatesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ListDeidentifyTemplatesResponse} [response] ListDeidentifyTemplatesResponse
                         */
    
                        /**
                         * Calls ListDeidentifyTemplates.
                         * @function listDeidentifyTemplates
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesRequest} request ListDeidentifyTemplatesRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ListDeidentifyTemplatesCallback} callback Node-style callback called with the error, if any, and ListDeidentifyTemplatesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.listDeidentifyTemplates = function listDeidentifyTemplates(request, callback) {
                            return this.rpcCall(listDeidentifyTemplates, $root.google.privacy.dlp.v2.ListDeidentifyTemplatesRequest, $root.google.privacy.dlp.v2.ListDeidentifyTemplatesResponse, request, callback);
                        }, "name", { value: "ListDeidentifyTemplates" });
    
                        /**
                         * Calls ListDeidentifyTemplates.
                         * @function listDeidentifyTemplates
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesRequest} request ListDeidentifyTemplatesRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ListDeidentifyTemplatesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#deleteDeidentifyTemplate}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef DeleteDeidentifyTemplateCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteDeidentifyTemplate.
                         * @function deleteDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest} request DeleteDeidentifyTemplateRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.DeleteDeidentifyTemplateCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.deleteDeidentifyTemplate = function deleteDeidentifyTemplate(request, callback) {
                            return this.rpcCall(deleteDeidentifyTemplate, $root.google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteDeidentifyTemplate" });
    
                        /**
                         * Calls DeleteDeidentifyTemplate.
                         * @function deleteDeidentifyTemplate
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest} request DeleteDeidentifyTemplateRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#createJobTrigger}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef CreateJobTriggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.JobTrigger} [response] JobTrigger
                         */
    
                        /**
                         * Calls CreateJobTrigger.
                         * @function createJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateJobTriggerRequest} request CreateJobTriggerRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.CreateJobTriggerCallback} callback Node-style callback called with the error, if any, and JobTrigger
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.createJobTrigger = function createJobTrigger(request, callback) {
                            return this.rpcCall(createJobTrigger, $root.google.privacy.dlp.v2.CreateJobTriggerRequest, $root.google.privacy.dlp.v2.JobTrigger, request, callback);
                        }, "name", { value: "CreateJobTrigger" });
    
                        /**
                         * Calls CreateJobTrigger.
                         * @function createJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateJobTriggerRequest} request CreateJobTriggerRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.JobTrigger>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#updateJobTrigger}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef UpdateJobTriggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.JobTrigger} [response] JobTrigger
                         */
    
                        /**
                         * Calls UpdateJobTrigger.
                         * @function updateJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateJobTriggerRequest} request UpdateJobTriggerRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.UpdateJobTriggerCallback} callback Node-style callback called with the error, if any, and JobTrigger
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.updateJobTrigger = function updateJobTrigger(request, callback) {
                            return this.rpcCall(updateJobTrigger, $root.google.privacy.dlp.v2.UpdateJobTriggerRequest, $root.google.privacy.dlp.v2.JobTrigger, request, callback);
                        }, "name", { value: "UpdateJobTrigger" });
    
                        /**
                         * Calls UpdateJobTrigger.
                         * @function updateJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateJobTriggerRequest} request UpdateJobTriggerRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.JobTrigger>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#hybridInspectJobTrigger}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef HybridInspectJobTriggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.HybridInspectResponse} [response] HybridInspectResponse
                         */
    
                        /**
                         * Calls HybridInspectJobTrigger.
                         * @function hybridInspectJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IHybridInspectJobTriggerRequest} request HybridInspectJobTriggerRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.HybridInspectJobTriggerCallback} callback Node-style callback called with the error, if any, and HybridInspectResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.hybridInspectJobTrigger = function hybridInspectJobTrigger(request, callback) {
                            return this.rpcCall(hybridInspectJobTrigger, $root.google.privacy.dlp.v2.HybridInspectJobTriggerRequest, $root.google.privacy.dlp.v2.HybridInspectResponse, request, callback);
                        }, "name", { value: "HybridInspectJobTrigger" });
    
                        /**
                         * Calls HybridInspectJobTrigger.
                         * @function hybridInspectJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IHybridInspectJobTriggerRequest} request HybridInspectJobTriggerRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.HybridInspectResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#getJobTrigger}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef GetJobTriggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.JobTrigger} [response] JobTrigger
                         */
    
                        /**
                         * Calls GetJobTrigger.
                         * @function getJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetJobTriggerRequest} request GetJobTriggerRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.GetJobTriggerCallback} callback Node-style callback called with the error, if any, and JobTrigger
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.getJobTrigger = function getJobTrigger(request, callback) {
                            return this.rpcCall(getJobTrigger, $root.google.privacy.dlp.v2.GetJobTriggerRequest, $root.google.privacy.dlp.v2.JobTrigger, request, callback);
                        }, "name", { value: "GetJobTrigger" });
    
                        /**
                         * Calls GetJobTrigger.
                         * @function getJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetJobTriggerRequest} request GetJobTriggerRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.JobTrigger>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#listJobTriggers}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ListJobTriggersCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ListJobTriggersResponse} [response] ListJobTriggersResponse
                         */
    
                        /**
                         * Calls ListJobTriggers.
                         * @function listJobTriggers
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListJobTriggersRequest} request ListJobTriggersRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ListJobTriggersCallback} callback Node-style callback called with the error, if any, and ListJobTriggersResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.listJobTriggers = function listJobTriggers(request, callback) {
                            return this.rpcCall(listJobTriggers, $root.google.privacy.dlp.v2.ListJobTriggersRequest, $root.google.privacy.dlp.v2.ListJobTriggersResponse, request, callback);
                        }, "name", { value: "ListJobTriggers" });
    
                        /**
                         * Calls ListJobTriggers.
                         * @function listJobTriggers
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListJobTriggersRequest} request ListJobTriggersRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ListJobTriggersResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#deleteJobTrigger}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef DeleteJobTriggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteJobTrigger.
                         * @function deleteJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteJobTriggerRequest} request DeleteJobTriggerRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.DeleteJobTriggerCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.deleteJobTrigger = function deleteJobTrigger(request, callback) {
                            return this.rpcCall(deleteJobTrigger, $root.google.privacy.dlp.v2.DeleteJobTriggerRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteJobTrigger" });
    
                        /**
                         * Calls DeleteJobTrigger.
                         * @function deleteJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteJobTriggerRequest} request DeleteJobTriggerRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#activateJobTrigger}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ActivateJobTriggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DlpJob} [response] DlpJob
                         */
    
                        /**
                         * Calls ActivateJobTrigger.
                         * @function activateJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IActivateJobTriggerRequest} request ActivateJobTriggerRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ActivateJobTriggerCallback} callback Node-style callback called with the error, if any, and DlpJob
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.activateJobTrigger = function activateJobTrigger(request, callback) {
                            return this.rpcCall(activateJobTrigger, $root.google.privacy.dlp.v2.ActivateJobTriggerRequest, $root.google.privacy.dlp.v2.DlpJob, request, callback);
                        }, "name", { value: "ActivateJobTrigger" });
    
                        /**
                         * Calls ActivateJobTrigger.
                         * @function activateJobTrigger
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IActivateJobTriggerRequest} request ActivateJobTriggerRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DlpJob>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#createDlpJob}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef CreateDlpJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DlpJob} [response] DlpJob
                         */
    
                        /**
                         * Calls CreateDlpJob.
                         * @function createDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateDlpJobRequest} request CreateDlpJobRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.CreateDlpJobCallback} callback Node-style callback called with the error, if any, and DlpJob
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.createDlpJob = function createDlpJob(request, callback) {
                            return this.rpcCall(createDlpJob, $root.google.privacy.dlp.v2.CreateDlpJobRequest, $root.google.privacy.dlp.v2.DlpJob, request, callback);
                        }, "name", { value: "CreateDlpJob" });
    
                        /**
                         * Calls CreateDlpJob.
                         * @function createDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateDlpJobRequest} request CreateDlpJobRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DlpJob>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#listDlpJobs}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ListDlpJobsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ListDlpJobsResponse} [response] ListDlpJobsResponse
                         */
    
                        /**
                         * Calls ListDlpJobs.
                         * @function listDlpJobs
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListDlpJobsRequest} request ListDlpJobsRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ListDlpJobsCallback} callback Node-style callback called with the error, if any, and ListDlpJobsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.listDlpJobs = function listDlpJobs(request, callback) {
                            return this.rpcCall(listDlpJobs, $root.google.privacy.dlp.v2.ListDlpJobsRequest, $root.google.privacy.dlp.v2.ListDlpJobsResponse, request, callback);
                        }, "name", { value: "ListDlpJobs" });
    
                        /**
                         * Calls ListDlpJobs.
                         * @function listDlpJobs
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListDlpJobsRequest} request ListDlpJobsRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ListDlpJobsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#getDlpJob}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef GetDlpJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.DlpJob} [response] DlpJob
                         */
    
                        /**
                         * Calls GetDlpJob.
                         * @function getDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetDlpJobRequest} request GetDlpJobRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.GetDlpJobCallback} callback Node-style callback called with the error, if any, and DlpJob
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.getDlpJob = function getDlpJob(request, callback) {
                            return this.rpcCall(getDlpJob, $root.google.privacy.dlp.v2.GetDlpJobRequest, $root.google.privacy.dlp.v2.DlpJob, request, callback);
                        }, "name", { value: "GetDlpJob" });
    
                        /**
                         * Calls GetDlpJob.
                         * @function getDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetDlpJobRequest} request GetDlpJobRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.DlpJob>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#deleteDlpJob}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef DeleteDlpJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteDlpJob.
                         * @function deleteDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteDlpJobRequest} request DeleteDlpJobRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.DeleteDlpJobCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.deleteDlpJob = function deleteDlpJob(request, callback) {
                            return this.rpcCall(deleteDlpJob, $root.google.privacy.dlp.v2.DeleteDlpJobRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteDlpJob" });
    
                        /**
                         * Calls DeleteDlpJob.
                         * @function deleteDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteDlpJobRequest} request DeleteDlpJobRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#cancelDlpJob}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef CancelDlpJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls CancelDlpJob.
                         * @function cancelDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICancelDlpJobRequest} request CancelDlpJobRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.CancelDlpJobCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.cancelDlpJob = function cancelDlpJob(request, callback) {
                            return this.rpcCall(cancelDlpJob, $root.google.privacy.dlp.v2.CancelDlpJobRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "CancelDlpJob" });
    
                        /**
                         * Calls CancelDlpJob.
                         * @function cancelDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICancelDlpJobRequest} request CancelDlpJobRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#createStoredInfoType}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef CreateStoredInfoTypeCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.StoredInfoType} [response] StoredInfoType
                         */
    
                        /**
                         * Calls CreateStoredInfoType.
                         * @function createStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateStoredInfoTypeRequest} request CreateStoredInfoTypeRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.CreateStoredInfoTypeCallback} callback Node-style callback called with the error, if any, and StoredInfoType
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.createStoredInfoType = function createStoredInfoType(request, callback) {
                            return this.rpcCall(createStoredInfoType, $root.google.privacy.dlp.v2.CreateStoredInfoTypeRequest, $root.google.privacy.dlp.v2.StoredInfoType, request, callback);
                        }, "name", { value: "CreateStoredInfoType" });
    
                        /**
                         * Calls CreateStoredInfoType.
                         * @function createStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.ICreateStoredInfoTypeRequest} request CreateStoredInfoTypeRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.StoredInfoType>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#updateStoredInfoType}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef UpdateStoredInfoTypeCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.StoredInfoType} [response] StoredInfoType
                         */
    
                        /**
                         * Calls UpdateStoredInfoType.
                         * @function updateStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest} request UpdateStoredInfoTypeRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.UpdateStoredInfoTypeCallback} callback Node-style callback called with the error, if any, and StoredInfoType
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.updateStoredInfoType = function updateStoredInfoType(request, callback) {
                            return this.rpcCall(updateStoredInfoType, $root.google.privacy.dlp.v2.UpdateStoredInfoTypeRequest, $root.google.privacy.dlp.v2.StoredInfoType, request, callback);
                        }, "name", { value: "UpdateStoredInfoType" });
    
                        /**
                         * Calls UpdateStoredInfoType.
                         * @function updateStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest} request UpdateStoredInfoTypeRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.StoredInfoType>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#getStoredInfoType}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef GetStoredInfoTypeCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.StoredInfoType} [response] StoredInfoType
                         */
    
                        /**
                         * Calls GetStoredInfoType.
                         * @function getStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetStoredInfoTypeRequest} request GetStoredInfoTypeRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.GetStoredInfoTypeCallback} callback Node-style callback called with the error, if any, and StoredInfoType
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.getStoredInfoType = function getStoredInfoType(request, callback) {
                            return this.rpcCall(getStoredInfoType, $root.google.privacy.dlp.v2.GetStoredInfoTypeRequest, $root.google.privacy.dlp.v2.StoredInfoType, request, callback);
                        }, "name", { value: "GetStoredInfoType" });
    
                        /**
                         * Calls GetStoredInfoType.
                         * @function getStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IGetStoredInfoTypeRequest} request GetStoredInfoTypeRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.StoredInfoType>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#listStoredInfoTypes}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef ListStoredInfoTypesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.ListStoredInfoTypesResponse} [response] ListStoredInfoTypesResponse
                         */
    
                        /**
                         * Calls ListStoredInfoTypes.
                         * @function listStoredInfoTypes
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesRequest} request ListStoredInfoTypesRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.ListStoredInfoTypesCallback} callback Node-style callback called with the error, if any, and ListStoredInfoTypesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.listStoredInfoTypes = function listStoredInfoTypes(request, callback) {
                            return this.rpcCall(listStoredInfoTypes, $root.google.privacy.dlp.v2.ListStoredInfoTypesRequest, $root.google.privacy.dlp.v2.ListStoredInfoTypesResponse, request, callback);
                        }, "name", { value: "ListStoredInfoTypes" });
    
                        /**
                         * Calls ListStoredInfoTypes.
                         * @function listStoredInfoTypes
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesRequest} request ListStoredInfoTypesRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.ListStoredInfoTypesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#deleteStoredInfoType}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef DeleteStoredInfoTypeCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteStoredInfoType.
                         * @function deleteStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest} request DeleteStoredInfoTypeRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.DeleteStoredInfoTypeCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.deleteStoredInfoType = function deleteStoredInfoType(request, callback) {
                            return this.rpcCall(deleteStoredInfoType, $root.google.privacy.dlp.v2.DeleteStoredInfoTypeRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteStoredInfoType" });
    
                        /**
                         * Calls DeleteStoredInfoType.
                         * @function deleteStoredInfoType
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest} request DeleteStoredInfoTypeRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#hybridInspectDlpJob}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef HybridInspectDlpJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.privacy.dlp.v2.HybridInspectResponse} [response] HybridInspectResponse
                         */
    
                        /**
                         * Calls HybridInspectDlpJob.
                         * @function hybridInspectDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IHybridInspectDlpJobRequest} request HybridInspectDlpJobRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.HybridInspectDlpJobCallback} callback Node-style callback called with the error, if any, and HybridInspectResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.hybridInspectDlpJob = function hybridInspectDlpJob(request, callback) {
                            return this.rpcCall(hybridInspectDlpJob, $root.google.privacy.dlp.v2.HybridInspectDlpJobRequest, $root.google.privacy.dlp.v2.HybridInspectResponse, request, callback);
                        }, "name", { value: "HybridInspectDlpJob" });
    
                        /**
                         * Calls HybridInspectDlpJob.
                         * @function hybridInspectDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IHybridInspectDlpJobRequest} request HybridInspectDlpJobRequest message or plain object
                         * @returns {Promise<google.privacy.dlp.v2.HybridInspectResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.privacy.dlp.v2.DlpService#finishDlpJob}.
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @typedef FinishDlpJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls FinishDlpJob.
                         * @function finishDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IFinishDlpJobRequest} request FinishDlpJobRequest message or plain object
                         * @param {google.privacy.dlp.v2.DlpService.FinishDlpJobCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DlpService.prototype.finishDlpJob = function finishDlpJob(request, callback) {
                            return this.rpcCall(finishDlpJob, $root.google.privacy.dlp.v2.FinishDlpJobRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "FinishDlpJob" });
    
                        /**
                         * Calls FinishDlpJob.
                         * @function finishDlpJob
                         * @memberof google.privacy.dlp.v2.DlpService
                         * @instance
                         * @param {google.privacy.dlp.v2.IFinishDlpJobRequest} request FinishDlpJobRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        return DlpService;
                    })();
    
                    v2.ExcludeInfoTypes = (function() {
    
                        /**
                         * Properties of an ExcludeInfoTypes.
                         * @memberof google.privacy.dlp.v2
                         * @interface IExcludeInfoTypes
                         * @property {Array.<google.privacy.dlp.v2.IInfoType>|null} [infoTypes] ExcludeInfoTypes infoTypes
                         */
    
                        /**
                         * Constructs a new ExcludeInfoTypes.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an ExcludeInfoTypes.
                         * @implements IExcludeInfoTypes
                         * @constructor
                         * @param {google.privacy.dlp.v2.IExcludeInfoTypes=} [properties] Properties to set
                         */
                        function ExcludeInfoTypes(properties) {
                            this.infoTypes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExcludeInfoTypes infoTypes.
                         * @member {Array.<google.privacy.dlp.v2.IInfoType>} infoTypes
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @instance
                         */
                        ExcludeInfoTypes.prototype.infoTypes = $util.emptyArray;
    
                        /**
                         * Creates a new ExcludeInfoTypes instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {google.privacy.dlp.v2.IExcludeInfoTypes=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ExcludeInfoTypes} ExcludeInfoTypes instance
                         */
                        ExcludeInfoTypes.create = function create(properties) {
                            return new ExcludeInfoTypes(properties);
                        };
    
                        /**
                         * Encodes the specified ExcludeInfoTypes message. Does not implicitly {@link google.privacy.dlp.v2.ExcludeInfoTypes.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {google.privacy.dlp.v2.IExcludeInfoTypes} message ExcludeInfoTypes message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExcludeInfoTypes.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoTypes != null && message.infoTypes.length)
                                for (var i = 0; i < message.infoTypes.length; ++i)
                                    $root.google.privacy.dlp.v2.InfoType.encode(message.infoTypes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExcludeInfoTypes message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ExcludeInfoTypes.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {google.privacy.dlp.v2.IExcludeInfoTypes} message ExcludeInfoTypes message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExcludeInfoTypes.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExcludeInfoTypes message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ExcludeInfoTypes} ExcludeInfoTypes
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExcludeInfoTypes.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ExcludeInfoTypes();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.infoTypes && message.infoTypes.length))
                                        message.infoTypes = [];
                                    message.infoTypes.push($root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExcludeInfoTypes message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ExcludeInfoTypes} ExcludeInfoTypes
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExcludeInfoTypes.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExcludeInfoTypes message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExcludeInfoTypes.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.infoTypes != null && message.hasOwnProperty("infoTypes")) {
                                if (!Array.isArray(message.infoTypes))
                                    return "infoTypes: array expected";
                                for (var i = 0; i < message.infoTypes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoTypes[i]);
                                    if (error)
                                        return "infoTypes." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ExcludeInfoTypes message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ExcludeInfoTypes} ExcludeInfoTypes
                         */
                        ExcludeInfoTypes.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ExcludeInfoTypes)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ExcludeInfoTypes();
                            if (object.infoTypes) {
                                if (!Array.isArray(object.infoTypes))
                                    throw TypeError(".google.privacy.dlp.v2.ExcludeInfoTypes.infoTypes: array expected");
                                message.infoTypes = [];
                                for (var i = 0; i < object.infoTypes.length; ++i) {
                                    if (typeof object.infoTypes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ExcludeInfoTypes.infoTypes: object expected");
                                    message.infoTypes[i] = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoTypes[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExcludeInfoTypes message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @static
                         * @param {google.privacy.dlp.v2.ExcludeInfoTypes} message ExcludeInfoTypes
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExcludeInfoTypes.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.infoTypes = [];
                            if (message.infoTypes && message.infoTypes.length) {
                                object.infoTypes = [];
                                for (var j = 0; j < message.infoTypes.length; ++j)
                                    object.infoTypes[j] = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoTypes[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ExcludeInfoTypes to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ExcludeInfoTypes
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExcludeInfoTypes.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ExcludeInfoTypes;
                    })();
    
                    v2.ExclusionRule = (function() {
    
                        /**
                         * Properties of an ExclusionRule.
                         * @memberof google.privacy.dlp.v2
                         * @interface IExclusionRule
                         * @property {google.privacy.dlp.v2.CustomInfoType.IDictionary|null} [dictionary] ExclusionRule dictionary
                         * @property {google.privacy.dlp.v2.CustomInfoType.IRegex|null} [regex] ExclusionRule regex
                         * @property {google.privacy.dlp.v2.IExcludeInfoTypes|null} [excludeInfoTypes] ExclusionRule excludeInfoTypes
                         * @property {google.privacy.dlp.v2.MatchingType|null} [matchingType] ExclusionRule matchingType
                         */
    
                        /**
                         * Constructs a new ExclusionRule.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an ExclusionRule.
                         * @implements IExclusionRule
                         * @constructor
                         * @param {google.privacy.dlp.v2.IExclusionRule=} [properties] Properties to set
                         */
                        function ExclusionRule(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExclusionRule dictionary.
                         * @member {google.privacy.dlp.v2.CustomInfoType.IDictionary|null|undefined} dictionary
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @instance
                         */
                        ExclusionRule.prototype.dictionary = null;
    
                        /**
                         * ExclusionRule regex.
                         * @member {google.privacy.dlp.v2.CustomInfoType.IRegex|null|undefined} regex
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @instance
                         */
                        ExclusionRule.prototype.regex = null;
    
                        /**
                         * ExclusionRule excludeInfoTypes.
                         * @member {google.privacy.dlp.v2.IExcludeInfoTypes|null|undefined} excludeInfoTypes
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @instance
                         */
                        ExclusionRule.prototype.excludeInfoTypes = null;
    
                        /**
                         * ExclusionRule matchingType.
                         * @member {google.privacy.dlp.v2.MatchingType} matchingType
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @instance
                         */
                        ExclusionRule.prototype.matchingType = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ExclusionRule type.
                         * @member {"dictionary"|"regex"|"excludeInfoTypes"|undefined} type
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @instance
                         */
                        Object.defineProperty(ExclusionRule.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["dictionary", "regex", "excludeInfoTypes"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ExclusionRule instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {google.privacy.dlp.v2.IExclusionRule=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ExclusionRule} ExclusionRule instance
                         */
                        ExclusionRule.create = function create(properties) {
                            return new ExclusionRule(properties);
                        };
    
                        /**
                         * Encodes the specified ExclusionRule message. Does not implicitly {@link google.privacy.dlp.v2.ExclusionRule.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {google.privacy.dlp.v2.IExclusionRule} message ExclusionRule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExclusionRule.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.dictionary != null && Object.hasOwnProperty.call(message, "dictionary"))
                                $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.encode(message.dictionary, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.regex != null && Object.hasOwnProperty.call(message, "regex"))
                                $root.google.privacy.dlp.v2.CustomInfoType.Regex.encode(message.regex, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.excludeInfoTypes != null && Object.hasOwnProperty.call(message, "excludeInfoTypes"))
                                $root.google.privacy.dlp.v2.ExcludeInfoTypes.encode(message.excludeInfoTypes, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.matchingType != null && Object.hasOwnProperty.call(message, "matchingType"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.matchingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExclusionRule message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ExclusionRule.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {google.privacy.dlp.v2.IExclusionRule} message ExclusionRule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExclusionRule.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExclusionRule message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ExclusionRule} ExclusionRule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExclusionRule.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ExclusionRule();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.excludeInfoTypes = $root.google.privacy.dlp.v2.ExcludeInfoTypes.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.matchingType = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExclusionRule message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ExclusionRule} ExclusionRule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExclusionRule.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExclusionRule message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExclusionRule.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.dictionary != null && message.hasOwnProperty("dictionary")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.verify(message.dictionary);
                                    if (error)
                                        return "dictionary." + error;
                                }
                            }
                            if (message.regex != null && message.hasOwnProperty("regex")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.Regex.verify(message.regex);
                                    if (error)
                                        return "regex." + error;
                                }
                            }
                            if (message.excludeInfoTypes != null && message.hasOwnProperty("excludeInfoTypes")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.ExcludeInfoTypes.verify(message.excludeInfoTypes);
                                    if (error)
                                        return "excludeInfoTypes." + error;
                                }
                            }
                            if (message.matchingType != null && message.hasOwnProperty("matchingType"))
                                switch (message.matchingType) {
                                default:
                                    return "matchingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an ExclusionRule message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ExclusionRule} ExclusionRule
                         */
                        ExclusionRule.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ExclusionRule)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ExclusionRule();
                            if (object.dictionary != null) {
                                if (typeof object.dictionary !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ExclusionRule.dictionary: object expected");
                                message.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.fromObject(object.dictionary);
                            }
                            if (object.regex != null) {
                                if (typeof object.regex !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ExclusionRule.regex: object expected");
                                message.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.fromObject(object.regex);
                            }
                            if (object.excludeInfoTypes != null) {
                                if (typeof object.excludeInfoTypes !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ExclusionRule.excludeInfoTypes: object expected");
                                message.excludeInfoTypes = $root.google.privacy.dlp.v2.ExcludeInfoTypes.fromObject(object.excludeInfoTypes);
                            }
                            switch (object.matchingType) {
                            case "MATCHING_TYPE_UNSPECIFIED":
                            case 0:
                                message.matchingType = 0;
                                break;
                            case "MATCHING_TYPE_FULL_MATCH":
                            case 1:
                                message.matchingType = 1;
                                break;
                            case "MATCHING_TYPE_PARTIAL_MATCH":
                            case 2:
                                message.matchingType = 2;
                                break;
                            case "MATCHING_TYPE_INVERSE_MATCH":
                            case 3:
                                message.matchingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExclusionRule message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @static
                         * @param {google.privacy.dlp.v2.ExclusionRule} message ExclusionRule
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExclusionRule.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.matchingType = options.enums === String ? "MATCHING_TYPE_UNSPECIFIED" : 0;
                            if (message.dictionary != null && message.hasOwnProperty("dictionary")) {
                                object.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.toObject(message.dictionary, options);
                                if (options.oneofs)
                                    object.type = "dictionary";
                            }
                            if (message.regex != null && message.hasOwnProperty("regex")) {
                                object.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.toObject(message.regex, options);
                                if (options.oneofs)
                                    object.type = "regex";
                            }
                            if (message.excludeInfoTypes != null && message.hasOwnProperty("excludeInfoTypes")) {
                                object.excludeInfoTypes = $root.google.privacy.dlp.v2.ExcludeInfoTypes.toObject(message.excludeInfoTypes, options);
                                if (options.oneofs)
                                    object.type = "excludeInfoTypes";
                            }
                            if (message.matchingType != null && message.hasOwnProperty("matchingType"))
                                object.matchingType = options.enums === String ? $root.google.privacy.dlp.v2.MatchingType[message.matchingType] : message.matchingType;
                            return object;
                        };
    
                        /**
                         * Converts this ExclusionRule to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ExclusionRule
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExclusionRule.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ExclusionRule;
                    })();
    
                    v2.InspectionRule = (function() {
    
                        /**
                         * Properties of an InspectionRule.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectionRule
                         * @property {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule|null} [hotwordRule] InspectionRule hotwordRule
                         * @property {google.privacy.dlp.v2.IExclusionRule|null} [exclusionRule] InspectionRule exclusionRule
                         */
    
                        /**
                         * Constructs a new InspectionRule.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectionRule.
                         * @implements IInspectionRule
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectionRule=} [properties] Properties to set
                         */
                        function InspectionRule(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectionRule hotwordRule.
                         * @member {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule|null|undefined} hotwordRule
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @instance
                         */
                        InspectionRule.prototype.hotwordRule = null;
    
                        /**
                         * InspectionRule exclusionRule.
                         * @member {google.privacy.dlp.v2.IExclusionRule|null|undefined} exclusionRule
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @instance
                         */
                        InspectionRule.prototype.exclusionRule = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * InspectionRule type.
                         * @member {"hotwordRule"|"exclusionRule"|undefined} type
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @instance
                         */
                        Object.defineProperty(InspectionRule.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["hotwordRule", "exclusionRule"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new InspectionRule instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectionRule=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectionRule} InspectionRule instance
                         */
                        InspectionRule.create = function create(properties) {
                            return new InspectionRule(properties);
                        };
    
                        /**
                         * Encodes the specified InspectionRule message. Does not implicitly {@link google.privacy.dlp.v2.InspectionRule.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectionRule} message InspectionRule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectionRule.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.hotwordRule != null && Object.hasOwnProperty.call(message, "hotwordRule"))
                                $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.encode(message.hotwordRule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.exclusionRule != null && Object.hasOwnProperty.call(message, "exclusionRule"))
                                $root.google.privacy.dlp.v2.ExclusionRule.encode(message.exclusionRule, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectionRule message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectionRule.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectionRule} message InspectionRule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectionRule.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectionRule message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectionRule} InspectionRule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectionRule.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectionRule();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.hotwordRule = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.exclusionRule = $root.google.privacy.dlp.v2.ExclusionRule.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectionRule message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectionRule} InspectionRule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectionRule.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectionRule message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectionRule.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.hotwordRule != null && message.hasOwnProperty("hotwordRule")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.verify(message.hotwordRule);
                                    if (error)
                                        return "hotwordRule." + error;
                                }
                            }
                            if (message.exclusionRule != null && message.hasOwnProperty("exclusionRule")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.ExclusionRule.verify(message.exclusionRule);
                                    if (error)
                                        return "exclusionRule." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectionRule message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectionRule} InspectionRule
                         */
                        InspectionRule.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectionRule)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectionRule();
                            if (object.hotwordRule != null) {
                                if (typeof object.hotwordRule !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectionRule.hotwordRule: object expected");
                                message.hotwordRule = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.fromObject(object.hotwordRule);
                            }
                            if (object.exclusionRule != null) {
                                if (typeof object.exclusionRule !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectionRule.exclusionRule: object expected");
                                message.exclusionRule = $root.google.privacy.dlp.v2.ExclusionRule.fromObject(object.exclusionRule);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectionRule message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @static
                         * @param {google.privacy.dlp.v2.InspectionRule} message InspectionRule
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectionRule.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.hotwordRule != null && message.hasOwnProperty("hotwordRule")) {
                                object.hotwordRule = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.toObject(message.hotwordRule, options);
                                if (options.oneofs)
                                    object.type = "hotwordRule";
                            }
                            if (message.exclusionRule != null && message.hasOwnProperty("exclusionRule")) {
                                object.exclusionRule = $root.google.privacy.dlp.v2.ExclusionRule.toObject(message.exclusionRule, options);
                                if (options.oneofs)
                                    object.type = "exclusionRule";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this InspectionRule to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectionRule
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectionRule.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectionRule;
                    })();
    
                    v2.InspectionRuleSet = (function() {
    
                        /**
                         * Properties of an InspectionRuleSet.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectionRuleSet
                         * @property {Array.<google.privacy.dlp.v2.IInfoType>|null} [infoTypes] InspectionRuleSet infoTypes
                         * @property {Array.<google.privacy.dlp.v2.IInspectionRule>|null} [rules] InspectionRuleSet rules
                         */
    
                        /**
                         * Constructs a new InspectionRuleSet.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectionRuleSet.
                         * @implements IInspectionRuleSet
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectionRuleSet=} [properties] Properties to set
                         */
                        function InspectionRuleSet(properties) {
                            this.infoTypes = [];
                            this.rules = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectionRuleSet infoTypes.
                         * @member {Array.<google.privacy.dlp.v2.IInfoType>} infoTypes
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @instance
                         */
                        InspectionRuleSet.prototype.infoTypes = $util.emptyArray;
    
                        /**
                         * InspectionRuleSet rules.
                         * @member {Array.<google.privacy.dlp.v2.IInspectionRule>} rules
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @instance
                         */
                        InspectionRuleSet.prototype.rules = $util.emptyArray;
    
                        /**
                         * Creates a new InspectionRuleSet instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectionRuleSet=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectionRuleSet} InspectionRuleSet instance
                         */
                        InspectionRuleSet.create = function create(properties) {
                            return new InspectionRuleSet(properties);
                        };
    
                        /**
                         * Encodes the specified InspectionRuleSet message. Does not implicitly {@link google.privacy.dlp.v2.InspectionRuleSet.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectionRuleSet} message InspectionRuleSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectionRuleSet.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoTypes != null && message.infoTypes.length)
                                for (var i = 0; i < message.infoTypes.length; ++i)
                                    $root.google.privacy.dlp.v2.InfoType.encode(message.infoTypes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.rules != null && message.rules.length)
                                for (var i = 0; i < message.rules.length; ++i)
                                    $root.google.privacy.dlp.v2.InspectionRule.encode(message.rules[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectionRuleSet message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectionRuleSet.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectionRuleSet} message InspectionRuleSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectionRuleSet.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectionRuleSet message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectionRuleSet} InspectionRuleSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectionRuleSet.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectionRuleSet();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.infoTypes && message.infoTypes.length))
                                        message.infoTypes = [];
                                    message.infoTypes.push($root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    if (!(message.rules && message.rules.length))
                                        message.rules = [];
                                    message.rules.push($root.google.privacy.dlp.v2.InspectionRule.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectionRuleSet message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectionRuleSet} InspectionRuleSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectionRuleSet.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectionRuleSet message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectionRuleSet.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.infoTypes != null && message.hasOwnProperty("infoTypes")) {
                                if (!Array.isArray(message.infoTypes))
                                    return "infoTypes: array expected";
                                for (var i = 0; i < message.infoTypes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoTypes[i]);
                                    if (error)
                                        return "infoTypes." + error;
                                }
                            }
                            if (message.rules != null && message.hasOwnProperty("rules")) {
                                if (!Array.isArray(message.rules))
                                    return "rules: array expected";
                                for (var i = 0; i < message.rules.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InspectionRule.verify(message.rules[i]);
                                    if (error)
                                        return "rules." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectionRuleSet message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectionRuleSet} InspectionRuleSet
                         */
                        InspectionRuleSet.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectionRuleSet)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectionRuleSet();
                            if (object.infoTypes) {
                                if (!Array.isArray(object.infoTypes))
                                    throw TypeError(".google.privacy.dlp.v2.InspectionRuleSet.infoTypes: array expected");
                                message.infoTypes = [];
                                for (var i = 0; i < object.infoTypes.length; ++i) {
                                    if (typeof object.infoTypes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectionRuleSet.infoTypes: object expected");
                                    message.infoTypes[i] = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoTypes[i]);
                                }
                            }
                            if (object.rules) {
                                if (!Array.isArray(object.rules))
                                    throw TypeError(".google.privacy.dlp.v2.InspectionRuleSet.rules: array expected");
                                message.rules = [];
                                for (var i = 0; i < object.rules.length; ++i) {
                                    if (typeof object.rules[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectionRuleSet.rules: object expected");
                                    message.rules[i] = $root.google.privacy.dlp.v2.InspectionRule.fromObject(object.rules[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectionRuleSet message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @static
                         * @param {google.privacy.dlp.v2.InspectionRuleSet} message InspectionRuleSet
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectionRuleSet.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.infoTypes = [];
                                object.rules = [];
                            }
                            if (message.infoTypes && message.infoTypes.length) {
                                object.infoTypes = [];
                                for (var j = 0; j < message.infoTypes.length; ++j)
                                    object.infoTypes[j] = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoTypes[j], options);
                            }
                            if (message.rules && message.rules.length) {
                                object.rules = [];
                                for (var j = 0; j < message.rules.length; ++j)
                                    object.rules[j] = $root.google.privacy.dlp.v2.InspectionRule.toObject(message.rules[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this InspectionRuleSet to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectionRuleSet
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectionRuleSet.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectionRuleSet;
                    })();
    
                    v2.InspectConfig = (function() {
    
                        /**
                         * Properties of an InspectConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectConfig
                         * @property {Array.<google.privacy.dlp.v2.IInfoType>|null} [infoTypes] InspectConfig infoTypes
                         * @property {google.privacy.dlp.v2.Likelihood|null} [minLikelihood] InspectConfig minLikelihood
                         * @property {google.privacy.dlp.v2.InspectConfig.IFindingLimits|null} [limits] InspectConfig limits
                         * @property {boolean|null} [includeQuote] InspectConfig includeQuote
                         * @property {boolean|null} [excludeInfoTypes] InspectConfig excludeInfoTypes
                         * @property {Array.<google.privacy.dlp.v2.ICustomInfoType>|null} [customInfoTypes] InspectConfig customInfoTypes
                         * @property {Array.<google.privacy.dlp.v2.ContentOption>|null} [contentOptions] InspectConfig contentOptions
                         * @property {Array.<google.privacy.dlp.v2.IInspectionRuleSet>|null} [ruleSet] InspectConfig ruleSet
                         */
    
                        /**
                         * Constructs a new InspectConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectConfig.
                         * @implements IInspectConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectConfig=} [properties] Properties to set
                         */
                        function InspectConfig(properties) {
                            this.infoTypes = [];
                            this.customInfoTypes = [];
                            this.contentOptions = [];
                            this.ruleSet = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectConfig infoTypes.
                         * @member {Array.<google.privacy.dlp.v2.IInfoType>} infoTypes
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.infoTypes = $util.emptyArray;
    
                        /**
                         * InspectConfig minLikelihood.
                         * @member {google.privacy.dlp.v2.Likelihood} minLikelihood
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.minLikelihood = 0;
    
                        /**
                         * InspectConfig limits.
                         * @member {google.privacy.dlp.v2.InspectConfig.IFindingLimits|null|undefined} limits
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.limits = null;
    
                        /**
                         * InspectConfig includeQuote.
                         * @member {boolean} includeQuote
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.includeQuote = false;
    
                        /**
                         * InspectConfig excludeInfoTypes.
                         * @member {boolean} excludeInfoTypes
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.excludeInfoTypes = false;
    
                        /**
                         * InspectConfig customInfoTypes.
                         * @member {Array.<google.privacy.dlp.v2.ICustomInfoType>} customInfoTypes
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.customInfoTypes = $util.emptyArray;
    
                        /**
                         * InspectConfig contentOptions.
                         * @member {Array.<google.privacy.dlp.v2.ContentOption>} contentOptions
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.contentOptions = $util.emptyArray;
    
                        /**
                         * InspectConfig ruleSet.
                         * @member {Array.<google.privacy.dlp.v2.IInspectionRuleSet>} ruleSet
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         */
                        InspectConfig.prototype.ruleSet = $util.emptyArray;
    
                        /**
                         * Creates a new InspectConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectConfig} InspectConfig instance
                         */
                        InspectConfig.create = function create(properties) {
                            return new InspectConfig(properties);
                        };
    
                        /**
                         * Encodes the specified InspectConfig message. Does not implicitly {@link google.privacy.dlp.v2.InspectConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectConfig} message InspectConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoTypes != null && message.infoTypes.length)
                                for (var i = 0; i < message.infoTypes.length; ++i)
                                    $root.google.privacy.dlp.v2.InfoType.encode(message.infoTypes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.minLikelihood != null && Object.hasOwnProperty.call(message, "minLikelihood"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.minLikelihood);
                            if (message.limits != null && Object.hasOwnProperty.call(message, "limits"))
                                $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.encode(message.limits, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.includeQuote != null && Object.hasOwnProperty.call(message, "includeQuote"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.includeQuote);
                            if (message.excludeInfoTypes != null && Object.hasOwnProperty.call(message, "excludeInfoTypes"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.excludeInfoTypes);
                            if (message.customInfoTypes != null && message.customInfoTypes.length)
                                for (var i = 0; i < message.customInfoTypes.length; ++i)
                                    $root.google.privacy.dlp.v2.CustomInfoType.encode(message.customInfoTypes[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.contentOptions != null && message.contentOptions.length) {
                                writer.uint32(/* id 8, wireType 2 =*/66).fork();
                                for (var i = 0; i < message.contentOptions.length; ++i)
                                    writer.int32(message.contentOptions[i]);
                                writer.ldelim();
                            }
                            if (message.ruleSet != null && message.ruleSet.length)
                                for (var i = 0; i < message.ruleSet.length; ++i)
                                    $root.google.privacy.dlp.v2.InspectionRuleSet.encode(message.ruleSet[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectConfig} message InspectConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectConfig} InspectConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.infoTypes && message.infoTypes.length))
                                        message.infoTypes = [];
                                    message.infoTypes.push($root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.minLikelihood = reader.int32();
                                    break;
                                case 3:
                                    message.limits = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.includeQuote = reader.bool();
                                    break;
                                case 5:
                                    message.excludeInfoTypes = reader.bool();
                                    break;
                                case 6:
                                    if (!(message.customInfoTypes && message.customInfoTypes.length))
                                        message.customInfoTypes = [];
                                    message.customInfoTypes.push($root.google.privacy.dlp.v2.CustomInfoType.decode(reader, reader.uint32()));
                                    break;
                                case 8:
                                    if (!(message.contentOptions && message.contentOptions.length))
                                        message.contentOptions = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.contentOptions.push(reader.int32());
                                    } else
                                        message.contentOptions.push(reader.int32());
                                    break;
                                case 10:
                                    if (!(message.ruleSet && message.ruleSet.length))
                                        message.ruleSet = [];
                                    message.ruleSet.push($root.google.privacy.dlp.v2.InspectionRuleSet.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectConfig} InspectConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.infoTypes != null && message.hasOwnProperty("infoTypes")) {
                                if (!Array.isArray(message.infoTypes))
                                    return "infoTypes: array expected";
                                for (var i = 0; i < message.infoTypes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoTypes[i]);
                                    if (error)
                                        return "infoTypes." + error;
                                }
                            }
                            if (message.minLikelihood != null && message.hasOwnProperty("minLikelihood"))
                                switch (message.minLikelihood) {
                                default:
                                    return "minLikelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            if (message.limits != null && message.hasOwnProperty("limits")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.verify(message.limits);
                                if (error)
                                    return "limits." + error;
                            }
                            if (message.includeQuote != null && message.hasOwnProperty("includeQuote"))
                                if (typeof message.includeQuote !== "boolean")
                                    return "includeQuote: boolean expected";
                            if (message.excludeInfoTypes != null && message.hasOwnProperty("excludeInfoTypes"))
                                if (typeof message.excludeInfoTypes !== "boolean")
                                    return "excludeInfoTypes: boolean expected";
                            if (message.customInfoTypes != null && message.hasOwnProperty("customInfoTypes")) {
                                if (!Array.isArray(message.customInfoTypes))
                                    return "customInfoTypes: array expected";
                                for (var i = 0; i < message.customInfoTypes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.verify(message.customInfoTypes[i]);
                                    if (error)
                                        return "customInfoTypes." + error;
                                }
                            }
                            if (message.contentOptions != null && message.hasOwnProperty("contentOptions")) {
                                if (!Array.isArray(message.contentOptions))
                                    return "contentOptions: array expected";
                                for (var i = 0; i < message.contentOptions.length; ++i)
                                    switch (message.contentOptions[i]) {
                                    default:
                                        return "contentOptions: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                            }
                            if (message.ruleSet != null && message.hasOwnProperty("ruleSet")) {
                                if (!Array.isArray(message.ruleSet))
                                    return "ruleSet: array expected";
                                for (var i = 0; i < message.ruleSet.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InspectionRuleSet.verify(message.ruleSet[i]);
                                    if (error)
                                        return "ruleSet." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectConfig} InspectConfig
                         */
                        InspectConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectConfig();
                            if (object.infoTypes) {
                                if (!Array.isArray(object.infoTypes))
                                    throw TypeError(".google.privacy.dlp.v2.InspectConfig.infoTypes: array expected");
                                message.infoTypes = [];
                                for (var i = 0; i < object.infoTypes.length; ++i) {
                                    if (typeof object.infoTypes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectConfig.infoTypes: object expected");
                                    message.infoTypes[i] = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoTypes[i]);
                                }
                            }
                            switch (object.minLikelihood) {
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.minLikelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.minLikelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.minLikelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.minLikelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.minLikelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.minLikelihood = 5;
                                break;
                            }
                            if (object.limits != null) {
                                if (typeof object.limits !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectConfig.limits: object expected");
                                message.limits = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.fromObject(object.limits);
                            }
                            if (object.includeQuote != null)
                                message.includeQuote = Boolean(object.includeQuote);
                            if (object.excludeInfoTypes != null)
                                message.excludeInfoTypes = Boolean(object.excludeInfoTypes);
                            if (object.customInfoTypes) {
                                if (!Array.isArray(object.customInfoTypes))
                                    throw TypeError(".google.privacy.dlp.v2.InspectConfig.customInfoTypes: array expected");
                                message.customInfoTypes = [];
                                for (var i = 0; i < object.customInfoTypes.length; ++i) {
                                    if (typeof object.customInfoTypes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectConfig.customInfoTypes: object expected");
                                    message.customInfoTypes[i] = $root.google.privacy.dlp.v2.CustomInfoType.fromObject(object.customInfoTypes[i]);
                                }
                            }
                            if (object.contentOptions) {
                                if (!Array.isArray(object.contentOptions))
                                    throw TypeError(".google.privacy.dlp.v2.InspectConfig.contentOptions: array expected");
                                message.contentOptions = [];
                                for (var i = 0; i < object.contentOptions.length; ++i)
                                    switch (object.contentOptions[i]) {
                                    default:
                                    case "CONTENT_UNSPECIFIED":
                                    case 0:
                                        message.contentOptions[i] = 0;
                                        break;
                                    case "CONTENT_TEXT":
                                    case 1:
                                        message.contentOptions[i] = 1;
                                        break;
                                    case "CONTENT_IMAGE":
                                    case 2:
                                        message.contentOptions[i] = 2;
                                        break;
                                    }
                            }
                            if (object.ruleSet) {
                                if (!Array.isArray(object.ruleSet))
                                    throw TypeError(".google.privacy.dlp.v2.InspectConfig.ruleSet: array expected");
                                message.ruleSet = [];
                                for (var i = 0; i < object.ruleSet.length; ++i) {
                                    if (typeof object.ruleSet[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectConfig.ruleSet: object expected");
                                    message.ruleSet[i] = $root.google.privacy.dlp.v2.InspectionRuleSet.fromObject(object.ruleSet[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @static
                         * @param {google.privacy.dlp.v2.InspectConfig} message InspectConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.infoTypes = [];
                                object.customInfoTypes = [];
                                object.contentOptions = [];
                                object.ruleSet = [];
                            }
                            if (options.defaults) {
                                object.minLikelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                                object.limits = null;
                                object.includeQuote = false;
                                object.excludeInfoTypes = false;
                            }
                            if (message.infoTypes && message.infoTypes.length) {
                                object.infoTypes = [];
                                for (var j = 0; j < message.infoTypes.length; ++j)
                                    object.infoTypes[j] = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoTypes[j], options);
                            }
                            if (message.minLikelihood != null && message.hasOwnProperty("minLikelihood"))
                                object.minLikelihood = options.enums === String ? $root.google.privacy.dlp.v2.Likelihood[message.minLikelihood] : message.minLikelihood;
                            if (message.limits != null && message.hasOwnProperty("limits"))
                                object.limits = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.toObject(message.limits, options);
                            if (message.includeQuote != null && message.hasOwnProperty("includeQuote"))
                                object.includeQuote = message.includeQuote;
                            if (message.excludeInfoTypes != null && message.hasOwnProperty("excludeInfoTypes"))
                                object.excludeInfoTypes = message.excludeInfoTypes;
                            if (message.customInfoTypes && message.customInfoTypes.length) {
                                object.customInfoTypes = [];
                                for (var j = 0; j < message.customInfoTypes.length; ++j)
                                    object.customInfoTypes[j] = $root.google.privacy.dlp.v2.CustomInfoType.toObject(message.customInfoTypes[j], options);
                            }
                            if (message.contentOptions && message.contentOptions.length) {
                                object.contentOptions = [];
                                for (var j = 0; j < message.contentOptions.length; ++j)
                                    object.contentOptions[j] = options.enums === String ? $root.google.privacy.dlp.v2.ContentOption[message.contentOptions[j]] : message.contentOptions[j];
                            }
                            if (message.ruleSet && message.ruleSet.length) {
                                object.ruleSet = [];
                                for (var j = 0; j < message.ruleSet.length; ++j)
                                    object.ruleSet[j] = $root.google.privacy.dlp.v2.InspectionRuleSet.toObject(message.ruleSet[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this InspectConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        InspectConfig.FindingLimits = (function() {
    
                            /**
                             * Properties of a FindingLimits.
                             * @memberof google.privacy.dlp.v2.InspectConfig
                             * @interface IFindingLimits
                             * @property {number|null} [maxFindingsPerItem] FindingLimits maxFindingsPerItem
                             * @property {number|null} [maxFindingsPerRequest] FindingLimits maxFindingsPerRequest
                             * @property {Array.<google.privacy.dlp.v2.InspectConfig.FindingLimits.IInfoTypeLimit>|null} [maxFindingsPerInfoType] FindingLimits maxFindingsPerInfoType
                             */
    
                            /**
                             * Constructs a new FindingLimits.
                             * @memberof google.privacy.dlp.v2.InspectConfig
                             * @classdesc Represents a FindingLimits.
                             * @implements IFindingLimits
                             * @constructor
                             * @param {google.privacy.dlp.v2.InspectConfig.IFindingLimits=} [properties] Properties to set
                             */
                            function FindingLimits(properties) {
                                this.maxFindingsPerInfoType = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * FindingLimits maxFindingsPerItem.
                             * @member {number} maxFindingsPerItem
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @instance
                             */
                            FindingLimits.prototype.maxFindingsPerItem = 0;
    
                            /**
                             * FindingLimits maxFindingsPerRequest.
                             * @member {number} maxFindingsPerRequest
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @instance
                             */
                            FindingLimits.prototype.maxFindingsPerRequest = 0;
    
                            /**
                             * FindingLimits maxFindingsPerInfoType.
                             * @member {Array.<google.privacy.dlp.v2.InspectConfig.FindingLimits.IInfoTypeLimit>} maxFindingsPerInfoType
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @instance
                             */
                            FindingLimits.prototype.maxFindingsPerInfoType = $util.emptyArray;
    
                            /**
                             * Creates a new FindingLimits instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {google.privacy.dlp.v2.InspectConfig.IFindingLimits=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits} FindingLimits instance
                             */
                            FindingLimits.create = function create(properties) {
                                return new FindingLimits(properties);
                            };
    
                            /**
                             * Encodes the specified FindingLimits message. Does not implicitly {@link google.privacy.dlp.v2.InspectConfig.FindingLimits.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {google.privacy.dlp.v2.InspectConfig.IFindingLimits} message FindingLimits message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FindingLimits.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.maxFindingsPerItem != null && Object.hasOwnProperty.call(message, "maxFindingsPerItem"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.maxFindingsPerItem);
                                if (message.maxFindingsPerRequest != null && Object.hasOwnProperty.call(message, "maxFindingsPerRequest"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxFindingsPerRequest);
                                if (message.maxFindingsPerInfoType != null && message.maxFindingsPerInfoType.length)
                                    for (var i = 0; i < message.maxFindingsPerInfoType.length; ++i)
                                        $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.encode(message.maxFindingsPerInfoType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified FindingLimits message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectConfig.FindingLimits.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {google.privacy.dlp.v2.InspectConfig.IFindingLimits} message FindingLimits message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FindingLimits.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a FindingLimits message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits} FindingLimits
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FindingLimits.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectConfig.FindingLimits();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.maxFindingsPerItem = reader.int32();
                                        break;
                                    case 2:
                                        message.maxFindingsPerRequest = reader.int32();
                                        break;
                                    case 3:
                                        if (!(message.maxFindingsPerInfoType && message.maxFindingsPerInfoType.length))
                                            message.maxFindingsPerInfoType = [];
                                        message.maxFindingsPerInfoType.push($root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a FindingLimits message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits} FindingLimits
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FindingLimits.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a FindingLimits message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            FindingLimits.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.maxFindingsPerItem != null && message.hasOwnProperty("maxFindingsPerItem"))
                                    if (!$util.isInteger(message.maxFindingsPerItem))
                                        return "maxFindingsPerItem: integer expected";
                                if (message.maxFindingsPerRequest != null && message.hasOwnProperty("maxFindingsPerRequest"))
                                    if (!$util.isInteger(message.maxFindingsPerRequest))
                                        return "maxFindingsPerRequest: integer expected";
                                if (message.maxFindingsPerInfoType != null && message.hasOwnProperty("maxFindingsPerInfoType")) {
                                    if (!Array.isArray(message.maxFindingsPerInfoType))
                                        return "maxFindingsPerInfoType: array expected";
                                    for (var i = 0; i < message.maxFindingsPerInfoType.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.verify(message.maxFindingsPerInfoType[i]);
                                        if (error)
                                            return "maxFindingsPerInfoType." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a FindingLimits message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits} FindingLimits
                             */
                            FindingLimits.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.InspectConfig.FindingLimits)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.InspectConfig.FindingLimits();
                                if (object.maxFindingsPerItem != null)
                                    message.maxFindingsPerItem = object.maxFindingsPerItem | 0;
                                if (object.maxFindingsPerRequest != null)
                                    message.maxFindingsPerRequest = object.maxFindingsPerRequest | 0;
                                if (object.maxFindingsPerInfoType) {
                                    if (!Array.isArray(object.maxFindingsPerInfoType))
                                        throw TypeError(".google.privacy.dlp.v2.InspectConfig.FindingLimits.maxFindingsPerInfoType: array expected");
                                    message.maxFindingsPerInfoType = [];
                                    for (var i = 0; i < object.maxFindingsPerInfoType.length; ++i) {
                                        if (typeof object.maxFindingsPerInfoType[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.InspectConfig.FindingLimits.maxFindingsPerInfoType: object expected");
                                        message.maxFindingsPerInfoType[i] = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.fromObject(object.maxFindingsPerInfoType[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a FindingLimits message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @static
                             * @param {google.privacy.dlp.v2.InspectConfig.FindingLimits} message FindingLimits
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            FindingLimits.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.maxFindingsPerInfoType = [];
                                if (options.defaults) {
                                    object.maxFindingsPerItem = 0;
                                    object.maxFindingsPerRequest = 0;
                                }
                                if (message.maxFindingsPerItem != null && message.hasOwnProperty("maxFindingsPerItem"))
                                    object.maxFindingsPerItem = message.maxFindingsPerItem;
                                if (message.maxFindingsPerRequest != null && message.hasOwnProperty("maxFindingsPerRequest"))
                                    object.maxFindingsPerRequest = message.maxFindingsPerRequest;
                                if (message.maxFindingsPerInfoType && message.maxFindingsPerInfoType.length) {
                                    object.maxFindingsPerInfoType = [];
                                    for (var j = 0; j < message.maxFindingsPerInfoType.length; ++j)
                                        object.maxFindingsPerInfoType[j] = $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.toObject(message.maxFindingsPerInfoType[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this FindingLimits to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            FindingLimits.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            FindingLimits.InfoTypeLimit = (function() {
    
                                /**
                                 * Properties of an InfoTypeLimit.
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                                 * @interface IInfoTypeLimit
                                 * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] InfoTypeLimit infoType
                                 * @property {number|null} [maxFindings] InfoTypeLimit maxFindings
                                 */
    
                                /**
                                 * Constructs a new InfoTypeLimit.
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits
                                 * @classdesc Represents an InfoTypeLimit.
                                 * @implements IInfoTypeLimit
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.InspectConfig.FindingLimits.IInfoTypeLimit=} [properties] Properties to set
                                 */
                                function InfoTypeLimit(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * InfoTypeLimit infoType.
                                 * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @instance
                                 */
                                InfoTypeLimit.prototype.infoType = null;
    
                                /**
                                 * InfoTypeLimit maxFindings.
                                 * @member {number} maxFindings
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @instance
                                 */
                                InfoTypeLimit.prototype.maxFindings = 0;
    
                                /**
                                 * Creates a new InfoTypeLimit instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {google.privacy.dlp.v2.InspectConfig.FindingLimits.IInfoTypeLimit=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit} InfoTypeLimit instance
                                 */
                                InfoTypeLimit.create = function create(properties) {
                                    return new InfoTypeLimit(properties);
                                };
    
                                /**
                                 * Encodes the specified InfoTypeLimit message. Does not implicitly {@link google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {google.privacy.dlp.v2.InspectConfig.FindingLimits.IInfoTypeLimit} message InfoTypeLimit message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                InfoTypeLimit.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                        $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.maxFindings != null && Object.hasOwnProperty.call(message, "maxFindings"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxFindings);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified InfoTypeLimit message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {google.privacy.dlp.v2.InspectConfig.FindingLimits.IInfoTypeLimit} message InfoTypeLimit message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                InfoTypeLimit.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an InfoTypeLimit message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit} InfoTypeLimit
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                InfoTypeLimit.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.maxFindings = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an InfoTypeLimit message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit} InfoTypeLimit
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                InfoTypeLimit.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an InfoTypeLimit message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                InfoTypeLimit.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                        var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                        if (error)
                                            return "infoType." + error;
                                    }
                                    if (message.maxFindings != null && message.hasOwnProperty("maxFindings"))
                                        if (!$util.isInteger(message.maxFindings))
                                            return "maxFindings: integer expected";
                                    return null;
                                };
    
                                /**
                                 * Creates an InfoTypeLimit message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit} InfoTypeLimit
                                 */
                                InfoTypeLimit.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit();
                                    if (object.infoType != null) {
                                        if (typeof object.infoType !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.infoType: object expected");
                                        message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                                    }
                                    if (object.maxFindings != null)
                                        message.maxFindings = object.maxFindings | 0;
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an InfoTypeLimit message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @static
                                 * @param {google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit} message InfoTypeLimit
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                InfoTypeLimit.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.infoType = null;
                                        object.maxFindings = 0;
                                    }
                                    if (message.infoType != null && message.hasOwnProperty("infoType"))
                                        object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                                    if (message.maxFindings != null && message.hasOwnProperty("maxFindings"))
                                        object.maxFindings = message.maxFindings;
                                    return object;
                                };
    
                                /**
                                 * Converts this InfoTypeLimit to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                InfoTypeLimit.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return InfoTypeLimit;
                            })();
    
                            return FindingLimits;
                        })();
    
                        return InspectConfig;
                    })();
    
                    v2.ByteContentItem = (function() {
    
                        /**
                         * Properties of a ByteContentItem.
                         * @memberof google.privacy.dlp.v2
                         * @interface IByteContentItem
                         * @property {google.privacy.dlp.v2.ByteContentItem.BytesType|null} [type] ByteContentItem type
                         * @property {Uint8Array|null} [data] ByteContentItem data
                         */
    
                        /**
                         * Constructs a new ByteContentItem.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ByteContentItem.
                         * @implements IByteContentItem
                         * @constructor
                         * @param {google.privacy.dlp.v2.IByteContentItem=} [properties] Properties to set
                         */
                        function ByteContentItem(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ByteContentItem type.
                         * @member {google.privacy.dlp.v2.ByteContentItem.BytesType} type
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @instance
                         */
                        ByteContentItem.prototype.type = 0;
    
                        /**
                         * ByteContentItem data.
                         * @member {Uint8Array} data
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @instance
                         */
                        ByteContentItem.prototype.data = $util.newBuffer([]);
    
                        /**
                         * Creates a new ByteContentItem instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IByteContentItem=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ByteContentItem} ByteContentItem instance
                         */
                        ByteContentItem.create = function create(properties) {
                            return new ByteContentItem(properties);
                        };
    
                        /**
                         * Encodes the specified ByteContentItem message. Does not implicitly {@link google.privacy.dlp.v2.ByteContentItem.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IByteContentItem} message ByteContentItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ByteContentItem.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ByteContentItem message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ByteContentItem.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IByteContentItem} message ByteContentItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ByteContentItem.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ByteContentItem message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ByteContentItem} ByteContentItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ByteContentItem.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ByteContentItem();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 2:
                                    message.data = reader.bytes();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ByteContentItem message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ByteContentItem} ByteContentItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ByteContentItem.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ByteContentItem message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ByteContentItem.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 6:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 7:
                                case 8:
                                case 11:
                                case 12:
                                case 13:
                                    break;
                                }
                            if (message.data != null && message.hasOwnProperty("data"))
                                if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                    return "data: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates a ByteContentItem message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ByteContentItem} ByteContentItem
                         */
                        ByteContentItem.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ByteContentItem)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ByteContentItem();
                            switch (object.type) {
                            case "BYTES_TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "IMAGE":
                            case 6:
                                message.type = 6;
                                break;
                            case "IMAGE_JPEG":
                            case 1:
                                message.type = 1;
                                break;
                            case "IMAGE_BMP":
                            case 2:
                                message.type = 2;
                                break;
                            case "IMAGE_PNG":
                            case 3:
                                message.type = 3;
                                break;
                            case "IMAGE_SVG":
                            case 4:
                                message.type = 4;
                                break;
                            case "TEXT_UTF8":
                            case 5:
                                message.type = 5;
                                break;
                            case "WORD_DOCUMENT":
                            case 7:
                                message.type = 7;
                                break;
                            case "PDF":
                            case 8:
                                message.type = 8;
                                break;
                            case "AVRO":
                            case 11:
                                message.type = 11;
                                break;
                            case "CSV":
                            case 12:
                                message.type = 12;
                                break;
                            case "TSV":
                            case 13:
                                message.type = 13;
                                break;
                            }
                            if (object.data != null)
                                if (typeof object.data === "string")
                                    $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                                else if (object.data.length)
                                    message.data = object.data;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ByteContentItem message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.ByteContentItem} message ByteContentItem
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ByteContentItem.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "BYTES_TYPE_UNSPECIFIED" : 0;
                                if (options.bytes === String)
                                    object.data = "";
                                else {
                                    object.data = [];
                                    if (options.bytes !== Array)
                                        object.data = $util.newBuffer(object.data);
                                }
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.privacy.dlp.v2.ByteContentItem.BytesType[message.type] : message.type;
                            if (message.data != null && message.hasOwnProperty("data"))
                                object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                            return object;
                        };
    
                        /**
                         * Converts this ByteContentItem to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ByteContentItem
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ByteContentItem.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * BytesType enum.
                         * @name google.privacy.dlp.v2.ByteContentItem.BytesType
                         * @enum {number}
                         * @property {number} BYTES_TYPE_UNSPECIFIED=0 BYTES_TYPE_UNSPECIFIED value
                         * @property {number} IMAGE=6 IMAGE value
                         * @property {number} IMAGE_JPEG=1 IMAGE_JPEG value
                         * @property {number} IMAGE_BMP=2 IMAGE_BMP value
                         * @property {number} IMAGE_PNG=3 IMAGE_PNG value
                         * @property {number} IMAGE_SVG=4 IMAGE_SVG value
                         * @property {number} TEXT_UTF8=5 TEXT_UTF8 value
                         * @property {number} WORD_DOCUMENT=7 WORD_DOCUMENT value
                         * @property {number} PDF=8 PDF value
                         * @property {number} AVRO=11 AVRO value
                         * @property {number} CSV=12 CSV value
                         * @property {number} TSV=13 TSV value
                         */
                        ByteContentItem.BytesType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "BYTES_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[6] = "IMAGE"] = 6;
                            values[valuesById[1] = "IMAGE_JPEG"] = 1;
                            values[valuesById[2] = "IMAGE_BMP"] = 2;
                            values[valuesById[3] = "IMAGE_PNG"] = 3;
                            values[valuesById[4] = "IMAGE_SVG"] = 4;
                            values[valuesById[5] = "TEXT_UTF8"] = 5;
                            values[valuesById[7] = "WORD_DOCUMENT"] = 7;
                            values[valuesById[8] = "PDF"] = 8;
                            values[valuesById[11] = "AVRO"] = 11;
                            values[valuesById[12] = "CSV"] = 12;
                            values[valuesById[13] = "TSV"] = 13;
                            return values;
                        })();
    
                        return ByteContentItem;
                    })();
    
                    v2.ContentItem = (function() {
    
                        /**
                         * Properties of a ContentItem.
                         * @memberof google.privacy.dlp.v2
                         * @interface IContentItem
                         * @property {string|null} [value] ContentItem value
                         * @property {google.privacy.dlp.v2.ITable|null} [table] ContentItem table
                         * @property {google.privacy.dlp.v2.IByteContentItem|null} [byteItem] ContentItem byteItem
                         */
    
                        /**
                         * Constructs a new ContentItem.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ContentItem.
                         * @implements IContentItem
                         * @constructor
                         * @param {google.privacy.dlp.v2.IContentItem=} [properties] Properties to set
                         */
                        function ContentItem(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ContentItem value.
                         * @member {string} value
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @instance
                         */
                        ContentItem.prototype.value = "";
    
                        /**
                         * ContentItem table.
                         * @member {google.privacy.dlp.v2.ITable|null|undefined} table
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @instance
                         */
                        ContentItem.prototype.table = null;
    
                        /**
                         * ContentItem byteItem.
                         * @member {google.privacy.dlp.v2.IByteContentItem|null|undefined} byteItem
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @instance
                         */
                        ContentItem.prototype.byteItem = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ContentItem dataItem.
                         * @member {"value"|"table"|"byteItem"|undefined} dataItem
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @instance
                         */
                        Object.defineProperty(ContentItem.prototype, "dataItem", {
                            get: $util.oneOfGetter($oneOfFields = ["value", "table", "byteItem"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ContentItem instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IContentItem=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ContentItem} ContentItem instance
                         */
                        ContentItem.create = function create(properties) {
                            return new ContentItem(properties);
                        };
    
                        /**
                         * Encodes the specified ContentItem message. Does not implicitly {@link google.privacy.dlp.v2.ContentItem.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IContentItem} message ContentItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ContentItem.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);
                            if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                $root.google.privacy.dlp.v2.Table.encode(message.table, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.byteItem != null && Object.hasOwnProperty.call(message, "byteItem"))
                                $root.google.privacy.dlp.v2.ByteContentItem.encode(message.byteItem, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ContentItem message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ContentItem.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IContentItem} message ContentItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ContentItem.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ContentItem message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ContentItem} ContentItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ContentItem.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ContentItem();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3:
                                    message.value = reader.string();
                                    break;
                                case 4:
                                    message.table = $root.google.privacy.dlp.v2.Table.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.byteItem = $root.google.privacy.dlp.v2.ByteContentItem.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ContentItem message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ContentItem} ContentItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ContentItem.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ContentItem message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ContentItem.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.value != null && message.hasOwnProperty("value")) {
                                properties.dataItem = 1;
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            }
                            if (message.table != null && message.hasOwnProperty("table")) {
                                if (properties.dataItem === 1)
                                    return "dataItem: multiple values";
                                properties.dataItem = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Table.verify(message.table);
                                    if (error)
                                        return "table." + error;
                                }
                            }
                            if (message.byteItem != null && message.hasOwnProperty("byteItem")) {
                                if (properties.dataItem === 1)
                                    return "dataItem: multiple values";
                                properties.dataItem = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.ByteContentItem.verify(message.byteItem);
                                    if (error)
                                        return "byteItem." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ContentItem message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ContentItem} ContentItem
                         */
                        ContentItem.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ContentItem)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ContentItem();
                            if (object.value != null)
                                message.value = String(object.value);
                            if (object.table != null) {
                                if (typeof object.table !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentItem.table: object expected");
                                message.table = $root.google.privacy.dlp.v2.Table.fromObject(object.table);
                            }
                            if (object.byteItem != null) {
                                if (typeof object.byteItem !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentItem.byteItem: object expected");
                                message.byteItem = $root.google.privacy.dlp.v2.ByteContentItem.fromObject(object.byteItem);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ContentItem message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.ContentItem} message ContentItem
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ContentItem.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.value != null && message.hasOwnProperty("value")) {
                                object.value = message.value;
                                if (options.oneofs)
                                    object.dataItem = "value";
                            }
                            if (message.table != null && message.hasOwnProperty("table")) {
                                object.table = $root.google.privacy.dlp.v2.Table.toObject(message.table, options);
                                if (options.oneofs)
                                    object.dataItem = "table";
                            }
                            if (message.byteItem != null && message.hasOwnProperty("byteItem")) {
                                object.byteItem = $root.google.privacy.dlp.v2.ByteContentItem.toObject(message.byteItem, options);
                                if (options.oneofs)
                                    object.dataItem = "byteItem";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ContentItem to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ContentItem
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ContentItem.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ContentItem;
                    })();
    
                    v2.Table = (function() {
    
                        /**
                         * Properties of a Table.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITable
                         * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [headers] Table headers
                         * @property {Array.<google.privacy.dlp.v2.Table.IRow>|null} [rows] Table rows
                         */
    
                        /**
                         * Constructs a new Table.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Table.
                         * @implements ITable
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITable=} [properties] Properties to set
                         */
                        function Table(properties) {
                            this.headers = [];
                            this.rows = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Table headers.
                         * @member {Array.<google.privacy.dlp.v2.IFieldId>} headers
                         * @memberof google.privacy.dlp.v2.Table
                         * @instance
                         */
                        Table.prototype.headers = $util.emptyArray;
    
                        /**
                         * Table rows.
                         * @member {Array.<google.privacy.dlp.v2.Table.IRow>} rows
                         * @memberof google.privacy.dlp.v2.Table
                         * @instance
                         */
                        Table.prototype.rows = $util.emptyArray;
    
                        /**
                         * Creates a new Table instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {google.privacy.dlp.v2.ITable=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Table} Table instance
                         */
                        Table.create = function create(properties) {
                            return new Table(properties);
                        };
    
                        /**
                         * Encodes the specified Table message. Does not implicitly {@link google.privacy.dlp.v2.Table.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {google.privacy.dlp.v2.ITable} message Table message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Table.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.headers != null && message.headers.length)
                                for (var i = 0; i < message.headers.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.headers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.rows != null && message.rows.length)
                                for (var i = 0; i < message.rows.length; ++i)
                                    $root.google.privacy.dlp.v2.Table.Row.encode(message.rows[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Table message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Table.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {google.privacy.dlp.v2.ITable} message Table message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Table.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Table message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Table} Table
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Table.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Table();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.headers && message.headers.length))
                                        message.headers = [];
                                    message.headers.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    if (!(message.rows && message.rows.length))
                                        message.rows = [];
                                    message.rows.push($root.google.privacy.dlp.v2.Table.Row.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Table message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Table} Table
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Table.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Table message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Table.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.headers != null && message.hasOwnProperty("headers")) {
                                if (!Array.isArray(message.headers))
                                    return "headers: array expected";
                                for (var i = 0; i < message.headers.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.headers[i]);
                                    if (error)
                                        return "headers." + error;
                                }
                            }
                            if (message.rows != null && message.hasOwnProperty("rows")) {
                                if (!Array.isArray(message.rows))
                                    return "rows: array expected";
                                for (var i = 0; i < message.rows.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Table.Row.verify(message.rows[i]);
                                    if (error)
                                        return "rows." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Table message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Table} Table
                         */
                        Table.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Table)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Table();
                            if (object.headers) {
                                if (!Array.isArray(object.headers))
                                    throw TypeError(".google.privacy.dlp.v2.Table.headers: array expected");
                                message.headers = [];
                                for (var i = 0; i < object.headers.length; ++i) {
                                    if (typeof object.headers[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.Table.headers: object expected");
                                    message.headers[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.headers[i]);
                                }
                            }
                            if (object.rows) {
                                if (!Array.isArray(object.rows))
                                    throw TypeError(".google.privacy.dlp.v2.Table.rows: array expected");
                                message.rows = [];
                                for (var i = 0; i < object.rows.length; ++i) {
                                    if (typeof object.rows[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.Table.rows: object expected");
                                    message.rows[i] = $root.google.privacy.dlp.v2.Table.Row.fromObject(object.rows[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Table message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Table
                         * @static
                         * @param {google.privacy.dlp.v2.Table} message Table
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Table.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.headers = [];
                                object.rows = [];
                            }
                            if (message.headers && message.headers.length) {
                                object.headers = [];
                                for (var j = 0; j < message.headers.length; ++j)
                                    object.headers[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.headers[j], options);
                            }
                            if (message.rows && message.rows.length) {
                                object.rows = [];
                                for (var j = 0; j < message.rows.length; ++j)
                                    object.rows[j] = $root.google.privacy.dlp.v2.Table.Row.toObject(message.rows[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Table to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Table
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Table.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        Table.Row = (function() {
    
                            /**
                             * Properties of a Row.
                             * @memberof google.privacy.dlp.v2.Table
                             * @interface IRow
                             * @property {Array.<google.privacy.dlp.v2.IValue>|null} [values] Row values
                             */
    
                            /**
                             * Constructs a new Row.
                             * @memberof google.privacy.dlp.v2.Table
                             * @classdesc Represents a Row.
                             * @implements IRow
                             * @constructor
                             * @param {google.privacy.dlp.v2.Table.IRow=} [properties] Properties to set
                             */
                            function Row(properties) {
                                this.values = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Row values.
                             * @member {Array.<google.privacy.dlp.v2.IValue>} values
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @instance
                             */
                            Row.prototype.values = $util.emptyArray;
    
                            /**
                             * Creates a new Row instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {google.privacy.dlp.v2.Table.IRow=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Table.Row} Row instance
                             */
                            Row.create = function create(properties) {
                                return new Row(properties);
                            };
    
                            /**
                             * Encodes the specified Row message. Does not implicitly {@link google.privacy.dlp.v2.Table.Row.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {google.privacy.dlp.v2.Table.IRow} message Row message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Row.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.values != null && message.values.length)
                                    for (var i = 0; i < message.values.length; ++i)
                                        $root.google.privacy.dlp.v2.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Row message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Table.Row.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {google.privacy.dlp.v2.Table.IRow} message Row message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Row.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Row message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Table.Row} Row
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Row.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Table.Row();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.values && message.values.length))
                                            message.values = [];
                                        message.values.push($root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Row message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Table.Row} Row
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Row.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Row message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Row.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.values != null && message.hasOwnProperty("values")) {
                                    if (!Array.isArray(message.values))
                                        return "values: array expected";
                                    for (var i = 0; i < message.values.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.Value.verify(message.values[i]);
                                        if (error)
                                            return "values." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Row message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Table.Row} Row
                             */
                            Row.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Table.Row)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.Table.Row();
                                if (object.values) {
                                    if (!Array.isArray(object.values))
                                        throw TypeError(".google.privacy.dlp.v2.Table.Row.values: array expected");
                                    message.values = [];
                                    for (var i = 0; i < object.values.length; ++i) {
                                        if (typeof object.values[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.Table.Row.values: object expected");
                                        message.values[i] = $root.google.privacy.dlp.v2.Value.fromObject(object.values[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Row message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @static
                             * @param {google.privacy.dlp.v2.Table.Row} message Row
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Row.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.values = [];
                                if (message.values && message.values.length) {
                                    object.values = [];
                                    for (var j = 0; j < message.values.length; ++j)
                                        object.values[j] = $root.google.privacy.dlp.v2.Value.toObject(message.values[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Row to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Table.Row
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Row.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Row;
                        })();
    
                        return Table;
                    })();
    
                    v2.InspectResult = (function() {
    
                        /**
                         * Properties of an InspectResult.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectResult
                         * @property {Array.<google.privacy.dlp.v2.IFinding>|null} [findings] InspectResult findings
                         * @property {boolean|null} [findingsTruncated] InspectResult findingsTruncated
                         */
    
                        /**
                         * Constructs a new InspectResult.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectResult.
                         * @implements IInspectResult
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectResult=} [properties] Properties to set
                         */
                        function InspectResult(properties) {
                            this.findings = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectResult findings.
                         * @member {Array.<google.privacy.dlp.v2.IFinding>} findings
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @instance
                         */
                        InspectResult.prototype.findings = $util.emptyArray;
    
                        /**
                         * InspectResult findingsTruncated.
                         * @member {boolean} findingsTruncated
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @instance
                         */
                        InspectResult.prototype.findingsTruncated = false;
    
                        /**
                         * Creates a new InspectResult instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectResult=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectResult} InspectResult instance
                         */
                        InspectResult.create = function create(properties) {
                            return new InspectResult(properties);
                        };
    
                        /**
                         * Encodes the specified InspectResult message. Does not implicitly {@link google.privacy.dlp.v2.InspectResult.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectResult} message InspectResult message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectResult.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.findings != null && message.findings.length)
                                for (var i = 0; i < message.findings.length; ++i)
                                    $root.google.privacy.dlp.v2.Finding.encode(message.findings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.findingsTruncated != null && Object.hasOwnProperty.call(message, "findingsTruncated"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.findingsTruncated);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectResult.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectResult} message InspectResult message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectResult.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectResult message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectResult} InspectResult
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectResult.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectResult();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.findings && message.findings.length))
                                        message.findings = [];
                                    message.findings.push($root.google.privacy.dlp.v2.Finding.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.findingsTruncated = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectResult message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectResult} InspectResult
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectResult.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectResult message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectResult.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.findings != null && message.hasOwnProperty("findings")) {
                                if (!Array.isArray(message.findings))
                                    return "findings: array expected";
                                for (var i = 0; i < message.findings.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Finding.verify(message.findings[i]);
                                    if (error)
                                        return "findings." + error;
                                }
                            }
                            if (message.findingsTruncated != null && message.hasOwnProperty("findingsTruncated"))
                                if (typeof message.findingsTruncated !== "boolean")
                                    return "findingsTruncated: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates an InspectResult message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectResult} InspectResult
                         */
                        InspectResult.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectResult)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectResult();
                            if (object.findings) {
                                if (!Array.isArray(object.findings))
                                    throw TypeError(".google.privacy.dlp.v2.InspectResult.findings: array expected");
                                message.findings = [];
                                for (var i = 0; i < object.findings.length; ++i) {
                                    if (typeof object.findings[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectResult.findings: object expected");
                                    message.findings[i] = $root.google.privacy.dlp.v2.Finding.fromObject(object.findings[i]);
                                }
                            }
                            if (object.findingsTruncated != null)
                                message.findingsTruncated = Boolean(object.findingsTruncated);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectResult message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @static
                         * @param {google.privacy.dlp.v2.InspectResult} message InspectResult
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectResult.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.findings = [];
                            if (options.defaults)
                                object.findingsTruncated = false;
                            if (message.findings && message.findings.length) {
                                object.findings = [];
                                for (var j = 0; j < message.findings.length; ++j)
                                    object.findings[j] = $root.google.privacy.dlp.v2.Finding.toObject(message.findings[j], options);
                            }
                            if (message.findingsTruncated != null && message.hasOwnProperty("findingsTruncated"))
                                object.findingsTruncated = message.findingsTruncated;
                            return object;
                        };
    
                        /**
                         * Converts this InspectResult to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectResult
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectResult.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectResult;
                    })();
    
                    v2.Finding = (function() {
    
                        /**
                         * Properties of a Finding.
                         * @memberof google.privacy.dlp.v2
                         * @interface IFinding
                         * @property {string|null} [name] Finding name
                         * @property {string|null} [quote] Finding quote
                         * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] Finding infoType
                         * @property {google.privacy.dlp.v2.Likelihood|null} [likelihood] Finding likelihood
                         * @property {google.privacy.dlp.v2.ILocation|null} [location] Finding location
                         * @property {google.protobuf.ITimestamp|null} [createTime] Finding createTime
                         * @property {google.privacy.dlp.v2.IQuoteInfo|null} [quoteInfo] Finding quoteInfo
                         * @property {string|null} [resourceName] Finding resourceName
                         * @property {string|null} [triggerName] Finding triggerName
                         * @property {Object.<string,string>|null} [labels] Finding labels
                         * @property {google.protobuf.ITimestamp|null} [jobCreateTime] Finding jobCreateTime
                         * @property {string|null} [jobName] Finding jobName
                         */
    
                        /**
                         * Constructs a new Finding.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Finding.
                         * @implements IFinding
                         * @constructor
                         * @param {google.privacy.dlp.v2.IFinding=} [properties] Properties to set
                         */
                        function Finding(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Finding name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.name = "";
    
                        /**
                         * Finding quote.
                         * @member {string} quote
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.quote = "";
    
                        /**
                         * Finding infoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.infoType = null;
    
                        /**
                         * Finding likelihood.
                         * @member {google.privacy.dlp.v2.Likelihood} likelihood
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.likelihood = 0;
    
                        /**
                         * Finding location.
                         * @member {google.privacy.dlp.v2.ILocation|null|undefined} location
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.location = null;
    
                        /**
                         * Finding createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.createTime = null;
    
                        /**
                         * Finding quoteInfo.
                         * @member {google.privacy.dlp.v2.IQuoteInfo|null|undefined} quoteInfo
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.quoteInfo = null;
    
                        /**
                         * Finding resourceName.
                         * @member {string} resourceName
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.resourceName = "";
    
                        /**
                         * Finding triggerName.
                         * @member {string} triggerName
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.triggerName = "";
    
                        /**
                         * Finding labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.labels = $util.emptyObject;
    
                        /**
                         * Finding jobCreateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} jobCreateTime
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.jobCreateTime = null;
    
                        /**
                         * Finding jobName.
                         * @member {string} jobName
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         */
                        Finding.prototype.jobName = "";
    
                        /**
                         * Creates a new Finding instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {google.privacy.dlp.v2.IFinding=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Finding} Finding instance
                         */
                        Finding.create = function create(properties) {
                            return new Finding(properties);
                        };
    
                        /**
                         * Encodes the specified Finding message. Does not implicitly {@link google.privacy.dlp.v2.Finding.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {google.privacy.dlp.v2.IFinding} message Finding message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Finding.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.quote != null && Object.hasOwnProperty.call(message, "quote"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.quote);
                            if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.likelihood != null && Object.hasOwnProperty.call(message, "likelihood"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.likelihood);
                            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                                $root.google.privacy.dlp.v2.Location.encode(message.location, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.quoteInfo != null && Object.hasOwnProperty.call(message, "quoteInfo"))
                                $root.google.privacy.dlp.v2.QuoteInfo.encode(message.quoteInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.resourceName != null && Object.hasOwnProperty.call(message, "resourceName"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.resourceName);
                            if (message.triggerName != null && Object.hasOwnProperty.call(message, "triggerName"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.triggerName);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.jobCreateTime != null && Object.hasOwnProperty.call(message, "jobCreateTime"))
                                $root.google.protobuf.Timestamp.encode(message.jobCreateTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.jobName != null && Object.hasOwnProperty.call(message, "jobName"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.jobName);
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 14, wireType 2 =*/114).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Finding message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Finding.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {google.privacy.dlp.v2.IFinding} message Finding message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Finding.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Finding message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Finding} Finding
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Finding.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Finding(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 14:
                                    message.name = reader.string();
                                    break;
                                case 1:
                                    message.quote = reader.string();
                                    break;
                                case 2:
                                    message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.likelihood = reader.int32();
                                    break;
                                case 4:
                                    message.location = $root.google.privacy.dlp.v2.Location.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.quoteInfo = $root.google.privacy.dlp.v2.QuoteInfo.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.resourceName = reader.string();
                                    break;
                                case 9:
                                    message.triggerName = reader.string();
                                    break;
                                case 10:
                                    if (message.labels === $util.emptyObject)
                                        message.labels = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.labels[key] = value;
                                    break;
                                case 11:
                                    message.jobCreateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 13:
                                    message.jobName = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Finding message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Finding} Finding
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Finding.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Finding message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Finding.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.quote != null && message.hasOwnProperty("quote"))
                                if (!$util.isString(message.quote))
                                    return "quote: string expected";
                            if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                if (error)
                                    return "infoType." + error;
                            }
                            if (message.likelihood != null && message.hasOwnProperty("likelihood"))
                                switch (message.likelihood) {
                                default:
                                    return "likelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            if (message.location != null && message.hasOwnProperty("location")) {
                                var error = $root.google.privacy.dlp.v2.Location.verify(message.location);
                                if (error)
                                    return "location." + error;
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.quoteInfo != null && message.hasOwnProperty("quoteInfo")) {
                                var error = $root.google.privacy.dlp.v2.QuoteInfo.verify(message.quoteInfo);
                                if (error)
                                    return "quoteInfo." + error;
                            }
                            if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                                if (!$util.isString(message.resourceName))
                                    return "resourceName: string expected";
                            if (message.triggerName != null && message.hasOwnProperty("triggerName"))
                                if (!$util.isString(message.triggerName))
                                    return "triggerName: string expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.jobCreateTime != null && message.hasOwnProperty("jobCreateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.jobCreateTime);
                                if (error)
                                    return "jobCreateTime." + error;
                            }
                            if (message.jobName != null && message.hasOwnProperty("jobName"))
                                if (!$util.isString(message.jobName))
                                    return "jobName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Finding message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Finding} Finding
                         */
                        Finding.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Finding)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Finding();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.quote != null)
                                message.quote = String(object.quote);
                            if (object.infoType != null) {
                                if (typeof object.infoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Finding.infoType: object expected");
                                message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                            }
                            switch (object.likelihood) {
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.likelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.likelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.likelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.likelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.likelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.likelihood = 5;
                                break;
                            }
                            if (object.location != null) {
                                if (typeof object.location !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Finding.location: object expected");
                                message.location = $root.google.privacy.dlp.v2.Location.fromObject(object.location);
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Finding.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.quoteInfo != null) {
                                if (typeof object.quoteInfo !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Finding.quoteInfo: object expected");
                                message.quoteInfo = $root.google.privacy.dlp.v2.QuoteInfo.fromObject(object.quoteInfo);
                            }
                            if (object.resourceName != null)
                                message.resourceName = String(object.resourceName);
                            if (object.triggerName != null)
                                message.triggerName = String(object.triggerName);
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Finding.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.jobCreateTime != null) {
                                if (typeof object.jobCreateTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Finding.jobCreateTime: object expected");
                                message.jobCreateTime = $root.google.protobuf.Timestamp.fromObject(object.jobCreateTime);
                            }
                            if (object.jobName != null)
                                message.jobName = String(object.jobName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Finding message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Finding
                         * @static
                         * @param {google.privacy.dlp.v2.Finding} message Finding
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Finding.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.quote = "";
                                object.infoType = null;
                                object.likelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                                object.location = null;
                                object.createTime = null;
                                object.quoteInfo = null;
                                object.resourceName = "";
                                object.triggerName = "";
                                object.jobCreateTime = null;
                                object.jobName = "";
                                object.name = "";
                            }
                            if (message.quote != null && message.hasOwnProperty("quote"))
                                object.quote = message.quote;
                            if (message.infoType != null && message.hasOwnProperty("infoType"))
                                object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                            if (message.likelihood != null && message.hasOwnProperty("likelihood"))
                                object.likelihood = options.enums === String ? $root.google.privacy.dlp.v2.Likelihood[message.likelihood] : message.likelihood;
                            if (message.location != null && message.hasOwnProperty("location"))
                                object.location = $root.google.privacy.dlp.v2.Location.toObject(message.location, options);
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.quoteInfo != null && message.hasOwnProperty("quoteInfo"))
                                object.quoteInfo = $root.google.privacy.dlp.v2.QuoteInfo.toObject(message.quoteInfo, options);
                            if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                                object.resourceName = message.resourceName;
                            if (message.triggerName != null && message.hasOwnProperty("triggerName"))
                                object.triggerName = message.triggerName;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.jobCreateTime != null && message.hasOwnProperty("jobCreateTime"))
                                object.jobCreateTime = $root.google.protobuf.Timestamp.toObject(message.jobCreateTime, options);
                            if (message.jobName != null && message.hasOwnProperty("jobName"))
                                object.jobName = message.jobName;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this Finding to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Finding
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Finding.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Finding;
                    })();
    
                    v2.Location = (function() {
    
                        /**
                         * Properties of a Location.
                         * @memberof google.privacy.dlp.v2
                         * @interface ILocation
                         * @property {google.privacy.dlp.v2.IRange|null} [byteRange] Location byteRange
                         * @property {google.privacy.dlp.v2.IRange|null} [codepointRange] Location codepointRange
                         * @property {Array.<google.privacy.dlp.v2.IContentLocation>|null} [contentLocations] Location contentLocations
                         * @property {google.privacy.dlp.v2.IContainer|null} [container] Location container
                         */
    
                        /**
                         * Constructs a new Location.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Location.
                         * @implements ILocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.ILocation=} [properties] Properties to set
                         */
                        function Location(properties) {
                            this.contentLocations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Location byteRange.
                         * @member {google.privacy.dlp.v2.IRange|null|undefined} byteRange
                         * @memberof google.privacy.dlp.v2.Location
                         * @instance
                         */
                        Location.prototype.byteRange = null;
    
                        /**
                         * Location codepointRange.
                         * @member {google.privacy.dlp.v2.IRange|null|undefined} codepointRange
                         * @memberof google.privacy.dlp.v2.Location
                         * @instance
                         */
                        Location.prototype.codepointRange = null;
    
                        /**
                         * Location contentLocations.
                         * @member {Array.<google.privacy.dlp.v2.IContentLocation>} contentLocations
                         * @memberof google.privacy.dlp.v2.Location
                         * @instance
                         */
                        Location.prototype.contentLocations = $util.emptyArray;
    
                        /**
                         * Location container.
                         * @member {google.privacy.dlp.v2.IContainer|null|undefined} container
                         * @memberof google.privacy.dlp.v2.Location
                         * @instance
                         */
                        Location.prototype.container = null;
    
                        /**
                         * Creates a new Location instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {google.privacy.dlp.v2.ILocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Location} Location instance
                         */
                        Location.create = function create(properties) {
                            return new Location(properties);
                        };
    
                        /**
                         * Encodes the specified Location message. Does not implicitly {@link google.privacy.dlp.v2.Location.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {google.privacy.dlp.v2.ILocation} message Location message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Location.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.byteRange != null && Object.hasOwnProperty.call(message, "byteRange"))
                                $root.google.privacy.dlp.v2.Range.encode(message.byteRange, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.codepointRange != null && Object.hasOwnProperty.call(message, "codepointRange"))
                                $root.google.privacy.dlp.v2.Range.encode(message.codepointRange, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.contentLocations != null && message.contentLocations.length)
                                for (var i = 0; i < message.contentLocations.length; ++i)
                                    $root.google.privacy.dlp.v2.ContentLocation.encode(message.contentLocations[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.container != null && Object.hasOwnProperty.call(message, "container"))
                                $root.google.privacy.dlp.v2.Container.encode(message.container, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Location message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Location.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {google.privacy.dlp.v2.ILocation} message Location message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Location.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Location message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Location} Location
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Location.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Location();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.byteRange = $root.google.privacy.dlp.v2.Range.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.codepointRange = $root.google.privacy.dlp.v2.Range.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    if (!(message.contentLocations && message.contentLocations.length))
                                        message.contentLocations = [];
                                    message.contentLocations.push($root.google.privacy.dlp.v2.ContentLocation.decode(reader, reader.uint32()));
                                    break;
                                case 8:
                                    message.container = $root.google.privacy.dlp.v2.Container.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Location message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Location} Location
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Location.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Location message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Location.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.byteRange != null && message.hasOwnProperty("byteRange")) {
                                var error = $root.google.privacy.dlp.v2.Range.verify(message.byteRange);
                                if (error)
                                    return "byteRange." + error;
                            }
                            if (message.codepointRange != null && message.hasOwnProperty("codepointRange")) {
                                var error = $root.google.privacy.dlp.v2.Range.verify(message.codepointRange);
                                if (error)
                                    return "codepointRange." + error;
                            }
                            if (message.contentLocations != null && message.hasOwnProperty("contentLocations")) {
                                if (!Array.isArray(message.contentLocations))
                                    return "contentLocations: array expected";
                                for (var i = 0; i < message.contentLocations.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.ContentLocation.verify(message.contentLocations[i]);
                                    if (error)
                                        return "contentLocations." + error;
                                }
                            }
                            if (message.container != null && message.hasOwnProperty("container")) {
                                var error = $root.google.privacy.dlp.v2.Container.verify(message.container);
                                if (error)
                                    return "container." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Location message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Location} Location
                         */
                        Location.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Location)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Location();
                            if (object.byteRange != null) {
                                if (typeof object.byteRange !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Location.byteRange: object expected");
                                message.byteRange = $root.google.privacy.dlp.v2.Range.fromObject(object.byteRange);
                            }
                            if (object.codepointRange != null) {
                                if (typeof object.codepointRange !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Location.codepointRange: object expected");
                                message.codepointRange = $root.google.privacy.dlp.v2.Range.fromObject(object.codepointRange);
                            }
                            if (object.contentLocations) {
                                if (!Array.isArray(object.contentLocations))
                                    throw TypeError(".google.privacy.dlp.v2.Location.contentLocations: array expected");
                                message.contentLocations = [];
                                for (var i = 0; i < object.contentLocations.length; ++i) {
                                    if (typeof object.contentLocations[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.Location.contentLocations: object expected");
                                    message.contentLocations[i] = $root.google.privacy.dlp.v2.ContentLocation.fromObject(object.contentLocations[i]);
                                }
                            }
                            if (object.container != null) {
                                if (typeof object.container !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Location.container: object expected");
                                message.container = $root.google.privacy.dlp.v2.Container.fromObject(object.container);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Location message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Location
                         * @static
                         * @param {google.privacy.dlp.v2.Location} message Location
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Location.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.contentLocations = [];
                            if (options.defaults) {
                                object.byteRange = null;
                                object.codepointRange = null;
                                object.container = null;
                            }
                            if (message.byteRange != null && message.hasOwnProperty("byteRange"))
                                object.byteRange = $root.google.privacy.dlp.v2.Range.toObject(message.byteRange, options);
                            if (message.codepointRange != null && message.hasOwnProperty("codepointRange"))
                                object.codepointRange = $root.google.privacy.dlp.v2.Range.toObject(message.codepointRange, options);
                            if (message.contentLocations && message.contentLocations.length) {
                                object.contentLocations = [];
                                for (var j = 0; j < message.contentLocations.length; ++j)
                                    object.contentLocations[j] = $root.google.privacy.dlp.v2.ContentLocation.toObject(message.contentLocations[j], options);
                            }
                            if (message.container != null && message.hasOwnProperty("container"))
                                object.container = $root.google.privacy.dlp.v2.Container.toObject(message.container, options);
                            return object;
                        };
    
                        /**
                         * Converts this Location to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Location
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Location.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Location;
                    })();
    
                    v2.ContentLocation = (function() {
    
                        /**
                         * Properties of a ContentLocation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IContentLocation
                         * @property {string|null} [containerName] ContentLocation containerName
                         * @property {google.privacy.dlp.v2.IRecordLocation|null} [recordLocation] ContentLocation recordLocation
                         * @property {google.privacy.dlp.v2.IImageLocation|null} [imageLocation] ContentLocation imageLocation
                         * @property {google.privacy.dlp.v2.IDocumentLocation|null} [documentLocation] ContentLocation documentLocation
                         * @property {google.privacy.dlp.v2.IMetadataLocation|null} [metadataLocation] ContentLocation metadataLocation
                         * @property {google.protobuf.ITimestamp|null} [containerTimestamp] ContentLocation containerTimestamp
                         * @property {string|null} [containerVersion] ContentLocation containerVersion
                         */
    
                        /**
                         * Constructs a new ContentLocation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ContentLocation.
                         * @implements IContentLocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IContentLocation=} [properties] Properties to set
                         */
                        function ContentLocation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ContentLocation containerName.
                         * @member {string} containerName
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.containerName = "";
    
                        /**
                         * ContentLocation recordLocation.
                         * @member {google.privacy.dlp.v2.IRecordLocation|null|undefined} recordLocation
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.recordLocation = null;
    
                        /**
                         * ContentLocation imageLocation.
                         * @member {google.privacy.dlp.v2.IImageLocation|null|undefined} imageLocation
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.imageLocation = null;
    
                        /**
                         * ContentLocation documentLocation.
                         * @member {google.privacy.dlp.v2.IDocumentLocation|null|undefined} documentLocation
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.documentLocation = null;
    
                        /**
                         * ContentLocation metadataLocation.
                         * @member {google.privacy.dlp.v2.IMetadataLocation|null|undefined} metadataLocation
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.metadataLocation = null;
    
                        /**
                         * ContentLocation containerTimestamp.
                         * @member {google.protobuf.ITimestamp|null|undefined} containerTimestamp
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.containerTimestamp = null;
    
                        /**
                         * ContentLocation containerVersion.
                         * @member {string} containerVersion
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        ContentLocation.prototype.containerVersion = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ContentLocation location.
                         * @member {"recordLocation"|"imageLocation"|"documentLocation"|"metadataLocation"|undefined} location
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         */
                        Object.defineProperty(ContentLocation.prototype, "location", {
                            get: $util.oneOfGetter($oneOfFields = ["recordLocation", "imageLocation", "documentLocation", "metadataLocation"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ContentLocation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IContentLocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ContentLocation} ContentLocation instance
                         */
                        ContentLocation.create = function create(properties) {
                            return new ContentLocation(properties);
                        };
    
                        /**
                         * Encodes the specified ContentLocation message. Does not implicitly {@link google.privacy.dlp.v2.ContentLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IContentLocation} message ContentLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ContentLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.containerName != null && Object.hasOwnProperty.call(message, "containerName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.containerName);
                            if (message.recordLocation != null && Object.hasOwnProperty.call(message, "recordLocation"))
                                $root.google.privacy.dlp.v2.RecordLocation.encode(message.recordLocation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.imageLocation != null && Object.hasOwnProperty.call(message, "imageLocation"))
                                $root.google.privacy.dlp.v2.ImageLocation.encode(message.imageLocation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.documentLocation != null && Object.hasOwnProperty.call(message, "documentLocation"))
                                $root.google.privacy.dlp.v2.DocumentLocation.encode(message.documentLocation, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.containerTimestamp != null && Object.hasOwnProperty.call(message, "containerTimestamp"))
                                $root.google.protobuf.Timestamp.encode(message.containerTimestamp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.containerVersion != null && Object.hasOwnProperty.call(message, "containerVersion"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.containerVersion);
                            if (message.metadataLocation != null && Object.hasOwnProperty.call(message, "metadataLocation"))
                                $root.google.privacy.dlp.v2.MetadataLocation.encode(message.metadataLocation, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ContentLocation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ContentLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IContentLocation} message ContentLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ContentLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ContentLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ContentLocation} ContentLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ContentLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ContentLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.containerName = reader.string();
                                    break;
                                case 2:
                                    message.recordLocation = $root.google.privacy.dlp.v2.RecordLocation.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.imageLocation = $root.google.privacy.dlp.v2.ImageLocation.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.documentLocation = $root.google.privacy.dlp.v2.DocumentLocation.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.metadataLocation = $root.google.privacy.dlp.v2.MetadataLocation.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.containerTimestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.containerVersion = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ContentLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ContentLocation} ContentLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ContentLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ContentLocation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ContentLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.containerName != null && message.hasOwnProperty("containerName"))
                                if (!$util.isString(message.containerName))
                                    return "containerName: string expected";
                            if (message.recordLocation != null && message.hasOwnProperty("recordLocation")) {
                                properties.location = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.RecordLocation.verify(message.recordLocation);
                                    if (error)
                                        return "recordLocation." + error;
                                }
                            }
                            if (message.imageLocation != null && message.hasOwnProperty("imageLocation")) {
                                if (properties.location === 1)
                                    return "location: multiple values";
                                properties.location = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.ImageLocation.verify(message.imageLocation);
                                    if (error)
                                        return "imageLocation." + error;
                                }
                            }
                            if (message.documentLocation != null && message.hasOwnProperty("documentLocation")) {
                                if (properties.location === 1)
                                    return "location: multiple values";
                                properties.location = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.DocumentLocation.verify(message.documentLocation);
                                    if (error)
                                        return "documentLocation." + error;
                                }
                            }
                            if (message.metadataLocation != null && message.hasOwnProperty("metadataLocation")) {
                                if (properties.location === 1)
                                    return "location: multiple values";
                                properties.location = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.MetadataLocation.verify(message.metadataLocation);
                                    if (error)
                                        return "metadataLocation." + error;
                                }
                            }
                            if (message.containerTimestamp != null && message.hasOwnProperty("containerTimestamp")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.containerTimestamp);
                                if (error)
                                    return "containerTimestamp." + error;
                            }
                            if (message.containerVersion != null && message.hasOwnProperty("containerVersion"))
                                if (!$util.isString(message.containerVersion))
                                    return "containerVersion: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ContentLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ContentLocation} ContentLocation
                         */
                        ContentLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ContentLocation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ContentLocation();
                            if (object.containerName != null)
                                message.containerName = String(object.containerName);
                            if (object.recordLocation != null) {
                                if (typeof object.recordLocation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentLocation.recordLocation: object expected");
                                message.recordLocation = $root.google.privacy.dlp.v2.RecordLocation.fromObject(object.recordLocation);
                            }
                            if (object.imageLocation != null) {
                                if (typeof object.imageLocation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentLocation.imageLocation: object expected");
                                message.imageLocation = $root.google.privacy.dlp.v2.ImageLocation.fromObject(object.imageLocation);
                            }
                            if (object.documentLocation != null) {
                                if (typeof object.documentLocation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentLocation.documentLocation: object expected");
                                message.documentLocation = $root.google.privacy.dlp.v2.DocumentLocation.fromObject(object.documentLocation);
                            }
                            if (object.metadataLocation != null) {
                                if (typeof object.metadataLocation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentLocation.metadataLocation: object expected");
                                message.metadataLocation = $root.google.privacy.dlp.v2.MetadataLocation.fromObject(object.metadataLocation);
                            }
                            if (object.containerTimestamp != null) {
                                if (typeof object.containerTimestamp !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ContentLocation.containerTimestamp: object expected");
                                message.containerTimestamp = $root.google.protobuf.Timestamp.fromObject(object.containerTimestamp);
                            }
                            if (object.containerVersion != null)
                                message.containerVersion = String(object.containerVersion);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ContentLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.ContentLocation} message ContentLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ContentLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.containerName = "";
                                object.containerTimestamp = null;
                                object.containerVersion = "";
                            }
                            if (message.containerName != null && message.hasOwnProperty("containerName"))
                                object.containerName = message.containerName;
                            if (message.recordLocation != null && message.hasOwnProperty("recordLocation")) {
                                object.recordLocation = $root.google.privacy.dlp.v2.RecordLocation.toObject(message.recordLocation, options);
                                if (options.oneofs)
                                    object.location = "recordLocation";
                            }
                            if (message.imageLocation != null && message.hasOwnProperty("imageLocation")) {
                                object.imageLocation = $root.google.privacy.dlp.v2.ImageLocation.toObject(message.imageLocation, options);
                                if (options.oneofs)
                                    object.location = "imageLocation";
                            }
                            if (message.documentLocation != null && message.hasOwnProperty("documentLocation")) {
                                object.documentLocation = $root.google.privacy.dlp.v2.DocumentLocation.toObject(message.documentLocation, options);
                                if (options.oneofs)
                                    object.location = "documentLocation";
                            }
                            if (message.containerTimestamp != null && message.hasOwnProperty("containerTimestamp"))
                                object.containerTimestamp = $root.google.protobuf.Timestamp.toObject(message.containerTimestamp, options);
                            if (message.containerVersion != null && message.hasOwnProperty("containerVersion"))
                                object.containerVersion = message.containerVersion;
                            if (message.metadataLocation != null && message.hasOwnProperty("metadataLocation")) {
                                object.metadataLocation = $root.google.privacy.dlp.v2.MetadataLocation.toObject(message.metadataLocation, options);
                                if (options.oneofs)
                                    object.location = "metadataLocation";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ContentLocation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ContentLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ContentLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ContentLocation;
                    })();
    
                    v2.MetadataLocation = (function() {
    
                        /**
                         * Properties of a MetadataLocation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IMetadataLocation
                         * @property {google.privacy.dlp.v2.MetadataType|null} [type] MetadataLocation type
                         * @property {google.privacy.dlp.v2.IStorageMetadataLabel|null} [storageLabel] MetadataLocation storageLabel
                         */
    
                        /**
                         * Constructs a new MetadataLocation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a MetadataLocation.
                         * @implements IMetadataLocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IMetadataLocation=} [properties] Properties to set
                         */
                        function MetadataLocation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * MetadataLocation type.
                         * @member {google.privacy.dlp.v2.MetadataType} type
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @instance
                         */
                        MetadataLocation.prototype.type = 0;
    
                        /**
                         * MetadataLocation storageLabel.
                         * @member {google.privacy.dlp.v2.IStorageMetadataLabel|null|undefined} storageLabel
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @instance
                         */
                        MetadataLocation.prototype.storageLabel = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * MetadataLocation label.
                         * @member {"storageLabel"|undefined} label
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @instance
                         */
                        Object.defineProperty(MetadataLocation.prototype, "label", {
                            get: $util.oneOfGetter($oneOfFields = ["storageLabel"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new MetadataLocation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IMetadataLocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.MetadataLocation} MetadataLocation instance
                         */
                        MetadataLocation.create = function create(properties) {
                            return new MetadataLocation(properties);
                        };
    
                        /**
                         * Encodes the specified MetadataLocation message. Does not implicitly {@link google.privacy.dlp.v2.MetadataLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IMetadataLocation} message MetadataLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MetadataLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.storageLabel != null && Object.hasOwnProperty.call(message, "storageLabel"))
                                $root.google.privacy.dlp.v2.StorageMetadataLabel.encode(message.storageLabel, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified MetadataLocation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.MetadataLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IMetadataLocation} message MetadataLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MetadataLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a MetadataLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.MetadataLocation} MetadataLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MetadataLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.MetadataLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 3:
                                    message.storageLabel = $root.google.privacy.dlp.v2.StorageMetadataLabel.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a MetadataLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.MetadataLocation} MetadataLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MetadataLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a MetadataLocation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MetadataLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 2:
                                    break;
                                }
                            if (message.storageLabel != null && message.hasOwnProperty("storageLabel")) {
                                properties.label = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.StorageMetadataLabel.verify(message.storageLabel);
                                    if (error)
                                        return "storageLabel." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a MetadataLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.MetadataLocation} MetadataLocation
                         */
                        MetadataLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.MetadataLocation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.MetadataLocation();
                            switch (object.type) {
                            case "METADATATYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "STORAGE_METADATA":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.storageLabel != null) {
                                if (typeof object.storageLabel !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.MetadataLocation.storageLabel: object expected");
                                message.storageLabel = $root.google.privacy.dlp.v2.StorageMetadataLabel.fromObject(object.storageLabel);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a MetadataLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @static
                         * @param {google.privacy.dlp.v2.MetadataLocation} message MetadataLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MetadataLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.type = options.enums === String ? "METADATATYPE_UNSPECIFIED" : 0;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.privacy.dlp.v2.MetadataType[message.type] : message.type;
                            if (message.storageLabel != null && message.hasOwnProperty("storageLabel")) {
                                object.storageLabel = $root.google.privacy.dlp.v2.StorageMetadataLabel.toObject(message.storageLabel, options);
                                if (options.oneofs)
                                    object.label = "storageLabel";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this MetadataLocation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.MetadataLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MetadataLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return MetadataLocation;
                    })();
    
                    v2.StorageMetadataLabel = (function() {
    
                        /**
                         * Properties of a StorageMetadataLabel.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStorageMetadataLabel
                         * @property {string|null} [key] StorageMetadataLabel key
                         */
    
                        /**
                         * Constructs a new StorageMetadataLabel.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StorageMetadataLabel.
                         * @implements IStorageMetadataLabel
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStorageMetadataLabel=} [properties] Properties to set
                         */
                        function StorageMetadataLabel(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StorageMetadataLabel key.
                         * @member {string} key
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @instance
                         */
                        StorageMetadataLabel.prototype.key = "";
    
                        /**
                         * Creates a new StorageMetadataLabel instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {google.privacy.dlp.v2.IStorageMetadataLabel=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StorageMetadataLabel} StorageMetadataLabel instance
                         */
                        StorageMetadataLabel.create = function create(properties) {
                            return new StorageMetadataLabel(properties);
                        };
    
                        /**
                         * Encodes the specified StorageMetadataLabel message. Does not implicitly {@link google.privacy.dlp.v2.StorageMetadataLabel.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {google.privacy.dlp.v2.IStorageMetadataLabel} message StorageMetadataLabel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StorageMetadataLabel.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StorageMetadataLabel message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StorageMetadataLabel.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {google.privacy.dlp.v2.IStorageMetadataLabel} message StorageMetadataLabel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StorageMetadataLabel.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StorageMetadataLabel message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StorageMetadataLabel} StorageMetadataLabel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StorageMetadataLabel.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StorageMetadataLabel();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StorageMetadataLabel message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StorageMetadataLabel} StorageMetadataLabel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StorageMetadataLabel.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StorageMetadataLabel message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StorageMetadataLabel.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!$util.isString(message.key))
                                    return "key: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a StorageMetadataLabel message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StorageMetadataLabel} StorageMetadataLabel
                         */
                        StorageMetadataLabel.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StorageMetadataLabel)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StorageMetadataLabel();
                            if (object.key != null)
                                message.key = String(object.key);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StorageMetadataLabel message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @static
                         * @param {google.privacy.dlp.v2.StorageMetadataLabel} message StorageMetadataLabel
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StorageMetadataLabel.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.key = "";
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = message.key;
                            return object;
                        };
    
                        /**
                         * Converts this StorageMetadataLabel to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StorageMetadataLabel
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StorageMetadataLabel.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return StorageMetadataLabel;
                    })();
    
                    v2.DocumentLocation = (function() {
    
                        /**
                         * Properties of a DocumentLocation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDocumentLocation
                         * @property {number|Long|null} [fileOffset] DocumentLocation fileOffset
                         */
    
                        /**
                         * Constructs a new DocumentLocation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DocumentLocation.
                         * @implements IDocumentLocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDocumentLocation=} [properties] Properties to set
                         */
                        function DocumentLocation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DocumentLocation fileOffset.
                         * @member {number|Long} fileOffset
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @instance
                         */
                        DocumentLocation.prototype.fileOffset = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new DocumentLocation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IDocumentLocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DocumentLocation} DocumentLocation instance
                         */
                        DocumentLocation.create = function create(properties) {
                            return new DocumentLocation(properties);
                        };
    
                        /**
                         * Encodes the specified DocumentLocation message. Does not implicitly {@link google.privacy.dlp.v2.DocumentLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IDocumentLocation} message DocumentLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DocumentLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.fileOffset != null && Object.hasOwnProperty.call(message, "fileOffset"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.fileOffset);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DocumentLocation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DocumentLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IDocumentLocation} message DocumentLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DocumentLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DocumentLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DocumentLocation} DocumentLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DocumentLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DocumentLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.fileOffset = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DocumentLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DocumentLocation} DocumentLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DocumentLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DocumentLocation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DocumentLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.fileOffset != null && message.hasOwnProperty("fileOffset"))
                                if (!$util.isInteger(message.fileOffset) && !(message.fileOffset && $util.isInteger(message.fileOffset.low) && $util.isInteger(message.fileOffset.high)))
                                    return "fileOffset: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a DocumentLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DocumentLocation} DocumentLocation
                         */
                        DocumentLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DocumentLocation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DocumentLocation();
                            if (object.fileOffset != null)
                                if ($util.Long)
                                    (message.fileOffset = $util.Long.fromValue(object.fileOffset)).unsigned = false;
                                else if (typeof object.fileOffset === "string")
                                    message.fileOffset = parseInt(object.fileOffset, 10);
                                else if (typeof object.fileOffset === "number")
                                    message.fileOffset = object.fileOffset;
                                else if (typeof object.fileOffset === "object")
                                    message.fileOffset = new $util.LongBits(object.fileOffset.low >>> 0, object.fileOffset.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DocumentLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @static
                         * @param {google.privacy.dlp.v2.DocumentLocation} message DocumentLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DocumentLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.fileOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.fileOffset = options.longs === String ? "0" : 0;
                            if (message.fileOffset != null && message.hasOwnProperty("fileOffset"))
                                if (typeof message.fileOffset === "number")
                                    object.fileOffset = options.longs === String ? String(message.fileOffset) : message.fileOffset;
                                else
                                    object.fileOffset = options.longs === String ? $util.Long.prototype.toString.call(message.fileOffset) : options.longs === Number ? new $util.LongBits(message.fileOffset.low >>> 0, message.fileOffset.high >>> 0).toNumber() : message.fileOffset;
                            return object;
                        };
    
                        /**
                         * Converts this DocumentLocation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DocumentLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DocumentLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DocumentLocation;
                    })();
    
                    v2.RecordLocation = (function() {
    
                        /**
                         * Properties of a RecordLocation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRecordLocation
                         * @property {google.privacy.dlp.v2.IRecordKey|null} [recordKey] RecordLocation recordKey
                         * @property {google.privacy.dlp.v2.IFieldId|null} [fieldId] RecordLocation fieldId
                         * @property {google.privacy.dlp.v2.ITableLocation|null} [tableLocation] RecordLocation tableLocation
                         */
    
                        /**
                         * Constructs a new RecordLocation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RecordLocation.
                         * @implements IRecordLocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRecordLocation=} [properties] Properties to set
                         */
                        function RecordLocation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RecordLocation recordKey.
                         * @member {google.privacy.dlp.v2.IRecordKey|null|undefined} recordKey
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @instance
                         */
                        RecordLocation.prototype.recordKey = null;
    
                        /**
                         * RecordLocation fieldId.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} fieldId
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @instance
                         */
                        RecordLocation.prototype.fieldId = null;
    
                        /**
                         * RecordLocation tableLocation.
                         * @member {google.privacy.dlp.v2.ITableLocation|null|undefined} tableLocation
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @instance
                         */
                        RecordLocation.prototype.tableLocation = null;
    
                        /**
                         * Creates a new RecordLocation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordLocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RecordLocation} RecordLocation instance
                         */
                        RecordLocation.create = function create(properties) {
                            return new RecordLocation(properties);
                        };
    
                        /**
                         * Encodes the specified RecordLocation message. Does not implicitly {@link google.privacy.dlp.v2.RecordLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordLocation} message RecordLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.recordKey != null && Object.hasOwnProperty.call(message, "recordKey"))
                                $root.google.privacy.dlp.v2.RecordKey.encode(message.recordKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.fieldId != null && Object.hasOwnProperty.call(message, "fieldId"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.fieldId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.tableLocation != null && Object.hasOwnProperty.call(message, "tableLocation"))
                                $root.google.privacy.dlp.v2.TableLocation.encode(message.tableLocation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RecordLocation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordLocation} message RecordLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RecordLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RecordLocation} RecordLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.recordKey = $root.google.privacy.dlp.v2.RecordKey.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.fieldId = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.tableLocation = $root.google.privacy.dlp.v2.TableLocation.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RecordLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RecordLocation} RecordLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RecordLocation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RecordLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.recordKey != null && message.hasOwnProperty("recordKey")) {
                                var error = $root.google.privacy.dlp.v2.RecordKey.verify(message.recordKey);
                                if (error)
                                    return "recordKey." + error;
                            }
                            if (message.fieldId != null && message.hasOwnProperty("fieldId")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.fieldId);
                                if (error)
                                    return "fieldId." + error;
                            }
                            if (message.tableLocation != null && message.hasOwnProperty("tableLocation")) {
                                var error = $root.google.privacy.dlp.v2.TableLocation.verify(message.tableLocation);
                                if (error)
                                    return "tableLocation." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RecordLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RecordLocation} RecordLocation
                         */
                        RecordLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RecordLocation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RecordLocation();
                            if (object.recordKey != null) {
                                if (typeof object.recordKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordLocation.recordKey: object expected");
                                message.recordKey = $root.google.privacy.dlp.v2.RecordKey.fromObject(object.recordKey);
                            }
                            if (object.fieldId != null) {
                                if (typeof object.fieldId !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordLocation.fieldId: object expected");
                                message.fieldId = $root.google.privacy.dlp.v2.FieldId.fromObject(object.fieldId);
                            }
                            if (object.tableLocation != null) {
                                if (typeof object.tableLocation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordLocation.tableLocation: object expected");
                                message.tableLocation = $root.google.privacy.dlp.v2.TableLocation.fromObject(object.tableLocation);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RecordLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @static
                         * @param {google.privacy.dlp.v2.RecordLocation} message RecordLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RecordLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.recordKey = null;
                                object.fieldId = null;
                                object.tableLocation = null;
                            }
                            if (message.recordKey != null && message.hasOwnProperty("recordKey"))
                                object.recordKey = $root.google.privacy.dlp.v2.RecordKey.toObject(message.recordKey, options);
                            if (message.fieldId != null && message.hasOwnProperty("fieldId"))
                                object.fieldId = $root.google.privacy.dlp.v2.FieldId.toObject(message.fieldId, options);
                            if (message.tableLocation != null && message.hasOwnProperty("tableLocation"))
                                object.tableLocation = $root.google.privacy.dlp.v2.TableLocation.toObject(message.tableLocation, options);
                            return object;
                        };
    
                        /**
                         * Converts this RecordLocation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RecordLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RecordLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RecordLocation;
                    })();
    
                    v2.TableLocation = (function() {
    
                        /**
                         * Properties of a TableLocation.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITableLocation
                         * @property {number|Long|null} [rowIndex] TableLocation rowIndex
                         */
    
                        /**
                         * Constructs a new TableLocation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TableLocation.
                         * @implements ITableLocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITableLocation=} [properties] Properties to set
                         */
                        function TableLocation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TableLocation rowIndex.
                         * @member {number|Long} rowIndex
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @instance
                         */
                        TableLocation.prototype.rowIndex = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new TableLocation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {google.privacy.dlp.v2.ITableLocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TableLocation} TableLocation instance
                         */
                        TableLocation.create = function create(properties) {
                            return new TableLocation(properties);
                        };
    
                        /**
                         * Encodes the specified TableLocation message. Does not implicitly {@link google.privacy.dlp.v2.TableLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {google.privacy.dlp.v2.ITableLocation} message TableLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TableLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.rowIndex != null && Object.hasOwnProperty.call(message, "rowIndex"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rowIndex);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TableLocation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TableLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {google.privacy.dlp.v2.ITableLocation} message TableLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TableLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TableLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TableLocation} TableLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TableLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TableLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.rowIndex = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TableLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TableLocation} TableLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TableLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TableLocation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TableLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.rowIndex != null && message.hasOwnProperty("rowIndex"))
                                if (!$util.isInteger(message.rowIndex) && !(message.rowIndex && $util.isInteger(message.rowIndex.low) && $util.isInteger(message.rowIndex.high)))
                                    return "rowIndex: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a TableLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TableLocation} TableLocation
                         */
                        TableLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TableLocation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TableLocation();
                            if (object.rowIndex != null)
                                if ($util.Long)
                                    (message.rowIndex = $util.Long.fromValue(object.rowIndex)).unsigned = false;
                                else if (typeof object.rowIndex === "string")
                                    message.rowIndex = parseInt(object.rowIndex, 10);
                                else if (typeof object.rowIndex === "number")
                                    message.rowIndex = object.rowIndex;
                                else if (typeof object.rowIndex === "object")
                                    message.rowIndex = new $util.LongBits(object.rowIndex.low >>> 0, object.rowIndex.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TableLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @static
                         * @param {google.privacy.dlp.v2.TableLocation} message TableLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TableLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.rowIndex = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.rowIndex = options.longs === String ? "0" : 0;
                            if (message.rowIndex != null && message.hasOwnProperty("rowIndex"))
                                if (typeof message.rowIndex === "number")
                                    object.rowIndex = options.longs === String ? String(message.rowIndex) : message.rowIndex;
                                else
                                    object.rowIndex = options.longs === String ? $util.Long.prototype.toString.call(message.rowIndex) : options.longs === Number ? new $util.LongBits(message.rowIndex.low >>> 0, message.rowIndex.high >>> 0).toNumber() : message.rowIndex;
                            return object;
                        };
    
                        /**
                         * Converts this TableLocation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TableLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TableLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return TableLocation;
                    })();
    
                    v2.Container = (function() {
    
                        /**
                         * Properties of a Container.
                         * @memberof google.privacy.dlp.v2
                         * @interface IContainer
                         * @property {string|null} [type] Container type
                         * @property {string|null} [projectId] Container projectId
                         * @property {string|null} [fullPath] Container fullPath
                         * @property {string|null} [rootPath] Container rootPath
                         * @property {string|null} [relativePath] Container relativePath
                         * @property {google.protobuf.ITimestamp|null} [updateTime] Container updateTime
                         * @property {string|null} [version] Container version
                         */
    
                        /**
                         * Constructs a new Container.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Container.
                         * @implements IContainer
                         * @constructor
                         * @param {google.privacy.dlp.v2.IContainer=} [properties] Properties to set
                         */
                        function Container(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Container type.
                         * @member {string} type
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.type = "";
    
                        /**
                         * Container projectId.
                         * @member {string} projectId
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.projectId = "";
    
                        /**
                         * Container fullPath.
                         * @member {string} fullPath
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.fullPath = "";
    
                        /**
                         * Container rootPath.
                         * @member {string} rootPath
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.rootPath = "";
    
                        /**
                         * Container relativePath.
                         * @member {string} relativePath
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.relativePath = "";
    
                        /**
                         * Container updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.updateTime = null;
    
                        /**
                         * Container version.
                         * @member {string} version
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         */
                        Container.prototype.version = "";
    
                        /**
                         * Creates a new Container instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {google.privacy.dlp.v2.IContainer=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Container} Container instance
                         */
                        Container.create = function create(properties) {
                            return new Container(properties);
                        };
    
                        /**
                         * Encodes the specified Container message. Does not implicitly {@link google.privacy.dlp.v2.Container.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {google.privacy.dlp.v2.IContainer} message Container message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Container.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                            if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.projectId);
                            if (message.fullPath != null && Object.hasOwnProperty.call(message, "fullPath"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.fullPath);
                            if (message.rootPath != null && Object.hasOwnProperty.call(message, "rootPath"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.rootPath);
                            if (message.relativePath != null && Object.hasOwnProperty.call(message, "relativePath"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.relativePath);
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Container message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Container.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {google.privacy.dlp.v2.IContainer} message Container message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Container.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Container message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Container} Container
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Container.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Container();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.string();
                                    break;
                                case 2:
                                    message.projectId = reader.string();
                                    break;
                                case 3:
                                    message.fullPath = reader.string();
                                    break;
                                case 4:
                                    message.rootPath = reader.string();
                                    break;
                                case 5:
                                    message.relativePath = reader.string();
                                    break;
                                case 6:
                                    message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.version = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Container message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Container} Container
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Container.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Container message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Container.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.projectId != null && message.hasOwnProperty("projectId"))
                                if (!$util.isString(message.projectId))
                                    return "projectId: string expected";
                            if (message.fullPath != null && message.hasOwnProperty("fullPath"))
                                if (!$util.isString(message.fullPath))
                                    return "fullPath: string expected";
                            if (message.rootPath != null && message.hasOwnProperty("rootPath"))
                                if (!$util.isString(message.rootPath))
                                    return "rootPath: string expected";
                            if (message.relativePath != null && message.hasOwnProperty("relativePath"))
                                if (!$util.isString(message.relativePath))
                                    return "relativePath: string expected";
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Container message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Container} Container
                         */
                        Container.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Container)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Container();
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.projectId != null)
                                message.projectId = String(object.projectId);
                            if (object.fullPath != null)
                                message.fullPath = String(object.fullPath);
                            if (object.rootPath != null)
                                message.rootPath = String(object.rootPath);
                            if (object.relativePath != null)
                                message.relativePath = String(object.relativePath);
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Container.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Container message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Container
                         * @static
                         * @param {google.privacy.dlp.v2.Container} message Container
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Container.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = "";
                                object.projectId = "";
                                object.fullPath = "";
                                object.rootPath = "";
                                object.relativePath = "";
                                object.updateTime = null;
                                object.version = "";
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.projectId != null && message.hasOwnProperty("projectId"))
                                object.projectId = message.projectId;
                            if (message.fullPath != null && message.hasOwnProperty("fullPath"))
                                object.fullPath = message.fullPath;
                            if (message.rootPath != null && message.hasOwnProperty("rootPath"))
                                object.rootPath = message.rootPath;
                            if (message.relativePath != null && message.hasOwnProperty("relativePath"))
                                object.relativePath = message.relativePath;
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this Container to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Container
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Container.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Container;
                    })();
    
                    v2.Range = (function() {
    
                        /**
                         * Properties of a Range.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRange
                         * @property {number|Long|null} [start] Range start
                         * @property {number|Long|null} [end] Range end
                         */
    
                        /**
                         * Constructs a new Range.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Range.
                         * @implements IRange
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRange=} [properties] Properties to set
                         */
                        function Range(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Range start.
                         * @member {number|Long} start
                         * @memberof google.privacy.dlp.v2.Range
                         * @instance
                         */
                        Range.prototype.start = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Range end.
                         * @member {number|Long} end
                         * @memberof google.privacy.dlp.v2.Range
                         * @instance
                         */
                        Range.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new Range instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {google.privacy.dlp.v2.IRange=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Range} Range instance
                         */
                        Range.create = function create(properties) {
                            return new Range(properties);
                        };
    
                        /**
                         * Encodes the specified Range message. Does not implicitly {@link google.privacy.dlp.v2.Range.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {google.privacy.dlp.v2.IRange} message Range message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Range.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.start);
                            if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Range message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Range.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {google.privacy.dlp.v2.IRange} message Range message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Range.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Range message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Range} Range
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Range.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Range();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.start = reader.int64();
                                    break;
                                case 2:
                                    message.end = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Range message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Range} Range
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Range.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Range message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Range.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))
                                    return "start: integer|Long expected";
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))
                                    return "end: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a Range message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Range} Range
                         */
                        Range.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Range)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Range();
                            if (object.start != null)
                                if ($util.Long)
                                    (message.start = $util.Long.fromValue(object.start)).unsigned = false;
                                else if (typeof object.start === "string")
                                    message.start = parseInt(object.start, 10);
                                else if (typeof object.start === "number")
                                    message.start = object.start;
                                else if (typeof object.start === "object")
                                    message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber();
                            if (object.end != null)
                                if ($util.Long)
                                    (message.end = $util.Long.fromValue(object.end)).unsigned = false;
                                else if (typeof object.end === "string")
                                    message.end = parseInt(object.end, 10);
                                else if (typeof object.end === "number")
                                    message.end = object.end;
                                else if (typeof object.end === "object")
                                    message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Range message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Range
                         * @static
                         * @param {google.privacy.dlp.v2.Range} message Range
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Range.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.start = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.start = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.end = options.longs === String ? "0" : 0;
                            }
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (typeof message.start === "number")
                                    object.start = options.longs === String ? String(message.start) : message.start;
                                else
                                    object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber() : message.start;
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (typeof message.end === "number")
                                    object.end = options.longs === String ? String(message.end) : message.end;
                                else
                                    object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;
                            return object;
                        };
    
                        /**
                         * Converts this Range to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Range
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Range.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Range;
                    })();
    
                    v2.ImageLocation = (function() {
    
                        /**
                         * Properties of an ImageLocation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IImageLocation
                         * @property {Array.<google.privacy.dlp.v2.IBoundingBox>|null} [boundingBoxes] ImageLocation boundingBoxes
                         */
    
                        /**
                         * Constructs a new ImageLocation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an ImageLocation.
                         * @implements IImageLocation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IImageLocation=} [properties] Properties to set
                         */
                        function ImageLocation(properties) {
                            this.boundingBoxes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ImageLocation boundingBoxes.
                         * @member {Array.<google.privacy.dlp.v2.IBoundingBox>} boundingBoxes
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @instance
                         */
                        ImageLocation.prototype.boundingBoxes = $util.emptyArray;
    
                        /**
                         * Creates a new ImageLocation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IImageLocation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ImageLocation} ImageLocation instance
                         */
                        ImageLocation.create = function create(properties) {
                            return new ImageLocation(properties);
                        };
    
                        /**
                         * Encodes the specified ImageLocation message. Does not implicitly {@link google.privacy.dlp.v2.ImageLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IImageLocation} message ImageLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.boundingBoxes != null && message.boundingBoxes.length)
                                for (var i = 0; i < message.boundingBoxes.length; ++i)
                                    $root.google.privacy.dlp.v2.BoundingBox.encode(message.boundingBoxes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ImageLocation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ImageLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {google.privacy.dlp.v2.IImageLocation} message ImageLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ImageLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ImageLocation} ImageLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ImageLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.boundingBoxes && message.boundingBoxes.length))
                                        message.boundingBoxes = [];
                                    message.boundingBoxes.push($root.google.privacy.dlp.v2.BoundingBox.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ImageLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ImageLocation} ImageLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ImageLocation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ImageLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.boundingBoxes != null && message.hasOwnProperty("boundingBoxes")) {
                                if (!Array.isArray(message.boundingBoxes))
                                    return "boundingBoxes: array expected";
                                for (var i = 0; i < message.boundingBoxes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.BoundingBox.verify(message.boundingBoxes[i]);
                                    if (error)
                                        return "boundingBoxes." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ImageLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ImageLocation} ImageLocation
                         */
                        ImageLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ImageLocation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ImageLocation();
                            if (object.boundingBoxes) {
                                if (!Array.isArray(object.boundingBoxes))
                                    throw TypeError(".google.privacy.dlp.v2.ImageLocation.boundingBoxes: array expected");
                                message.boundingBoxes = [];
                                for (var i = 0; i < object.boundingBoxes.length; ++i) {
                                    if (typeof object.boundingBoxes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ImageLocation.boundingBoxes: object expected");
                                    message.boundingBoxes[i] = $root.google.privacy.dlp.v2.BoundingBox.fromObject(object.boundingBoxes[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ImageLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @static
                         * @param {google.privacy.dlp.v2.ImageLocation} message ImageLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ImageLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.boundingBoxes = [];
                            if (message.boundingBoxes && message.boundingBoxes.length) {
                                object.boundingBoxes = [];
                                for (var j = 0; j < message.boundingBoxes.length; ++j)
                                    object.boundingBoxes[j] = $root.google.privacy.dlp.v2.BoundingBox.toObject(message.boundingBoxes[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ImageLocation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ImageLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ImageLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ImageLocation;
                    })();
    
                    v2.BoundingBox = (function() {
    
                        /**
                         * Properties of a BoundingBox.
                         * @memberof google.privacy.dlp.v2
                         * @interface IBoundingBox
                         * @property {number|null} [top] BoundingBox top
                         * @property {number|null} [left] BoundingBox left
                         * @property {number|null} [width] BoundingBox width
                         * @property {number|null} [height] BoundingBox height
                         */
    
                        /**
                         * Constructs a new BoundingBox.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a BoundingBox.
                         * @implements IBoundingBox
                         * @constructor
                         * @param {google.privacy.dlp.v2.IBoundingBox=} [properties] Properties to set
                         */
                        function BoundingBox(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BoundingBox top.
                         * @member {number} top
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @instance
                         */
                        BoundingBox.prototype.top = 0;
    
                        /**
                         * BoundingBox left.
                         * @member {number} left
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @instance
                         */
                        BoundingBox.prototype.left = 0;
    
                        /**
                         * BoundingBox width.
                         * @member {number} width
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @instance
                         */
                        BoundingBox.prototype.width = 0;
    
                        /**
                         * BoundingBox height.
                         * @member {number} height
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @instance
                         */
                        BoundingBox.prototype.height = 0;
    
                        /**
                         * Creates a new BoundingBox instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {google.privacy.dlp.v2.IBoundingBox=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.BoundingBox} BoundingBox instance
                         */
                        BoundingBox.create = function create(properties) {
                            return new BoundingBox(properties);
                        };
    
                        /**
                         * Encodes the specified BoundingBox message. Does not implicitly {@link google.privacy.dlp.v2.BoundingBox.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {google.privacy.dlp.v2.IBoundingBox} message BoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BoundingBox.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.top != null && Object.hasOwnProperty.call(message, "top"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.top);
                            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.left);
                            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.width);
                            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.height);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BoundingBox message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BoundingBox.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {google.privacy.dlp.v2.IBoundingBox} message BoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BoundingBox.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BoundingBox message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.BoundingBox} BoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BoundingBox.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BoundingBox();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.top = reader.int32();
                                    break;
                                case 2:
                                    message.left = reader.int32();
                                    break;
                                case 3:
                                    message.width = reader.int32();
                                    break;
                                case 4:
                                    message.height = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BoundingBox message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.BoundingBox} BoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BoundingBox.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BoundingBox message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BoundingBox.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.top != null && message.hasOwnProperty("top"))
                                if (!$util.isInteger(message.top))
                                    return "top: integer expected";
                            if (message.left != null && message.hasOwnProperty("left"))
                                if (!$util.isInteger(message.left))
                                    return "left: integer expected";
                            if (message.width != null && message.hasOwnProperty("width"))
                                if (!$util.isInteger(message.width))
                                    return "width: integer expected";
                            if (message.height != null && message.hasOwnProperty("height"))
                                if (!$util.isInteger(message.height))
                                    return "height: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a BoundingBox message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.BoundingBox} BoundingBox
                         */
                        BoundingBox.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.BoundingBox)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.BoundingBox();
                            if (object.top != null)
                                message.top = object.top | 0;
                            if (object.left != null)
                                message.left = object.left | 0;
                            if (object.width != null)
                                message.width = object.width | 0;
                            if (object.height != null)
                                message.height = object.height | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BoundingBox message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @static
                         * @param {google.privacy.dlp.v2.BoundingBox} message BoundingBox
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BoundingBox.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.top = 0;
                                object.left = 0;
                                object.width = 0;
                                object.height = 0;
                            }
                            if (message.top != null && message.hasOwnProperty("top"))
                                object.top = message.top;
                            if (message.left != null && message.hasOwnProperty("left"))
                                object.left = message.left;
                            if (message.width != null && message.hasOwnProperty("width"))
                                object.width = message.width;
                            if (message.height != null && message.hasOwnProperty("height"))
                                object.height = message.height;
                            return object;
                        };
    
                        /**
                         * Converts this BoundingBox to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.BoundingBox
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BoundingBox.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return BoundingBox;
                    })();
    
                    v2.RedactImageRequest = (function() {
    
                        /**
                         * Properties of a RedactImageRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRedactImageRequest
                         * @property {string|null} [parent] RedactImageRequest parent
                         * @property {string|null} [locationId] RedactImageRequest locationId
                         * @property {google.privacy.dlp.v2.IInspectConfig|null} [inspectConfig] RedactImageRequest inspectConfig
                         * @property {Array.<google.privacy.dlp.v2.RedactImageRequest.IImageRedactionConfig>|null} [imageRedactionConfigs] RedactImageRequest imageRedactionConfigs
                         * @property {boolean|null} [includeFindings] RedactImageRequest includeFindings
                         * @property {google.privacy.dlp.v2.IByteContentItem|null} [byteItem] RedactImageRequest byteItem
                         */
    
                        /**
                         * Constructs a new RedactImageRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RedactImageRequest.
                         * @implements IRedactImageRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRedactImageRequest=} [properties] Properties to set
                         */
                        function RedactImageRequest(properties) {
                            this.imageRedactionConfigs = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RedactImageRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         */
                        RedactImageRequest.prototype.parent = "";
    
                        /**
                         * RedactImageRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         */
                        RedactImageRequest.prototype.locationId = "";
    
                        /**
                         * RedactImageRequest inspectConfig.
                         * @member {google.privacy.dlp.v2.IInspectConfig|null|undefined} inspectConfig
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         */
                        RedactImageRequest.prototype.inspectConfig = null;
    
                        /**
                         * RedactImageRequest imageRedactionConfigs.
                         * @member {Array.<google.privacy.dlp.v2.RedactImageRequest.IImageRedactionConfig>} imageRedactionConfigs
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         */
                        RedactImageRequest.prototype.imageRedactionConfigs = $util.emptyArray;
    
                        /**
                         * RedactImageRequest includeFindings.
                         * @member {boolean} includeFindings
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         */
                        RedactImageRequest.prototype.includeFindings = false;
    
                        /**
                         * RedactImageRequest byteItem.
                         * @member {google.privacy.dlp.v2.IByteContentItem|null|undefined} byteItem
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         */
                        RedactImageRequest.prototype.byteItem = null;
    
                        /**
                         * Creates a new RedactImageRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactImageRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RedactImageRequest} RedactImageRequest instance
                         */
                        RedactImageRequest.create = function create(properties) {
                            return new RedactImageRequest(properties);
                        };
    
                        /**
                         * Encodes the specified RedactImageRequest message. Does not implicitly {@link google.privacy.dlp.v2.RedactImageRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactImageRequest} message RedactImageRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RedactImageRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.inspectConfig != null && Object.hasOwnProperty.call(message, "inspectConfig"))
                                $root.google.privacy.dlp.v2.InspectConfig.encode(message.inspectConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.imageRedactionConfigs != null && message.imageRedactionConfigs.length)
                                for (var i = 0; i < message.imageRedactionConfigs.length; ++i)
                                    $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.encode(message.imageRedactionConfigs[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.includeFindings != null && Object.hasOwnProperty.call(message, "includeFindings"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.includeFindings);
                            if (message.byteItem != null && Object.hasOwnProperty.call(message, "byteItem"))
                                $root.google.privacy.dlp.v2.ByteContentItem.encode(message.byteItem, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RedactImageRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RedactImageRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactImageRequest} message RedactImageRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RedactImageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RedactImageRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RedactImageRequest} RedactImageRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RedactImageRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RedactImageRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 8:
                                    message.locationId = reader.string();
                                    break;
                                case 2:
                                    message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.imageRedactionConfigs && message.imageRedactionConfigs.length))
                                        message.imageRedactionConfigs = [];
                                    message.imageRedactionConfigs.push($root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.decode(reader, reader.uint32()));
                                    break;
                                case 6:
                                    message.includeFindings = reader.bool();
                                    break;
                                case 7:
                                    message.byteItem = $root.google.privacy.dlp.v2.ByteContentItem.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RedactImageRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RedactImageRequest} RedactImageRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RedactImageRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RedactImageRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RedactImageRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.verify(message.inspectConfig);
                                if (error)
                                    return "inspectConfig." + error;
                            }
                            if (message.imageRedactionConfigs != null && message.hasOwnProperty("imageRedactionConfigs")) {
                                if (!Array.isArray(message.imageRedactionConfigs))
                                    return "imageRedactionConfigs: array expected";
                                for (var i = 0; i < message.imageRedactionConfigs.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.verify(message.imageRedactionConfigs[i]);
                                    if (error)
                                        return "imageRedactionConfigs." + error;
                                }
                            }
                            if (message.includeFindings != null && message.hasOwnProperty("includeFindings"))
                                if (typeof message.includeFindings !== "boolean")
                                    return "includeFindings: boolean expected";
                            if (message.byteItem != null && message.hasOwnProperty("byteItem")) {
                                var error = $root.google.privacy.dlp.v2.ByteContentItem.verify(message.byteItem);
                                if (error)
                                    return "byteItem." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RedactImageRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RedactImageRequest} RedactImageRequest
                         */
                        RedactImageRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RedactImageRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RedactImageRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            if (object.inspectConfig != null) {
                                if (typeof object.inspectConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RedactImageRequest.inspectConfig: object expected");
                                message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.fromObject(object.inspectConfig);
                            }
                            if (object.imageRedactionConfigs) {
                                if (!Array.isArray(object.imageRedactionConfigs))
                                    throw TypeError(".google.privacy.dlp.v2.RedactImageRequest.imageRedactionConfigs: array expected");
                                message.imageRedactionConfigs = [];
                                for (var i = 0; i < object.imageRedactionConfigs.length; ++i) {
                                    if (typeof object.imageRedactionConfigs[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RedactImageRequest.imageRedactionConfigs: object expected");
                                    message.imageRedactionConfigs[i] = $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.fromObject(object.imageRedactionConfigs[i]);
                                }
                            }
                            if (object.includeFindings != null)
                                message.includeFindings = Boolean(object.includeFindings);
                            if (object.byteItem != null) {
                                if (typeof object.byteItem !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RedactImageRequest.byteItem: object expected");
                                message.byteItem = $root.google.privacy.dlp.v2.ByteContentItem.fromObject(object.byteItem);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RedactImageRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @static
                         * @param {google.privacy.dlp.v2.RedactImageRequest} message RedactImageRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RedactImageRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.imageRedactionConfigs = [];
                            if (options.defaults) {
                                object.parent = "";
                                object.inspectConfig = null;
                                object.includeFindings = false;
                                object.byteItem = null;
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig"))
                                object.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.toObject(message.inspectConfig, options);
                            if (message.imageRedactionConfigs && message.imageRedactionConfigs.length) {
                                object.imageRedactionConfigs = [];
                                for (var j = 0; j < message.imageRedactionConfigs.length; ++j)
                                    object.imageRedactionConfigs[j] = $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.toObject(message.imageRedactionConfigs[j], options);
                            }
                            if (message.includeFindings != null && message.hasOwnProperty("includeFindings"))
                                object.includeFindings = message.includeFindings;
                            if (message.byteItem != null && message.hasOwnProperty("byteItem"))
                                object.byteItem = $root.google.privacy.dlp.v2.ByteContentItem.toObject(message.byteItem, options);
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this RedactImageRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RedactImageRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RedactImageRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        RedactImageRequest.ImageRedactionConfig = (function() {
    
                            /**
                             * Properties of an ImageRedactionConfig.
                             * @memberof google.privacy.dlp.v2.RedactImageRequest
                             * @interface IImageRedactionConfig
                             * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] ImageRedactionConfig infoType
                             * @property {boolean|null} [redactAllText] ImageRedactionConfig redactAllText
                             * @property {google.privacy.dlp.v2.IColor|null} [redactionColor] ImageRedactionConfig redactionColor
                             */
    
                            /**
                             * Constructs a new ImageRedactionConfig.
                             * @memberof google.privacy.dlp.v2.RedactImageRequest
                             * @classdesc Represents an ImageRedactionConfig.
                             * @implements IImageRedactionConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.RedactImageRequest.IImageRedactionConfig=} [properties] Properties to set
                             */
                            function ImageRedactionConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ImageRedactionConfig infoType.
                             * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @instance
                             */
                            ImageRedactionConfig.prototype.infoType = null;
    
                            /**
                             * ImageRedactionConfig redactAllText.
                             * @member {boolean} redactAllText
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @instance
                             */
                            ImageRedactionConfig.prototype.redactAllText = false;
    
                            /**
                             * ImageRedactionConfig redactionColor.
                             * @member {google.privacy.dlp.v2.IColor|null|undefined} redactionColor
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @instance
                             */
                            ImageRedactionConfig.prototype.redactionColor = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * ImageRedactionConfig target.
                             * @member {"infoType"|"redactAllText"|undefined} target
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @instance
                             */
                            Object.defineProperty(ImageRedactionConfig.prototype, "target", {
                                get: $util.oneOfGetter($oneOfFields = ["infoType", "redactAllText"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new ImageRedactionConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {google.privacy.dlp.v2.RedactImageRequest.IImageRedactionConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig} ImageRedactionConfig instance
                             */
                            ImageRedactionConfig.create = function create(properties) {
                                return new ImageRedactionConfig(properties);
                            };
    
                            /**
                             * Encodes the specified ImageRedactionConfig message. Does not implicitly {@link google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {google.privacy.dlp.v2.RedactImageRequest.IImageRedactionConfig} message ImageRedactionConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ImageRedactionConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                    $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.redactAllText != null && Object.hasOwnProperty.call(message, "redactAllText"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.redactAllText);
                                if (message.redactionColor != null && Object.hasOwnProperty.call(message, "redactionColor"))
                                    $root.google.privacy.dlp.v2.Color.encode(message.redactionColor, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ImageRedactionConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {google.privacy.dlp.v2.RedactImageRequest.IImageRedactionConfig} message ImageRedactionConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ImageRedactionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ImageRedactionConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig} ImageRedactionConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ImageRedactionConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.redactAllText = reader.bool();
                                        break;
                                    case 3:
                                        message.redactionColor = $root.google.privacy.dlp.v2.Color.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ImageRedactionConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig} ImageRedactionConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ImageRedactionConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ImageRedactionConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ImageRedactionConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                    properties.target = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                        if (error)
                                            return "infoType." + error;
                                    }
                                }
                                if (message.redactAllText != null && message.hasOwnProperty("redactAllText")) {
                                    if (properties.target === 1)
                                        return "target: multiple values";
                                    properties.target = 1;
                                    if (typeof message.redactAllText !== "boolean")
                                        return "redactAllText: boolean expected";
                                }
                                if (message.redactionColor != null && message.hasOwnProperty("redactionColor")) {
                                    var error = $root.google.privacy.dlp.v2.Color.verify(message.redactionColor);
                                    if (error)
                                        return "redactionColor." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an ImageRedactionConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig} ImageRedactionConfig
                             */
                            ImageRedactionConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig();
                                if (object.infoType != null) {
                                    if (typeof object.infoType !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.infoType: object expected");
                                    message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                                }
                                if (object.redactAllText != null)
                                    message.redactAllText = Boolean(object.redactAllText);
                                if (object.redactionColor != null) {
                                    if (typeof object.redactionColor !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redactionColor: object expected");
                                    message.redactionColor = $root.google.privacy.dlp.v2.Color.fromObject(object.redactionColor);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ImageRedactionConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @static
                             * @param {google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig} message ImageRedactionConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ImageRedactionConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.redactionColor = null;
                                if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                    object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                                    if (options.oneofs)
                                        object.target = "infoType";
                                }
                                if (message.redactAllText != null && message.hasOwnProperty("redactAllText")) {
                                    object.redactAllText = message.redactAllText;
                                    if (options.oneofs)
                                        object.target = "redactAllText";
                                }
                                if (message.redactionColor != null && message.hasOwnProperty("redactionColor"))
                                    object.redactionColor = $root.google.privacy.dlp.v2.Color.toObject(message.redactionColor, options);
                                return object;
                            };
    
                            /**
                             * Converts this ImageRedactionConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ImageRedactionConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ImageRedactionConfig;
                        })();
    
                        return RedactImageRequest;
                    })();
    
                    v2.Color = (function() {
    
                        /**
                         * Properties of a Color.
                         * @memberof google.privacy.dlp.v2
                         * @interface IColor
                         * @property {number|null} [red] Color red
                         * @property {number|null} [green] Color green
                         * @property {number|null} [blue] Color blue
                         */
    
                        /**
                         * Constructs a new Color.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Color.
                         * @implements IColor
                         * @constructor
                         * @param {google.privacy.dlp.v2.IColor=} [properties] Properties to set
                         */
                        function Color(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Color red.
                         * @member {number} red
                         * @memberof google.privacy.dlp.v2.Color
                         * @instance
                         */
                        Color.prototype.red = 0;
    
                        /**
                         * Color green.
                         * @member {number} green
                         * @memberof google.privacy.dlp.v2.Color
                         * @instance
                         */
                        Color.prototype.green = 0;
    
                        /**
                         * Color blue.
                         * @member {number} blue
                         * @memberof google.privacy.dlp.v2.Color
                         * @instance
                         */
                        Color.prototype.blue = 0;
    
                        /**
                         * Creates a new Color instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {google.privacy.dlp.v2.IColor=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Color} Color instance
                         */
                        Color.create = function create(properties) {
                            return new Color(properties);
                        };
    
                        /**
                         * Encodes the specified Color message. Does not implicitly {@link google.privacy.dlp.v2.Color.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {google.privacy.dlp.v2.IColor} message Color message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Color.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.red != null && Object.hasOwnProperty.call(message, "red"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.red);
                            if (message.green != null && Object.hasOwnProperty.call(message, "green"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.green);
                            if (message.blue != null && Object.hasOwnProperty.call(message, "blue"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.blue);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Color message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Color.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {google.privacy.dlp.v2.IColor} message Color message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Color.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Color message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Color} Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Color.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Color();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.red = reader.float();
                                    break;
                                case 2:
                                    message.green = reader.float();
                                    break;
                                case 3:
                                    message.blue = reader.float();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Color message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Color} Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Color.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Color message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Color.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.red != null && message.hasOwnProperty("red"))
                                if (typeof message.red !== "number")
                                    return "red: number expected";
                            if (message.green != null && message.hasOwnProperty("green"))
                                if (typeof message.green !== "number")
                                    return "green: number expected";
                            if (message.blue != null && message.hasOwnProperty("blue"))
                                if (typeof message.blue !== "number")
                                    return "blue: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a Color message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Color} Color
                         */
                        Color.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Color)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Color();
                            if (object.red != null)
                                message.red = Number(object.red);
                            if (object.green != null)
                                message.green = Number(object.green);
                            if (object.blue != null)
                                message.blue = Number(object.blue);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Color message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Color
                         * @static
                         * @param {google.privacy.dlp.v2.Color} message Color
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Color.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.red = 0;
                                object.green = 0;
                                object.blue = 0;
                            }
                            if (message.red != null && message.hasOwnProperty("red"))
                                object.red = options.json && !isFinite(message.red) ? String(message.red) : message.red;
                            if (message.green != null && message.hasOwnProperty("green"))
                                object.green = options.json && !isFinite(message.green) ? String(message.green) : message.green;
                            if (message.blue != null && message.hasOwnProperty("blue"))
                                object.blue = options.json && !isFinite(message.blue) ? String(message.blue) : message.blue;
                            return object;
                        };
    
                        /**
                         * Converts this Color to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Color
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Color.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Color;
                    })();
    
                    v2.RedactImageResponse = (function() {
    
                        /**
                         * Properties of a RedactImageResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRedactImageResponse
                         * @property {Uint8Array|null} [redactedImage] RedactImageResponse redactedImage
                         * @property {string|null} [extractedText] RedactImageResponse extractedText
                         * @property {google.privacy.dlp.v2.IInspectResult|null} [inspectResult] RedactImageResponse inspectResult
                         */
    
                        /**
                         * Constructs a new RedactImageResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RedactImageResponse.
                         * @implements IRedactImageResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRedactImageResponse=} [properties] Properties to set
                         */
                        function RedactImageResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RedactImageResponse redactedImage.
                         * @member {Uint8Array} redactedImage
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @instance
                         */
                        RedactImageResponse.prototype.redactedImage = $util.newBuffer([]);
    
                        /**
                         * RedactImageResponse extractedText.
                         * @member {string} extractedText
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @instance
                         */
                        RedactImageResponse.prototype.extractedText = "";
    
                        /**
                         * RedactImageResponse inspectResult.
                         * @member {google.privacy.dlp.v2.IInspectResult|null|undefined} inspectResult
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @instance
                         */
                        RedactImageResponse.prototype.inspectResult = null;
    
                        /**
                         * Creates a new RedactImageResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactImageResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RedactImageResponse} RedactImageResponse instance
                         */
                        RedactImageResponse.create = function create(properties) {
                            return new RedactImageResponse(properties);
                        };
    
                        /**
                         * Encodes the specified RedactImageResponse message. Does not implicitly {@link google.privacy.dlp.v2.RedactImageResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactImageResponse} message RedactImageResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RedactImageResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.redactedImage != null && Object.hasOwnProperty.call(message, "redactedImage"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.redactedImage);
                            if (message.extractedText != null && Object.hasOwnProperty.call(message, "extractedText"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.extractedText);
                            if (message.inspectResult != null && Object.hasOwnProperty.call(message, "inspectResult"))
                                $root.google.privacy.dlp.v2.InspectResult.encode(message.inspectResult, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RedactImageResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RedactImageResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactImageResponse} message RedactImageResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RedactImageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RedactImageResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RedactImageResponse} RedactImageResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RedactImageResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RedactImageResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.redactedImage = reader.bytes();
                                    break;
                                case 2:
                                    message.extractedText = reader.string();
                                    break;
                                case 3:
                                    message.inspectResult = $root.google.privacy.dlp.v2.InspectResult.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RedactImageResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RedactImageResponse} RedactImageResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RedactImageResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RedactImageResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RedactImageResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.redactedImage != null && message.hasOwnProperty("redactedImage"))
                                if (!(message.redactedImage && typeof message.redactedImage.length === "number" || $util.isString(message.redactedImage)))
                                    return "redactedImage: buffer expected";
                            if (message.extractedText != null && message.hasOwnProperty("extractedText"))
                                if (!$util.isString(message.extractedText))
                                    return "extractedText: string expected";
                            if (message.inspectResult != null && message.hasOwnProperty("inspectResult")) {
                                var error = $root.google.privacy.dlp.v2.InspectResult.verify(message.inspectResult);
                                if (error)
                                    return "inspectResult." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RedactImageResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RedactImageResponse} RedactImageResponse
                         */
                        RedactImageResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RedactImageResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RedactImageResponse();
                            if (object.redactedImage != null)
                                if (typeof object.redactedImage === "string")
                                    $util.base64.decode(object.redactedImage, message.redactedImage = $util.newBuffer($util.base64.length(object.redactedImage)), 0);
                                else if (object.redactedImage.length)
                                    message.redactedImage = object.redactedImage;
                            if (object.extractedText != null)
                                message.extractedText = String(object.extractedText);
                            if (object.inspectResult != null) {
                                if (typeof object.inspectResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RedactImageResponse.inspectResult: object expected");
                                message.inspectResult = $root.google.privacy.dlp.v2.InspectResult.fromObject(object.inspectResult);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RedactImageResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @static
                         * @param {google.privacy.dlp.v2.RedactImageResponse} message RedactImageResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RedactImageResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.redactedImage = "";
                                else {
                                    object.redactedImage = [];
                                    if (options.bytes !== Array)
                                        object.redactedImage = $util.newBuffer(object.redactedImage);
                                }
                                object.extractedText = "";
                                object.inspectResult = null;
                            }
                            if (message.redactedImage != null && message.hasOwnProperty("redactedImage"))
                                object.redactedImage = options.bytes === String ? $util.base64.encode(message.redactedImage, 0, message.redactedImage.length) : options.bytes === Array ? Array.prototype.slice.call(message.redactedImage) : message.redactedImage;
                            if (message.extractedText != null && message.hasOwnProperty("extractedText"))
                                object.extractedText = message.extractedText;
                            if (message.inspectResult != null && message.hasOwnProperty("inspectResult"))
                                object.inspectResult = $root.google.privacy.dlp.v2.InspectResult.toObject(message.inspectResult, options);
                            return object;
                        };
    
                        /**
                         * Converts this RedactImageResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RedactImageResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RedactImageResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RedactImageResponse;
                    })();
    
                    v2.DeidentifyContentRequest = (function() {
    
                        /**
                         * Properties of a DeidentifyContentRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeidentifyContentRequest
                         * @property {string|null} [parent] DeidentifyContentRequest parent
                         * @property {google.privacy.dlp.v2.IDeidentifyConfig|null} [deidentifyConfig] DeidentifyContentRequest deidentifyConfig
                         * @property {google.privacy.dlp.v2.IInspectConfig|null} [inspectConfig] DeidentifyContentRequest inspectConfig
                         * @property {google.privacy.dlp.v2.IContentItem|null} [item] DeidentifyContentRequest item
                         * @property {string|null} [inspectTemplateName] DeidentifyContentRequest inspectTemplateName
                         * @property {string|null} [deidentifyTemplateName] DeidentifyContentRequest deidentifyTemplateName
                         * @property {string|null} [locationId] DeidentifyContentRequest locationId
                         */
    
                        /**
                         * Constructs a new DeidentifyContentRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeidentifyContentRequest.
                         * @implements IDeidentifyContentRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeidentifyContentRequest=} [properties] Properties to set
                         */
                        function DeidentifyContentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeidentifyContentRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.parent = "";
    
                        /**
                         * DeidentifyContentRequest deidentifyConfig.
                         * @member {google.privacy.dlp.v2.IDeidentifyConfig|null|undefined} deidentifyConfig
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.deidentifyConfig = null;
    
                        /**
                         * DeidentifyContentRequest inspectConfig.
                         * @member {google.privacy.dlp.v2.IInspectConfig|null|undefined} inspectConfig
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.inspectConfig = null;
    
                        /**
                         * DeidentifyContentRequest item.
                         * @member {google.privacy.dlp.v2.IContentItem|null|undefined} item
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.item = null;
    
                        /**
                         * DeidentifyContentRequest inspectTemplateName.
                         * @member {string} inspectTemplateName
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.inspectTemplateName = "";
    
                        /**
                         * DeidentifyContentRequest deidentifyTemplateName.
                         * @member {string} deidentifyTemplateName
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.deidentifyTemplateName = "";
    
                        /**
                         * DeidentifyContentRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         */
                        DeidentifyContentRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new DeidentifyContentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyContentRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeidentifyContentRequest} DeidentifyContentRequest instance
                         */
                        DeidentifyContentRequest.create = function create(properties) {
                            return new DeidentifyContentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeidentifyContentRequest message. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyContentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyContentRequest} message DeidentifyContentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyContentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.deidentifyConfig != null && Object.hasOwnProperty.call(message, "deidentifyConfig"))
                                $root.google.privacy.dlp.v2.DeidentifyConfig.encode(message.deidentifyConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.inspectConfig != null && Object.hasOwnProperty.call(message, "inspectConfig"))
                                $root.google.privacy.dlp.v2.InspectConfig.encode(message.inspectConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                                $root.google.privacy.dlp.v2.ContentItem.encode(message.item, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.inspectTemplateName != null && Object.hasOwnProperty.call(message, "inspectTemplateName"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.inspectTemplateName);
                            if (message.deidentifyTemplateName != null && Object.hasOwnProperty.call(message, "deidentifyTemplateName"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.deidentifyTemplateName);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeidentifyContentRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyContentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyContentRequest} message DeidentifyContentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyContentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeidentifyContentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeidentifyContentRequest} DeidentifyContentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyContentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeidentifyContentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.deidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.item = $root.google.privacy.dlp.v2.ContentItem.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.inspectTemplateName = reader.string();
                                    break;
                                case 6:
                                    message.deidentifyTemplateName = reader.string();
                                    break;
                                case 7:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeidentifyContentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeidentifyContentRequest} DeidentifyContentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyContentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeidentifyContentRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeidentifyContentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.deidentifyConfig != null && message.hasOwnProperty("deidentifyConfig")) {
                                var error = $root.google.privacy.dlp.v2.DeidentifyConfig.verify(message.deidentifyConfig);
                                if (error)
                                    return "deidentifyConfig." + error;
                            }
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.verify(message.inspectConfig);
                                if (error)
                                    return "inspectConfig." + error;
                            }
                            if (message.item != null && message.hasOwnProperty("item")) {
                                var error = $root.google.privacy.dlp.v2.ContentItem.verify(message.item);
                                if (error)
                                    return "item." + error;
                            }
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                if (!$util.isString(message.inspectTemplateName))
                                    return "inspectTemplateName: string expected";
                            if (message.deidentifyTemplateName != null && message.hasOwnProperty("deidentifyTemplateName"))
                                if (!$util.isString(message.deidentifyTemplateName))
                                    return "deidentifyTemplateName: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeidentifyContentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeidentifyContentRequest} DeidentifyContentRequest
                         */
                        DeidentifyContentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeidentifyContentRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeidentifyContentRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.deidentifyConfig != null) {
                                if (typeof object.deidentifyConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyContentRequest.deidentifyConfig: object expected");
                                message.deidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.fromObject(object.deidentifyConfig);
                            }
                            if (object.inspectConfig != null) {
                                if (typeof object.inspectConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyContentRequest.inspectConfig: object expected");
                                message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.fromObject(object.inspectConfig);
                            }
                            if (object.item != null) {
                                if (typeof object.item !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyContentRequest.item: object expected");
                                message.item = $root.google.privacy.dlp.v2.ContentItem.fromObject(object.item);
                            }
                            if (object.inspectTemplateName != null)
                                message.inspectTemplateName = String(object.inspectTemplateName);
                            if (object.deidentifyTemplateName != null)
                                message.deidentifyTemplateName = String(object.deidentifyTemplateName);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeidentifyContentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.DeidentifyContentRequest} message DeidentifyContentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeidentifyContentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.deidentifyConfig = null;
                                object.inspectConfig = null;
                                object.item = null;
                                object.inspectTemplateName = "";
                                object.deidentifyTemplateName = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.deidentifyConfig != null && message.hasOwnProperty("deidentifyConfig"))
                                object.deidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.toObject(message.deidentifyConfig, options);
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig"))
                                object.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.toObject(message.inspectConfig, options);
                            if (message.item != null && message.hasOwnProperty("item"))
                                object.item = $root.google.privacy.dlp.v2.ContentItem.toObject(message.item, options);
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                object.inspectTemplateName = message.inspectTemplateName;
                            if (message.deidentifyTemplateName != null && message.hasOwnProperty("deidentifyTemplateName"))
                                object.deidentifyTemplateName = message.deidentifyTemplateName;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this DeidentifyContentRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeidentifyContentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeidentifyContentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeidentifyContentRequest;
                    })();
    
                    v2.DeidentifyContentResponse = (function() {
    
                        /**
                         * Properties of a DeidentifyContentResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeidentifyContentResponse
                         * @property {google.privacy.dlp.v2.IContentItem|null} [item] DeidentifyContentResponse item
                         * @property {google.privacy.dlp.v2.ITransformationOverview|null} [overview] DeidentifyContentResponse overview
                         */
    
                        /**
                         * Constructs a new DeidentifyContentResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeidentifyContentResponse.
                         * @implements IDeidentifyContentResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeidentifyContentResponse=} [properties] Properties to set
                         */
                        function DeidentifyContentResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeidentifyContentResponse item.
                         * @member {google.privacy.dlp.v2.IContentItem|null|undefined} item
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @instance
                         */
                        DeidentifyContentResponse.prototype.item = null;
    
                        /**
                         * DeidentifyContentResponse overview.
                         * @member {google.privacy.dlp.v2.ITransformationOverview|null|undefined} overview
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @instance
                         */
                        DeidentifyContentResponse.prototype.overview = null;
    
                        /**
                         * Creates a new DeidentifyContentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyContentResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeidentifyContentResponse} DeidentifyContentResponse instance
                         */
                        DeidentifyContentResponse.create = function create(properties) {
                            return new DeidentifyContentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified DeidentifyContentResponse message. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyContentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyContentResponse} message DeidentifyContentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyContentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                                $root.google.privacy.dlp.v2.ContentItem.encode(message.item, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.overview != null && Object.hasOwnProperty.call(message, "overview"))
                                $root.google.privacy.dlp.v2.TransformationOverview.encode(message.overview, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeidentifyContentResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyContentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyContentResponse} message DeidentifyContentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyContentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeidentifyContentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeidentifyContentResponse} DeidentifyContentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyContentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeidentifyContentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.item = $root.google.privacy.dlp.v2.ContentItem.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.overview = $root.google.privacy.dlp.v2.TransformationOverview.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeidentifyContentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeidentifyContentResponse} DeidentifyContentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyContentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeidentifyContentResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeidentifyContentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.item != null && message.hasOwnProperty("item")) {
                                var error = $root.google.privacy.dlp.v2.ContentItem.verify(message.item);
                                if (error)
                                    return "item." + error;
                            }
                            if (message.overview != null && message.hasOwnProperty("overview")) {
                                var error = $root.google.privacy.dlp.v2.TransformationOverview.verify(message.overview);
                                if (error)
                                    return "overview." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DeidentifyContentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeidentifyContentResponse} DeidentifyContentResponse
                         */
                        DeidentifyContentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeidentifyContentResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeidentifyContentResponse();
                            if (object.item != null) {
                                if (typeof object.item !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyContentResponse.item: object expected");
                                message.item = $root.google.privacy.dlp.v2.ContentItem.fromObject(object.item);
                            }
                            if (object.overview != null) {
                                if (typeof object.overview !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyContentResponse.overview: object expected");
                                message.overview = $root.google.privacy.dlp.v2.TransformationOverview.fromObject(object.overview);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeidentifyContentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.DeidentifyContentResponse} message DeidentifyContentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeidentifyContentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.item = null;
                                object.overview = null;
                            }
                            if (message.item != null && message.hasOwnProperty("item"))
                                object.item = $root.google.privacy.dlp.v2.ContentItem.toObject(message.item, options);
                            if (message.overview != null && message.hasOwnProperty("overview"))
                                object.overview = $root.google.privacy.dlp.v2.TransformationOverview.toObject(message.overview, options);
                            return object;
                        };
    
                        /**
                         * Converts this DeidentifyContentResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeidentifyContentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeidentifyContentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeidentifyContentResponse;
                    })();
    
                    v2.ReidentifyContentRequest = (function() {
    
                        /**
                         * Properties of a ReidentifyContentRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IReidentifyContentRequest
                         * @property {string|null} [parent] ReidentifyContentRequest parent
                         * @property {google.privacy.dlp.v2.IDeidentifyConfig|null} [reidentifyConfig] ReidentifyContentRequest reidentifyConfig
                         * @property {google.privacy.dlp.v2.IInspectConfig|null} [inspectConfig] ReidentifyContentRequest inspectConfig
                         * @property {google.privacy.dlp.v2.IContentItem|null} [item] ReidentifyContentRequest item
                         * @property {string|null} [inspectTemplateName] ReidentifyContentRequest inspectTemplateName
                         * @property {string|null} [reidentifyTemplateName] ReidentifyContentRequest reidentifyTemplateName
                         * @property {string|null} [locationId] ReidentifyContentRequest locationId
                         */
    
                        /**
                         * Constructs a new ReidentifyContentRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ReidentifyContentRequest.
                         * @implements IReidentifyContentRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IReidentifyContentRequest=} [properties] Properties to set
                         */
                        function ReidentifyContentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReidentifyContentRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.parent = "";
    
                        /**
                         * ReidentifyContentRequest reidentifyConfig.
                         * @member {google.privacy.dlp.v2.IDeidentifyConfig|null|undefined} reidentifyConfig
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.reidentifyConfig = null;
    
                        /**
                         * ReidentifyContentRequest inspectConfig.
                         * @member {google.privacy.dlp.v2.IInspectConfig|null|undefined} inspectConfig
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.inspectConfig = null;
    
                        /**
                         * ReidentifyContentRequest item.
                         * @member {google.privacy.dlp.v2.IContentItem|null|undefined} item
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.item = null;
    
                        /**
                         * ReidentifyContentRequest inspectTemplateName.
                         * @member {string} inspectTemplateName
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.inspectTemplateName = "";
    
                        /**
                         * ReidentifyContentRequest reidentifyTemplateName.
                         * @member {string} reidentifyTemplateName
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.reidentifyTemplateName = "";
    
                        /**
                         * ReidentifyContentRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         */
                        ReidentifyContentRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ReidentifyContentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IReidentifyContentRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ReidentifyContentRequest} ReidentifyContentRequest instance
                         */
                        ReidentifyContentRequest.create = function create(properties) {
                            return new ReidentifyContentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ReidentifyContentRequest message. Does not implicitly {@link google.privacy.dlp.v2.ReidentifyContentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IReidentifyContentRequest} message ReidentifyContentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReidentifyContentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.reidentifyConfig != null && Object.hasOwnProperty.call(message, "reidentifyConfig"))
                                $root.google.privacy.dlp.v2.DeidentifyConfig.encode(message.reidentifyConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.inspectConfig != null && Object.hasOwnProperty.call(message, "inspectConfig"))
                                $root.google.privacy.dlp.v2.InspectConfig.encode(message.inspectConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                                $root.google.privacy.dlp.v2.ContentItem.encode(message.item, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.inspectTemplateName != null && Object.hasOwnProperty.call(message, "inspectTemplateName"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.inspectTemplateName);
                            if (message.reidentifyTemplateName != null && Object.hasOwnProperty.call(message, "reidentifyTemplateName"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.reidentifyTemplateName);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReidentifyContentRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ReidentifyContentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IReidentifyContentRequest} message ReidentifyContentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReidentifyContentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReidentifyContentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ReidentifyContentRequest} ReidentifyContentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReidentifyContentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ReidentifyContentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.reidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.item = $root.google.privacy.dlp.v2.ContentItem.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.inspectTemplateName = reader.string();
                                    break;
                                case 6:
                                    message.reidentifyTemplateName = reader.string();
                                    break;
                                case 7:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReidentifyContentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ReidentifyContentRequest} ReidentifyContentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReidentifyContentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReidentifyContentRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReidentifyContentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.reidentifyConfig != null && message.hasOwnProperty("reidentifyConfig")) {
                                var error = $root.google.privacy.dlp.v2.DeidentifyConfig.verify(message.reidentifyConfig);
                                if (error)
                                    return "reidentifyConfig." + error;
                            }
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.verify(message.inspectConfig);
                                if (error)
                                    return "inspectConfig." + error;
                            }
                            if (message.item != null && message.hasOwnProperty("item")) {
                                var error = $root.google.privacy.dlp.v2.ContentItem.verify(message.item);
                                if (error)
                                    return "item." + error;
                            }
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                if (!$util.isString(message.inspectTemplateName))
                                    return "inspectTemplateName: string expected";
                            if (message.reidentifyTemplateName != null && message.hasOwnProperty("reidentifyTemplateName"))
                                if (!$util.isString(message.reidentifyTemplateName))
                                    return "reidentifyTemplateName: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReidentifyContentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ReidentifyContentRequest} ReidentifyContentRequest
                         */
                        ReidentifyContentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ReidentifyContentRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ReidentifyContentRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.reidentifyConfig != null) {
                                if (typeof object.reidentifyConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ReidentifyContentRequest.reidentifyConfig: object expected");
                                message.reidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.fromObject(object.reidentifyConfig);
                            }
                            if (object.inspectConfig != null) {
                                if (typeof object.inspectConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ReidentifyContentRequest.inspectConfig: object expected");
                                message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.fromObject(object.inspectConfig);
                            }
                            if (object.item != null) {
                                if (typeof object.item !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ReidentifyContentRequest.item: object expected");
                                message.item = $root.google.privacy.dlp.v2.ContentItem.fromObject(object.item);
                            }
                            if (object.inspectTemplateName != null)
                                message.inspectTemplateName = String(object.inspectTemplateName);
                            if (object.reidentifyTemplateName != null)
                                message.reidentifyTemplateName = String(object.reidentifyTemplateName);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReidentifyContentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ReidentifyContentRequest} message ReidentifyContentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReidentifyContentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.reidentifyConfig = null;
                                object.inspectConfig = null;
                                object.item = null;
                                object.inspectTemplateName = "";
                                object.reidentifyTemplateName = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.reidentifyConfig != null && message.hasOwnProperty("reidentifyConfig"))
                                object.reidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.toObject(message.reidentifyConfig, options);
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig"))
                                object.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.toObject(message.inspectConfig, options);
                            if (message.item != null && message.hasOwnProperty("item"))
                                object.item = $root.google.privacy.dlp.v2.ContentItem.toObject(message.item, options);
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                object.inspectTemplateName = message.inspectTemplateName;
                            if (message.reidentifyTemplateName != null && message.hasOwnProperty("reidentifyTemplateName"))
                                object.reidentifyTemplateName = message.reidentifyTemplateName;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this ReidentifyContentRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ReidentifyContentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReidentifyContentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReidentifyContentRequest;
                    })();
    
                    v2.ReidentifyContentResponse = (function() {
    
                        /**
                         * Properties of a ReidentifyContentResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IReidentifyContentResponse
                         * @property {google.privacy.dlp.v2.IContentItem|null} [item] ReidentifyContentResponse item
                         * @property {google.privacy.dlp.v2.ITransformationOverview|null} [overview] ReidentifyContentResponse overview
                         */
    
                        /**
                         * Constructs a new ReidentifyContentResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ReidentifyContentResponse.
                         * @implements IReidentifyContentResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IReidentifyContentResponse=} [properties] Properties to set
                         */
                        function ReidentifyContentResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReidentifyContentResponse item.
                         * @member {google.privacy.dlp.v2.IContentItem|null|undefined} item
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @instance
                         */
                        ReidentifyContentResponse.prototype.item = null;
    
                        /**
                         * ReidentifyContentResponse overview.
                         * @member {google.privacy.dlp.v2.ITransformationOverview|null|undefined} overview
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @instance
                         */
                        ReidentifyContentResponse.prototype.overview = null;
    
                        /**
                         * Creates a new ReidentifyContentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IReidentifyContentResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ReidentifyContentResponse} ReidentifyContentResponse instance
                         */
                        ReidentifyContentResponse.create = function create(properties) {
                            return new ReidentifyContentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ReidentifyContentResponse message. Does not implicitly {@link google.privacy.dlp.v2.ReidentifyContentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IReidentifyContentResponse} message ReidentifyContentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReidentifyContentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                                $root.google.privacy.dlp.v2.ContentItem.encode(message.item, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.overview != null && Object.hasOwnProperty.call(message, "overview"))
                                $root.google.privacy.dlp.v2.TransformationOverview.encode(message.overview, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReidentifyContentResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ReidentifyContentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IReidentifyContentResponse} message ReidentifyContentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReidentifyContentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReidentifyContentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ReidentifyContentResponse} ReidentifyContentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReidentifyContentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ReidentifyContentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.item = $root.google.privacy.dlp.v2.ContentItem.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.overview = $root.google.privacy.dlp.v2.TransformationOverview.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReidentifyContentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ReidentifyContentResponse} ReidentifyContentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReidentifyContentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReidentifyContentResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReidentifyContentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.item != null && message.hasOwnProperty("item")) {
                                var error = $root.google.privacy.dlp.v2.ContentItem.verify(message.item);
                                if (error)
                                    return "item." + error;
                            }
                            if (message.overview != null && message.hasOwnProperty("overview")) {
                                var error = $root.google.privacy.dlp.v2.TransformationOverview.verify(message.overview);
                                if (error)
                                    return "overview." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ReidentifyContentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ReidentifyContentResponse} ReidentifyContentResponse
                         */
                        ReidentifyContentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ReidentifyContentResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ReidentifyContentResponse();
                            if (object.item != null) {
                                if (typeof object.item !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ReidentifyContentResponse.item: object expected");
                                message.item = $root.google.privacy.dlp.v2.ContentItem.fromObject(object.item);
                            }
                            if (object.overview != null) {
                                if (typeof object.overview !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ReidentifyContentResponse.overview: object expected");
                                message.overview = $root.google.privacy.dlp.v2.TransformationOverview.fromObject(object.overview);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReidentifyContentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ReidentifyContentResponse} message ReidentifyContentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReidentifyContentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.item = null;
                                object.overview = null;
                            }
                            if (message.item != null && message.hasOwnProperty("item"))
                                object.item = $root.google.privacy.dlp.v2.ContentItem.toObject(message.item, options);
                            if (message.overview != null && message.hasOwnProperty("overview"))
                                object.overview = $root.google.privacy.dlp.v2.TransformationOverview.toObject(message.overview, options);
                            return object;
                        };
    
                        /**
                         * Converts this ReidentifyContentResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ReidentifyContentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReidentifyContentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReidentifyContentResponse;
                    })();
    
                    v2.InspectContentRequest = (function() {
    
                        /**
                         * Properties of an InspectContentRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectContentRequest
                         * @property {string|null} [parent] InspectContentRequest parent
                         * @property {google.privacy.dlp.v2.IInspectConfig|null} [inspectConfig] InspectContentRequest inspectConfig
                         * @property {google.privacy.dlp.v2.IContentItem|null} [item] InspectContentRequest item
                         * @property {string|null} [inspectTemplateName] InspectContentRequest inspectTemplateName
                         * @property {string|null} [locationId] InspectContentRequest locationId
                         */
    
                        /**
                         * Constructs a new InspectContentRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectContentRequest.
                         * @implements IInspectContentRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectContentRequest=} [properties] Properties to set
                         */
                        function InspectContentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectContentRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @instance
                         */
                        InspectContentRequest.prototype.parent = "";
    
                        /**
                         * InspectContentRequest inspectConfig.
                         * @member {google.privacy.dlp.v2.IInspectConfig|null|undefined} inspectConfig
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @instance
                         */
                        InspectContentRequest.prototype.inspectConfig = null;
    
                        /**
                         * InspectContentRequest item.
                         * @member {google.privacy.dlp.v2.IContentItem|null|undefined} item
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @instance
                         */
                        InspectContentRequest.prototype.item = null;
    
                        /**
                         * InspectContentRequest inspectTemplateName.
                         * @member {string} inspectTemplateName
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @instance
                         */
                        InspectContentRequest.prototype.inspectTemplateName = "";
    
                        /**
                         * InspectContentRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @instance
                         */
                        InspectContentRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new InspectContentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectContentRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectContentRequest} InspectContentRequest instance
                         */
                        InspectContentRequest.create = function create(properties) {
                            return new InspectContentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified InspectContentRequest message. Does not implicitly {@link google.privacy.dlp.v2.InspectContentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectContentRequest} message InspectContentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectContentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.inspectConfig != null && Object.hasOwnProperty.call(message, "inspectConfig"))
                                $root.google.privacy.dlp.v2.InspectConfig.encode(message.inspectConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                                $root.google.privacy.dlp.v2.ContentItem.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.inspectTemplateName != null && Object.hasOwnProperty.call(message, "inspectTemplateName"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.inspectTemplateName);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectContentRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectContentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectContentRequest} message InspectContentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectContentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectContentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectContentRequest} InspectContentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectContentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectContentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.item = $root.google.privacy.dlp.v2.ContentItem.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.inspectTemplateName = reader.string();
                                    break;
                                case 5:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectContentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectContentRequest} InspectContentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectContentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectContentRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectContentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.verify(message.inspectConfig);
                                if (error)
                                    return "inspectConfig." + error;
                            }
                            if (message.item != null && message.hasOwnProperty("item")) {
                                var error = $root.google.privacy.dlp.v2.ContentItem.verify(message.item);
                                if (error)
                                    return "item." + error;
                            }
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                if (!$util.isString(message.inspectTemplateName))
                                    return "inspectTemplateName: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an InspectContentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectContentRequest} InspectContentRequest
                         */
                        InspectContentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectContentRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectContentRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.inspectConfig != null) {
                                if (typeof object.inspectConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectContentRequest.inspectConfig: object expected");
                                message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.fromObject(object.inspectConfig);
                            }
                            if (object.item != null) {
                                if (typeof object.item !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectContentRequest.item: object expected");
                                message.item = $root.google.privacy.dlp.v2.ContentItem.fromObject(object.item);
                            }
                            if (object.inspectTemplateName != null)
                                message.inspectTemplateName = String(object.inspectTemplateName);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectContentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @static
                         * @param {google.privacy.dlp.v2.InspectContentRequest} message InspectContentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectContentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.inspectConfig = null;
                                object.item = null;
                                object.inspectTemplateName = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig"))
                                object.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.toObject(message.inspectConfig, options);
                            if (message.item != null && message.hasOwnProperty("item"))
                                object.item = $root.google.privacy.dlp.v2.ContentItem.toObject(message.item, options);
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                object.inspectTemplateName = message.inspectTemplateName;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this InspectContentRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectContentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectContentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectContentRequest;
                    })();
    
                    v2.InspectContentResponse = (function() {
    
                        /**
                         * Properties of an InspectContentResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectContentResponse
                         * @property {google.privacy.dlp.v2.IInspectResult|null} [result] InspectContentResponse result
                         */
    
                        /**
                         * Constructs a new InspectContentResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectContentResponse.
                         * @implements IInspectContentResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectContentResponse=} [properties] Properties to set
                         */
                        function InspectContentResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectContentResponse result.
                         * @member {google.privacy.dlp.v2.IInspectResult|null|undefined} result
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @instance
                         */
                        InspectContentResponse.prototype.result = null;
    
                        /**
                         * Creates a new InspectContentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectContentResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectContentResponse} InspectContentResponse instance
                         */
                        InspectContentResponse.create = function create(properties) {
                            return new InspectContentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified InspectContentResponse message. Does not implicitly {@link google.privacy.dlp.v2.InspectContentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectContentResponse} message InspectContentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectContentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                                $root.google.privacy.dlp.v2.InspectResult.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectContentResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectContentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectContentResponse} message InspectContentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectContentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectContentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectContentResponse} InspectContentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectContentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectContentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.result = $root.google.privacy.dlp.v2.InspectResult.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectContentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectContentResponse} InspectContentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectContentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectContentResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectContentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.result != null && message.hasOwnProperty("result")) {
                                var error = $root.google.privacy.dlp.v2.InspectResult.verify(message.result);
                                if (error)
                                    return "result." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectContentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectContentResponse} InspectContentResponse
                         */
                        InspectContentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectContentResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectContentResponse();
                            if (object.result != null) {
                                if (typeof object.result !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectContentResponse.result: object expected");
                                message.result = $root.google.privacy.dlp.v2.InspectResult.fromObject(object.result);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectContentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @static
                         * @param {google.privacy.dlp.v2.InspectContentResponse} message InspectContentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectContentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.result = null;
                            if (message.result != null && message.hasOwnProperty("result"))
                                object.result = $root.google.privacy.dlp.v2.InspectResult.toObject(message.result, options);
                            return object;
                        };
    
                        /**
                         * Converts this InspectContentResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectContentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectContentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectContentResponse;
                    })();
    
                    v2.OutputStorageConfig = (function() {
    
                        /**
                         * Properties of an OutputStorageConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IOutputStorageConfig
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [table] OutputStorageConfig table
                         * @property {google.privacy.dlp.v2.OutputStorageConfig.OutputSchema|null} [outputSchema] OutputStorageConfig outputSchema
                         */
    
                        /**
                         * Constructs a new OutputStorageConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an OutputStorageConfig.
                         * @implements IOutputStorageConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IOutputStorageConfig=} [properties] Properties to set
                         */
                        function OutputStorageConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OutputStorageConfig table.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} table
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @instance
                         */
                        OutputStorageConfig.prototype.table = null;
    
                        /**
                         * OutputStorageConfig outputSchema.
                         * @member {google.privacy.dlp.v2.OutputStorageConfig.OutputSchema} outputSchema
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @instance
                         */
                        OutputStorageConfig.prototype.outputSchema = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * OutputStorageConfig type.
                         * @member {"table"|undefined} type
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @instance
                         */
                        Object.defineProperty(OutputStorageConfig.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["table"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new OutputStorageConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IOutputStorageConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.OutputStorageConfig} OutputStorageConfig instance
                         */
                        OutputStorageConfig.create = function create(properties) {
                            return new OutputStorageConfig(properties);
                        };
    
                        /**
                         * Encodes the specified OutputStorageConfig message. Does not implicitly {@link google.privacy.dlp.v2.OutputStorageConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IOutputStorageConfig} message OutputStorageConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OutputStorageConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.table, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.outputSchema != null && Object.hasOwnProperty.call(message, "outputSchema"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.outputSchema);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OutputStorageConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.OutputStorageConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IOutputStorageConfig} message OutputStorageConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OutputStorageConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OutputStorageConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.OutputStorageConfig} OutputStorageConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OutputStorageConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.OutputStorageConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.table = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.outputSchema = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OutputStorageConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.OutputStorageConfig} OutputStorageConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OutputStorageConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OutputStorageConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OutputStorageConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.table != null && message.hasOwnProperty("table")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.table);
                                    if (error)
                                        return "table." + error;
                                }
                            }
                            if (message.outputSchema != null && message.hasOwnProperty("outputSchema"))
                                switch (message.outputSchema) {
                                default:
                                    return "outputSchema: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an OutputStorageConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.OutputStorageConfig} OutputStorageConfig
                         */
                        OutputStorageConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.OutputStorageConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.OutputStorageConfig();
                            if (object.table != null) {
                                if (typeof object.table !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.OutputStorageConfig.table: object expected");
                                message.table = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.table);
                            }
                            switch (object.outputSchema) {
                            case "OUTPUT_SCHEMA_UNSPECIFIED":
                            case 0:
                                message.outputSchema = 0;
                                break;
                            case "BASIC_COLUMNS":
                            case 1:
                                message.outputSchema = 1;
                                break;
                            case "GCS_COLUMNS":
                            case 2:
                                message.outputSchema = 2;
                                break;
                            case "DATASTORE_COLUMNS":
                            case 3:
                                message.outputSchema = 3;
                                break;
                            case "BIG_QUERY_COLUMNS":
                            case 4:
                                message.outputSchema = 4;
                                break;
                            case "ALL_COLUMNS":
                            case 5:
                                message.outputSchema = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OutputStorageConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.OutputStorageConfig} message OutputStorageConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OutputStorageConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.outputSchema = options.enums === String ? "OUTPUT_SCHEMA_UNSPECIFIED" : 0;
                            if (message.table != null && message.hasOwnProperty("table")) {
                                object.table = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.table, options);
                                if (options.oneofs)
                                    object.type = "table";
                            }
                            if (message.outputSchema != null && message.hasOwnProperty("outputSchema"))
                                object.outputSchema = options.enums === String ? $root.google.privacy.dlp.v2.OutputStorageConfig.OutputSchema[message.outputSchema] : message.outputSchema;
                            return object;
                        };
    
                        /**
                         * Converts this OutputStorageConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.OutputStorageConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OutputStorageConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * OutputSchema enum.
                         * @name google.privacy.dlp.v2.OutputStorageConfig.OutputSchema
                         * @enum {number}
                         * @property {number} OUTPUT_SCHEMA_UNSPECIFIED=0 OUTPUT_SCHEMA_UNSPECIFIED value
                         * @property {number} BASIC_COLUMNS=1 BASIC_COLUMNS value
                         * @property {number} GCS_COLUMNS=2 GCS_COLUMNS value
                         * @property {number} DATASTORE_COLUMNS=3 DATASTORE_COLUMNS value
                         * @property {number} BIG_QUERY_COLUMNS=4 BIG_QUERY_COLUMNS value
                         * @property {number} ALL_COLUMNS=5 ALL_COLUMNS value
                         */
                        OutputStorageConfig.OutputSchema = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "OUTPUT_SCHEMA_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "BASIC_COLUMNS"] = 1;
                            values[valuesById[2] = "GCS_COLUMNS"] = 2;
                            values[valuesById[3] = "DATASTORE_COLUMNS"] = 3;
                            values[valuesById[4] = "BIG_QUERY_COLUMNS"] = 4;
                            values[valuesById[5] = "ALL_COLUMNS"] = 5;
                            return values;
                        })();
    
                        return OutputStorageConfig;
                    })();
    
                    v2.InfoTypeStats = (function() {
    
                        /**
                         * Properties of an InfoTypeStats.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInfoTypeStats
                         * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] InfoTypeStats infoType
                         * @property {number|Long|null} [count] InfoTypeStats count
                         */
    
                        /**
                         * Constructs a new InfoTypeStats.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InfoTypeStats.
                         * @implements IInfoTypeStats
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInfoTypeStats=} [properties] Properties to set
                         */
                        function InfoTypeStats(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InfoTypeStats infoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @instance
                         */
                        InfoTypeStats.prototype.infoType = null;
    
                        /**
                         * InfoTypeStats count.
                         * @member {number|Long} count
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @instance
                         */
                        InfoTypeStats.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new InfoTypeStats instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeStats=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InfoTypeStats} InfoTypeStats instance
                         */
                        InfoTypeStats.create = function create(properties) {
                            return new InfoTypeStats(properties);
                        };
    
                        /**
                         * Encodes the specified InfoTypeStats message. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeStats.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeStats} message InfoTypeStats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoTypeStats.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.count);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InfoTypeStats message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeStats.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeStats} message InfoTypeStats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoTypeStats.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InfoTypeStats message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InfoTypeStats} InfoTypeStats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoTypeStats.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InfoTypeStats();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.count = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InfoTypeStats message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InfoTypeStats} InfoTypeStats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoTypeStats.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InfoTypeStats message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InfoTypeStats.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                if (error)
                                    return "infoType." + error;
                            }
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                    return "count: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates an InfoTypeStats message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InfoTypeStats} InfoTypeStats
                         */
                        InfoTypeStats.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InfoTypeStats)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InfoTypeStats();
                            if (object.infoType != null) {
                                if (typeof object.infoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InfoTypeStats.infoType: object expected");
                                message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                            }
                            if (object.count != null)
                                if ($util.Long)
                                    (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                else if (typeof object.count === "string")
                                    message.count = parseInt(object.count, 10);
                                else if (typeof object.count === "number")
                                    message.count = object.count;
                                else if (typeof object.count === "object")
                                    message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InfoTypeStats message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.InfoTypeStats} message InfoTypeStats
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InfoTypeStats.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.infoType = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.count = options.longs === String ? "0" : 0;
                            }
                            if (message.infoType != null && message.hasOwnProperty("infoType"))
                                object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (typeof message.count === "number")
                                    object.count = options.longs === String ? String(message.count) : message.count;
                                else
                                    object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                            return object;
                        };
    
                        /**
                         * Converts this InfoTypeStats to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InfoTypeStats
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InfoTypeStats.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InfoTypeStats;
                    })();
    
                    v2.InspectDataSourceDetails = (function() {
    
                        /**
                         * Properties of an InspectDataSourceDetails.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectDataSourceDetails
                         * @property {google.privacy.dlp.v2.InspectDataSourceDetails.IRequestedOptions|null} [requestedOptions] InspectDataSourceDetails requestedOptions
                         * @property {google.privacy.dlp.v2.InspectDataSourceDetails.IResult|null} [result] InspectDataSourceDetails result
                         */
    
                        /**
                         * Constructs a new InspectDataSourceDetails.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectDataSourceDetails.
                         * @implements IInspectDataSourceDetails
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectDataSourceDetails=} [properties] Properties to set
                         */
                        function InspectDataSourceDetails(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectDataSourceDetails requestedOptions.
                         * @member {google.privacy.dlp.v2.InspectDataSourceDetails.IRequestedOptions|null|undefined} requestedOptions
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @instance
                         */
                        InspectDataSourceDetails.prototype.requestedOptions = null;
    
                        /**
                         * InspectDataSourceDetails result.
                         * @member {google.privacy.dlp.v2.InspectDataSourceDetails.IResult|null|undefined} result
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @instance
                         */
                        InspectDataSourceDetails.prototype.result = null;
    
                        /**
                         * Creates a new InspectDataSourceDetails instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectDataSourceDetails=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectDataSourceDetails} InspectDataSourceDetails instance
                         */
                        InspectDataSourceDetails.create = function create(properties) {
                            return new InspectDataSourceDetails(properties);
                        };
    
                        /**
                         * Encodes the specified InspectDataSourceDetails message. Does not implicitly {@link google.privacy.dlp.v2.InspectDataSourceDetails.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectDataSourceDetails} message InspectDataSourceDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectDataSourceDetails.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.requestedOptions != null && Object.hasOwnProperty.call(message, "requestedOptions"))
                                $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.encode(message.requestedOptions, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                                $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result.encode(message.result, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectDataSourceDetails message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectDataSourceDetails.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectDataSourceDetails} message InspectDataSourceDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectDataSourceDetails.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectDataSourceDetails message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectDataSourceDetails} InspectDataSourceDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectDataSourceDetails.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectDataSourceDetails();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.requestedOptions = $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.result = $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectDataSourceDetails message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectDataSourceDetails} InspectDataSourceDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectDataSourceDetails.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectDataSourceDetails message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectDataSourceDetails.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.requestedOptions != null && message.hasOwnProperty("requestedOptions")) {
                                var error = $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.verify(message.requestedOptions);
                                if (error)
                                    return "requestedOptions." + error;
                            }
                            if (message.result != null && message.hasOwnProperty("result")) {
                                var error = $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result.verify(message.result);
                                if (error)
                                    return "result." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectDataSourceDetails message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectDataSourceDetails} InspectDataSourceDetails
                         */
                        InspectDataSourceDetails.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectDataSourceDetails)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectDataSourceDetails();
                            if (object.requestedOptions != null) {
                                if (typeof object.requestedOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.requestedOptions: object expected");
                                message.requestedOptions = $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.fromObject(object.requestedOptions);
                            }
                            if (object.result != null) {
                                if (typeof object.result !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.result: object expected");
                                message.result = $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result.fromObject(object.result);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectDataSourceDetails message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @static
                         * @param {google.privacy.dlp.v2.InspectDataSourceDetails} message InspectDataSourceDetails
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectDataSourceDetails.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.requestedOptions = null;
                                object.result = null;
                            }
                            if (message.requestedOptions != null && message.hasOwnProperty("requestedOptions"))
                                object.requestedOptions = $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.toObject(message.requestedOptions, options);
                            if (message.result != null && message.hasOwnProperty("result"))
                                object.result = $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result.toObject(message.result, options);
                            return object;
                        };
    
                        /**
                         * Converts this InspectDataSourceDetails to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectDataSourceDetails.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        InspectDataSourceDetails.RequestedOptions = (function() {
    
                            /**
                             * Properties of a RequestedOptions.
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                             * @interface IRequestedOptions
                             * @property {google.privacy.dlp.v2.IInspectTemplate|null} [snapshotInspectTemplate] RequestedOptions snapshotInspectTemplate
                             * @property {google.privacy.dlp.v2.IInspectJobConfig|null} [jobConfig] RequestedOptions jobConfig
                             */
    
                            /**
                             * Constructs a new RequestedOptions.
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                             * @classdesc Represents a RequestedOptions.
                             * @implements IRequestedOptions
                             * @constructor
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IRequestedOptions=} [properties] Properties to set
                             */
                            function RequestedOptions(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * RequestedOptions snapshotInspectTemplate.
                             * @member {google.privacy.dlp.v2.IInspectTemplate|null|undefined} snapshotInspectTemplate
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @instance
                             */
                            RequestedOptions.prototype.snapshotInspectTemplate = null;
    
                            /**
                             * RequestedOptions jobConfig.
                             * @member {google.privacy.dlp.v2.IInspectJobConfig|null|undefined} jobConfig
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @instance
                             */
                            RequestedOptions.prototype.jobConfig = null;
    
                            /**
                             * Creates a new RequestedOptions instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IRequestedOptions=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions} RequestedOptions instance
                             */
                            RequestedOptions.create = function create(properties) {
                                return new RequestedOptions(properties);
                            };
    
                            /**
                             * Encodes the specified RequestedOptions message. Does not implicitly {@link google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IRequestedOptions} message RequestedOptions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RequestedOptions.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.snapshotInspectTemplate != null && Object.hasOwnProperty.call(message, "snapshotInspectTemplate"))
                                    $root.google.privacy.dlp.v2.InspectTemplate.encode(message.snapshotInspectTemplate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.jobConfig != null && Object.hasOwnProperty.call(message, "jobConfig"))
                                    $root.google.privacy.dlp.v2.InspectJobConfig.encode(message.jobConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified RequestedOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IRequestedOptions} message RequestedOptions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RequestedOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a RequestedOptions message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions} RequestedOptions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RequestedOptions.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.snapshotInspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.jobConfig = $root.google.privacy.dlp.v2.InspectJobConfig.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a RequestedOptions message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions} RequestedOptions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RequestedOptions.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a RequestedOptions message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RequestedOptions.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.snapshotInspectTemplate != null && message.hasOwnProperty("snapshotInspectTemplate")) {
                                    var error = $root.google.privacy.dlp.v2.InspectTemplate.verify(message.snapshotInspectTemplate);
                                    if (error)
                                        return "snapshotInspectTemplate." + error;
                                }
                                if (message.jobConfig != null && message.hasOwnProperty("jobConfig")) {
                                    var error = $root.google.privacy.dlp.v2.InspectJobConfig.verify(message.jobConfig);
                                    if (error)
                                        return "jobConfig." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a RequestedOptions message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions} RequestedOptions
                             */
                            RequestedOptions.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions();
                                if (object.snapshotInspectTemplate != null) {
                                    if (typeof object.snapshotInspectTemplate !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.snapshotInspectTemplate: object expected");
                                    message.snapshotInspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.fromObject(object.snapshotInspectTemplate);
                                }
                                if (object.jobConfig != null) {
                                    if (typeof object.jobConfig !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.jobConfig: object expected");
                                    message.jobConfig = $root.google.privacy.dlp.v2.InspectJobConfig.fromObject(object.jobConfig);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a RequestedOptions message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions} message RequestedOptions
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RequestedOptions.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.snapshotInspectTemplate = null;
                                    object.jobConfig = null;
                                }
                                if (message.snapshotInspectTemplate != null && message.hasOwnProperty("snapshotInspectTemplate"))
                                    object.snapshotInspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.toObject(message.snapshotInspectTemplate, options);
                                if (message.jobConfig != null && message.hasOwnProperty("jobConfig"))
                                    object.jobConfig = $root.google.privacy.dlp.v2.InspectJobConfig.toObject(message.jobConfig, options);
                                return object;
                            };
    
                            /**
                             * Converts this RequestedOptions to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RequestedOptions.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return RequestedOptions;
                        })();
    
                        InspectDataSourceDetails.Result = (function() {
    
                            /**
                             * Properties of a Result.
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                             * @interface IResult
                             * @property {number|Long|null} [processedBytes] Result processedBytes
                             * @property {number|Long|null} [totalEstimatedBytes] Result totalEstimatedBytes
                             * @property {Array.<google.privacy.dlp.v2.IInfoTypeStats>|null} [infoTypeStats] Result infoTypeStats
                             * @property {google.privacy.dlp.v2.IHybridInspectStatistics|null} [hybridStats] Result hybridStats
                             */
    
                            /**
                             * Constructs a new Result.
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails
                             * @classdesc Represents a Result.
                             * @implements IResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IResult=} [properties] Properties to set
                             */
                            function Result(properties) {
                                this.infoTypeStats = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Result processedBytes.
                             * @member {number|Long} processedBytes
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @instance
                             */
                            Result.prototype.processedBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Result totalEstimatedBytes.
                             * @member {number|Long} totalEstimatedBytes
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @instance
                             */
                            Result.prototype.totalEstimatedBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Result infoTypeStats.
                             * @member {Array.<google.privacy.dlp.v2.IInfoTypeStats>} infoTypeStats
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @instance
                             */
                            Result.prototype.infoTypeStats = $util.emptyArray;
    
                            /**
                             * Result hybridStats.
                             * @member {google.privacy.dlp.v2.IHybridInspectStatistics|null|undefined} hybridStats
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @instance
                             */
                            Result.prototype.hybridStats = null;
    
                            /**
                             * Creates a new Result instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.Result} Result instance
                             */
                            Result.create = function create(properties) {
                                return new Result(properties);
                            };
    
                            /**
                             * Encodes the specified Result message. Does not implicitly {@link google.privacy.dlp.v2.InspectDataSourceDetails.Result.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IResult} message Result message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Result.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.processedBytes != null && Object.hasOwnProperty.call(message, "processedBytes"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.processedBytes);
                                if (message.totalEstimatedBytes != null && Object.hasOwnProperty.call(message, "totalEstimatedBytes"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.totalEstimatedBytes);
                                if (message.infoTypeStats != null && message.infoTypeStats.length)
                                    for (var i = 0; i < message.infoTypeStats.length; ++i)
                                        $root.google.privacy.dlp.v2.InfoTypeStats.encode(message.infoTypeStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.hybridStats != null && Object.hasOwnProperty.call(message, "hybridStats"))
                                    $root.google.privacy.dlp.v2.HybridInspectStatistics.encode(message.hybridStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Result message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectDataSourceDetails.Result.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.IResult} message Result message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Result.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Result message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.Result} Result
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Result.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.processedBytes = reader.int64();
                                        break;
                                    case 2:
                                        message.totalEstimatedBytes = reader.int64();
                                        break;
                                    case 3:
                                        if (!(message.infoTypeStats && message.infoTypeStats.length))
                                            message.infoTypeStats = [];
                                        message.infoTypeStats.push($root.google.privacy.dlp.v2.InfoTypeStats.decode(reader, reader.uint32()));
                                        break;
                                    case 7:
                                        message.hybridStats = $root.google.privacy.dlp.v2.HybridInspectStatistics.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Result message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.Result} Result
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Result.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Result message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Result.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.processedBytes != null && message.hasOwnProperty("processedBytes"))
                                    if (!$util.isInteger(message.processedBytes) && !(message.processedBytes && $util.isInteger(message.processedBytes.low) && $util.isInteger(message.processedBytes.high)))
                                        return "processedBytes: integer|Long expected";
                                if (message.totalEstimatedBytes != null && message.hasOwnProperty("totalEstimatedBytes"))
                                    if (!$util.isInteger(message.totalEstimatedBytes) && !(message.totalEstimatedBytes && $util.isInteger(message.totalEstimatedBytes.low) && $util.isInteger(message.totalEstimatedBytes.high)))
                                        return "totalEstimatedBytes: integer|Long expected";
                                if (message.infoTypeStats != null && message.hasOwnProperty("infoTypeStats")) {
                                    if (!Array.isArray(message.infoTypeStats))
                                        return "infoTypeStats: array expected";
                                    for (var i = 0; i < message.infoTypeStats.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.InfoTypeStats.verify(message.infoTypeStats[i]);
                                        if (error)
                                            return "infoTypeStats." + error;
                                    }
                                }
                                if (message.hybridStats != null && message.hasOwnProperty("hybridStats")) {
                                    var error = $root.google.privacy.dlp.v2.HybridInspectStatistics.verify(message.hybridStats);
                                    if (error)
                                        return "hybridStats." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Result message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.InspectDataSourceDetails.Result} Result
                             */
                            Result.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.InspectDataSourceDetails.Result();
                                if (object.processedBytes != null)
                                    if ($util.Long)
                                        (message.processedBytes = $util.Long.fromValue(object.processedBytes)).unsigned = false;
                                    else if (typeof object.processedBytes === "string")
                                        message.processedBytes = parseInt(object.processedBytes, 10);
                                    else if (typeof object.processedBytes === "number")
                                        message.processedBytes = object.processedBytes;
                                    else if (typeof object.processedBytes === "object")
                                        message.processedBytes = new $util.LongBits(object.processedBytes.low >>> 0, object.processedBytes.high >>> 0).toNumber();
                                if (object.totalEstimatedBytes != null)
                                    if ($util.Long)
                                        (message.totalEstimatedBytes = $util.Long.fromValue(object.totalEstimatedBytes)).unsigned = false;
                                    else if (typeof object.totalEstimatedBytes === "string")
                                        message.totalEstimatedBytes = parseInt(object.totalEstimatedBytes, 10);
                                    else if (typeof object.totalEstimatedBytes === "number")
                                        message.totalEstimatedBytes = object.totalEstimatedBytes;
                                    else if (typeof object.totalEstimatedBytes === "object")
                                        message.totalEstimatedBytes = new $util.LongBits(object.totalEstimatedBytes.low >>> 0, object.totalEstimatedBytes.high >>> 0).toNumber();
                                if (object.infoTypeStats) {
                                    if (!Array.isArray(object.infoTypeStats))
                                        throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.Result.infoTypeStats: array expected");
                                    message.infoTypeStats = [];
                                    for (var i = 0; i < object.infoTypeStats.length; ++i) {
                                        if (typeof object.infoTypeStats[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.Result.infoTypeStats: object expected");
                                        message.infoTypeStats[i] = $root.google.privacy.dlp.v2.InfoTypeStats.fromObject(object.infoTypeStats[i]);
                                    }
                                }
                                if (object.hybridStats != null) {
                                    if (typeof object.hybridStats !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectDataSourceDetails.Result.hybridStats: object expected");
                                    message.hybridStats = $root.google.privacy.dlp.v2.HybridInspectStatistics.fromObject(object.hybridStats);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Result message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @static
                             * @param {google.privacy.dlp.v2.InspectDataSourceDetails.Result} message Result
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Result.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.infoTypeStats = [];
                                if (options.defaults) {
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.processedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.processedBytes = options.longs === String ? "0" : 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.totalEstimatedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.totalEstimatedBytes = options.longs === String ? "0" : 0;
                                    object.hybridStats = null;
                                }
                                if (message.processedBytes != null && message.hasOwnProperty("processedBytes"))
                                    if (typeof message.processedBytes === "number")
                                        object.processedBytes = options.longs === String ? String(message.processedBytes) : message.processedBytes;
                                    else
                                        object.processedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.processedBytes) : options.longs === Number ? new $util.LongBits(message.processedBytes.low >>> 0, message.processedBytes.high >>> 0).toNumber() : message.processedBytes;
                                if (message.totalEstimatedBytes != null && message.hasOwnProperty("totalEstimatedBytes"))
                                    if (typeof message.totalEstimatedBytes === "number")
                                        object.totalEstimatedBytes = options.longs === String ? String(message.totalEstimatedBytes) : message.totalEstimatedBytes;
                                    else
                                        object.totalEstimatedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.totalEstimatedBytes) : options.longs === Number ? new $util.LongBits(message.totalEstimatedBytes.low >>> 0, message.totalEstimatedBytes.high >>> 0).toNumber() : message.totalEstimatedBytes;
                                if (message.infoTypeStats && message.infoTypeStats.length) {
                                    object.infoTypeStats = [];
                                    for (var j = 0; j < message.infoTypeStats.length; ++j)
                                        object.infoTypeStats[j] = $root.google.privacy.dlp.v2.InfoTypeStats.toObject(message.infoTypeStats[j], options);
                                }
                                if (message.hybridStats != null && message.hasOwnProperty("hybridStats"))
                                    object.hybridStats = $root.google.privacy.dlp.v2.HybridInspectStatistics.toObject(message.hybridStats, options);
                                return object;
                            };
    
                            /**
                             * Converts this Result to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.InspectDataSourceDetails.Result
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Result.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Result;
                        })();
    
                        return InspectDataSourceDetails;
                    })();
    
                    v2.HybridInspectStatistics = (function() {
    
                        /**
                         * Properties of a HybridInspectStatistics.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridInspectStatistics
                         * @property {number|Long|null} [processedCount] HybridInspectStatistics processedCount
                         * @property {number|Long|null} [abortedCount] HybridInspectStatistics abortedCount
                         * @property {number|Long|null} [pendingCount] HybridInspectStatistics pendingCount
                         */
    
                        /**
                         * Constructs a new HybridInspectStatistics.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridInspectStatistics.
                         * @implements IHybridInspectStatistics
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridInspectStatistics=} [properties] Properties to set
                         */
                        function HybridInspectStatistics(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HybridInspectStatistics processedCount.
                         * @member {number|Long} processedCount
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @instance
                         */
                        HybridInspectStatistics.prototype.processedCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HybridInspectStatistics abortedCount.
                         * @member {number|Long} abortedCount
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @instance
                         */
                        HybridInspectStatistics.prototype.abortedCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HybridInspectStatistics pendingCount.
                         * @member {number|Long} pendingCount
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @instance
                         */
                        HybridInspectStatistics.prototype.pendingCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new HybridInspectStatistics instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectStatistics=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridInspectStatistics} HybridInspectStatistics instance
                         */
                        HybridInspectStatistics.create = function create(properties) {
                            return new HybridInspectStatistics(properties);
                        };
    
                        /**
                         * Encodes the specified HybridInspectStatistics message. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectStatistics.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectStatistics} message HybridInspectStatistics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectStatistics.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.processedCount != null && Object.hasOwnProperty.call(message, "processedCount"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.processedCount);
                            if (message.abortedCount != null && Object.hasOwnProperty.call(message, "abortedCount"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.abortedCount);
                            if (message.pendingCount != null && Object.hasOwnProperty.call(message, "pendingCount"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.pendingCount);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridInspectStatistics message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectStatistics.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectStatistics} message HybridInspectStatistics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectStatistics.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridInspectStatistics message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridInspectStatistics} HybridInspectStatistics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectStatistics.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridInspectStatistics();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.processedCount = reader.int64();
                                    break;
                                case 2:
                                    message.abortedCount = reader.int64();
                                    break;
                                case 3:
                                    message.pendingCount = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridInspectStatistics message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridInspectStatistics} HybridInspectStatistics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectStatistics.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridInspectStatistics message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridInspectStatistics.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.processedCount != null && message.hasOwnProperty("processedCount"))
                                if (!$util.isInteger(message.processedCount) && !(message.processedCount && $util.isInteger(message.processedCount.low) && $util.isInteger(message.processedCount.high)))
                                    return "processedCount: integer|Long expected";
                            if (message.abortedCount != null && message.hasOwnProperty("abortedCount"))
                                if (!$util.isInteger(message.abortedCount) && !(message.abortedCount && $util.isInteger(message.abortedCount.low) && $util.isInteger(message.abortedCount.high)))
                                    return "abortedCount: integer|Long expected";
                            if (message.pendingCount != null && message.hasOwnProperty("pendingCount"))
                                if (!$util.isInteger(message.pendingCount) && !(message.pendingCount && $util.isInteger(message.pendingCount.low) && $util.isInteger(message.pendingCount.high)))
                                    return "pendingCount: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a HybridInspectStatistics message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridInspectStatistics} HybridInspectStatistics
                         */
                        HybridInspectStatistics.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridInspectStatistics)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.HybridInspectStatistics();
                            if (object.processedCount != null)
                                if ($util.Long)
                                    (message.processedCount = $util.Long.fromValue(object.processedCount)).unsigned = false;
                                else if (typeof object.processedCount === "string")
                                    message.processedCount = parseInt(object.processedCount, 10);
                                else if (typeof object.processedCount === "number")
                                    message.processedCount = object.processedCount;
                                else if (typeof object.processedCount === "object")
                                    message.processedCount = new $util.LongBits(object.processedCount.low >>> 0, object.processedCount.high >>> 0).toNumber();
                            if (object.abortedCount != null)
                                if ($util.Long)
                                    (message.abortedCount = $util.Long.fromValue(object.abortedCount)).unsigned = false;
                                else if (typeof object.abortedCount === "string")
                                    message.abortedCount = parseInt(object.abortedCount, 10);
                                else if (typeof object.abortedCount === "number")
                                    message.abortedCount = object.abortedCount;
                                else if (typeof object.abortedCount === "object")
                                    message.abortedCount = new $util.LongBits(object.abortedCount.low >>> 0, object.abortedCount.high >>> 0).toNumber();
                            if (object.pendingCount != null)
                                if ($util.Long)
                                    (message.pendingCount = $util.Long.fromValue(object.pendingCount)).unsigned = false;
                                else if (typeof object.pendingCount === "string")
                                    message.pendingCount = parseInt(object.pendingCount, 10);
                                else if (typeof object.pendingCount === "number")
                                    message.pendingCount = object.pendingCount;
                                else if (typeof object.pendingCount === "object")
                                    message.pendingCount = new $util.LongBits(object.pendingCount.low >>> 0, object.pendingCount.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HybridInspectStatistics message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @static
                         * @param {google.privacy.dlp.v2.HybridInspectStatistics} message HybridInspectStatistics
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridInspectStatistics.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.processedCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.processedCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.abortedCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.abortedCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.pendingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pendingCount = options.longs === String ? "0" : 0;
                            }
                            if (message.processedCount != null && message.hasOwnProperty("processedCount"))
                                if (typeof message.processedCount === "number")
                                    object.processedCount = options.longs === String ? String(message.processedCount) : message.processedCount;
                                else
                                    object.processedCount = options.longs === String ? $util.Long.prototype.toString.call(message.processedCount) : options.longs === Number ? new $util.LongBits(message.processedCount.low >>> 0, message.processedCount.high >>> 0).toNumber() : message.processedCount;
                            if (message.abortedCount != null && message.hasOwnProperty("abortedCount"))
                                if (typeof message.abortedCount === "number")
                                    object.abortedCount = options.longs === String ? String(message.abortedCount) : message.abortedCount;
                                else
                                    object.abortedCount = options.longs === String ? $util.Long.prototype.toString.call(message.abortedCount) : options.longs === Number ? new $util.LongBits(message.abortedCount.low >>> 0, message.abortedCount.high >>> 0).toNumber() : message.abortedCount;
                            if (message.pendingCount != null && message.hasOwnProperty("pendingCount"))
                                if (typeof message.pendingCount === "number")
                                    object.pendingCount = options.longs === String ? String(message.pendingCount) : message.pendingCount;
                                else
                                    object.pendingCount = options.longs === String ? $util.Long.prototype.toString.call(message.pendingCount) : options.longs === Number ? new $util.LongBits(message.pendingCount.low >>> 0, message.pendingCount.high >>> 0).toNumber() : message.pendingCount;
                            return object;
                        };
    
                        /**
                         * Converts this HybridInspectStatistics to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridInspectStatistics
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridInspectStatistics.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridInspectStatistics;
                    })();
    
                    v2.InfoTypeDescription = (function() {
    
                        /**
                         * Properties of an InfoTypeDescription.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInfoTypeDescription
                         * @property {string|null} [name] InfoTypeDescription name
                         * @property {string|null} [displayName] InfoTypeDescription displayName
                         * @property {Array.<google.privacy.dlp.v2.InfoTypeSupportedBy>|null} [supportedBy] InfoTypeDescription supportedBy
                         * @property {string|null} [description] InfoTypeDescription description
                         */
    
                        /**
                         * Constructs a new InfoTypeDescription.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InfoTypeDescription.
                         * @implements IInfoTypeDescription
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInfoTypeDescription=} [properties] Properties to set
                         */
                        function InfoTypeDescription(properties) {
                            this.supportedBy = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InfoTypeDescription name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @instance
                         */
                        InfoTypeDescription.prototype.name = "";
    
                        /**
                         * InfoTypeDescription displayName.
                         * @member {string} displayName
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @instance
                         */
                        InfoTypeDescription.prototype.displayName = "";
    
                        /**
                         * InfoTypeDescription supportedBy.
                         * @member {Array.<google.privacy.dlp.v2.InfoTypeSupportedBy>} supportedBy
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @instance
                         */
                        InfoTypeDescription.prototype.supportedBy = $util.emptyArray;
    
                        /**
                         * InfoTypeDescription description.
                         * @member {string} description
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @instance
                         */
                        InfoTypeDescription.prototype.description = "";
    
                        /**
                         * Creates a new InfoTypeDescription instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeDescription=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InfoTypeDescription} InfoTypeDescription instance
                         */
                        InfoTypeDescription.create = function create(properties) {
                            return new InfoTypeDescription(properties);
                        };
    
                        /**
                         * Encodes the specified InfoTypeDescription message. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeDescription.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeDescription} message InfoTypeDescription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoTypeDescription.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.supportedBy != null && message.supportedBy.length) {
                                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                                for (var i = 0; i < message.supportedBy.length; ++i)
                                    writer.int32(message.supportedBy[i]);
                                writer.ldelim();
                            }
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InfoTypeDescription message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeDescription.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeDescription} message InfoTypeDescription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoTypeDescription.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InfoTypeDescription message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InfoTypeDescription} InfoTypeDescription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoTypeDescription.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InfoTypeDescription();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.displayName = reader.string();
                                    break;
                                case 3:
                                    if (!(message.supportedBy && message.supportedBy.length))
                                        message.supportedBy = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.supportedBy.push(reader.int32());
                                    } else
                                        message.supportedBy.push(reader.int32());
                                    break;
                                case 4:
                                    message.description = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InfoTypeDescription message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InfoTypeDescription} InfoTypeDescription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoTypeDescription.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InfoTypeDescription message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InfoTypeDescription.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.supportedBy != null && message.hasOwnProperty("supportedBy")) {
                                if (!Array.isArray(message.supportedBy))
                                    return "supportedBy: array expected";
                                for (var i = 0; i < message.supportedBy.length; ++i)
                                    switch (message.supportedBy[i]) {
                                    default:
                                        return "supportedBy: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an InfoTypeDescription message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InfoTypeDescription} InfoTypeDescription
                         */
                        InfoTypeDescription.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InfoTypeDescription)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InfoTypeDescription();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.supportedBy) {
                                if (!Array.isArray(object.supportedBy))
                                    throw TypeError(".google.privacy.dlp.v2.InfoTypeDescription.supportedBy: array expected");
                                message.supportedBy = [];
                                for (var i = 0; i < object.supportedBy.length; ++i)
                                    switch (object.supportedBy[i]) {
                                    default:
                                    case "ENUM_TYPE_UNSPECIFIED":
                                    case 0:
                                        message.supportedBy[i] = 0;
                                        break;
                                    case "INSPECT":
                                    case 1:
                                        message.supportedBy[i] = 1;
                                        break;
                                    case "RISK_ANALYSIS":
                                    case 2:
                                        message.supportedBy[i] = 2;
                                        break;
                                    }
                            }
                            if (object.description != null)
                                message.description = String(object.description);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InfoTypeDescription message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @static
                         * @param {google.privacy.dlp.v2.InfoTypeDescription} message InfoTypeDescription
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InfoTypeDescription.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.supportedBy = [];
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.description = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.supportedBy && message.supportedBy.length) {
                                object.supportedBy = [];
                                for (var j = 0; j < message.supportedBy.length; ++j)
                                    object.supportedBy[j] = options.enums === String ? $root.google.privacy.dlp.v2.InfoTypeSupportedBy[message.supportedBy[j]] : message.supportedBy[j];
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            return object;
                        };
    
                        /**
                         * Converts this InfoTypeDescription to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InfoTypeDescription
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InfoTypeDescription.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InfoTypeDescription;
                    })();
    
                    v2.ListInfoTypesRequest = (function() {
    
                        /**
                         * Properties of a ListInfoTypesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListInfoTypesRequest
                         * @property {string|null} [parent] ListInfoTypesRequest parent
                         * @property {string|null} [languageCode] ListInfoTypesRequest languageCode
                         * @property {string|null} [filter] ListInfoTypesRequest filter
                         * @property {string|null} [locationId] ListInfoTypesRequest locationId
                         */
    
                        /**
                         * Constructs a new ListInfoTypesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListInfoTypesRequest.
                         * @implements IListInfoTypesRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListInfoTypesRequest=} [properties] Properties to set
                         */
                        function ListInfoTypesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListInfoTypesRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @instance
                         */
                        ListInfoTypesRequest.prototype.parent = "";
    
                        /**
                         * ListInfoTypesRequest languageCode.
                         * @member {string} languageCode
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @instance
                         */
                        ListInfoTypesRequest.prototype.languageCode = "";
    
                        /**
                         * ListInfoTypesRequest filter.
                         * @member {string} filter
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @instance
                         */
                        ListInfoTypesRequest.prototype.filter = "";
    
                        /**
                         * ListInfoTypesRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @instance
                         */
                        ListInfoTypesRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ListInfoTypesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListInfoTypesRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListInfoTypesRequest} ListInfoTypesRequest instance
                         */
                        ListInfoTypesRequest.create = function create(properties) {
                            return new ListInfoTypesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListInfoTypesRequest message. Does not implicitly {@link google.privacy.dlp.v2.ListInfoTypesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListInfoTypesRequest} message ListInfoTypesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInfoTypesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageCode);
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.locationId);
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.parent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListInfoTypesRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListInfoTypesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListInfoTypesRequest} message ListInfoTypesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInfoTypesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListInfoTypesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListInfoTypesRequest} ListInfoTypesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInfoTypesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListInfoTypesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 4:
                                    message.parent = reader.string();
                                    break;
                                case 1:
                                    message.languageCode = reader.string();
                                    break;
                                case 2:
                                    message.filter = reader.string();
                                    break;
                                case 3:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListInfoTypesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListInfoTypesRequest} ListInfoTypesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInfoTypesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListInfoTypesRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListInfoTypesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListInfoTypesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListInfoTypesRequest} ListInfoTypesRequest
                         */
                        ListInfoTypesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListInfoTypesRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListInfoTypesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListInfoTypesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ListInfoTypesRequest} message ListInfoTypesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListInfoTypesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.languageCode = "";
                                object.filter = "";
                                object.locationId = "";
                                object.parent = "";
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            return object;
                        };
    
                        /**
                         * Converts this ListInfoTypesRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListInfoTypesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListInfoTypesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListInfoTypesRequest;
                    })();
    
                    v2.ListInfoTypesResponse = (function() {
    
                        /**
                         * Properties of a ListInfoTypesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListInfoTypesResponse
                         * @property {Array.<google.privacy.dlp.v2.IInfoTypeDescription>|null} [infoTypes] ListInfoTypesResponse infoTypes
                         */
    
                        /**
                         * Constructs a new ListInfoTypesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListInfoTypesResponse.
                         * @implements IListInfoTypesResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListInfoTypesResponse=} [properties] Properties to set
                         */
                        function ListInfoTypesResponse(properties) {
                            this.infoTypes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListInfoTypesResponse infoTypes.
                         * @member {Array.<google.privacy.dlp.v2.IInfoTypeDescription>} infoTypes
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @instance
                         */
                        ListInfoTypesResponse.prototype.infoTypes = $util.emptyArray;
    
                        /**
                         * Creates a new ListInfoTypesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListInfoTypesResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListInfoTypesResponse} ListInfoTypesResponse instance
                         */
                        ListInfoTypesResponse.create = function create(properties) {
                            return new ListInfoTypesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListInfoTypesResponse message. Does not implicitly {@link google.privacy.dlp.v2.ListInfoTypesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListInfoTypesResponse} message ListInfoTypesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInfoTypesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoTypes != null && message.infoTypes.length)
                                for (var i = 0; i < message.infoTypes.length; ++i)
                                    $root.google.privacy.dlp.v2.InfoTypeDescription.encode(message.infoTypes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListInfoTypesResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListInfoTypesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListInfoTypesResponse} message ListInfoTypesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInfoTypesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListInfoTypesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListInfoTypesResponse} ListInfoTypesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInfoTypesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListInfoTypesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.infoTypes && message.infoTypes.length))
                                        message.infoTypes = [];
                                    message.infoTypes.push($root.google.privacy.dlp.v2.InfoTypeDescription.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListInfoTypesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListInfoTypesResponse} ListInfoTypesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInfoTypesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListInfoTypesResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListInfoTypesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.infoTypes != null && message.hasOwnProperty("infoTypes")) {
                                if (!Array.isArray(message.infoTypes))
                                    return "infoTypes: array expected";
                                for (var i = 0; i < message.infoTypes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InfoTypeDescription.verify(message.infoTypes[i]);
                                    if (error)
                                        return "infoTypes." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ListInfoTypesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListInfoTypesResponse} ListInfoTypesResponse
                         */
                        ListInfoTypesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListInfoTypesResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListInfoTypesResponse();
                            if (object.infoTypes) {
                                if (!Array.isArray(object.infoTypes))
                                    throw TypeError(".google.privacy.dlp.v2.ListInfoTypesResponse.infoTypes: array expected");
                                message.infoTypes = [];
                                for (var i = 0; i < object.infoTypes.length; ++i) {
                                    if (typeof object.infoTypes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ListInfoTypesResponse.infoTypes: object expected");
                                    message.infoTypes[i] = $root.google.privacy.dlp.v2.InfoTypeDescription.fromObject(object.infoTypes[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListInfoTypesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ListInfoTypesResponse} message ListInfoTypesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListInfoTypesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.infoTypes = [];
                            if (message.infoTypes && message.infoTypes.length) {
                                object.infoTypes = [];
                                for (var j = 0; j < message.infoTypes.length; ++j)
                                    object.infoTypes[j] = $root.google.privacy.dlp.v2.InfoTypeDescription.toObject(message.infoTypes[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ListInfoTypesResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListInfoTypesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListInfoTypesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListInfoTypesResponse;
                    })();
    
                    v2.RiskAnalysisJobConfig = (function() {
    
                        /**
                         * Properties of a RiskAnalysisJobConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRiskAnalysisJobConfig
                         * @property {google.privacy.dlp.v2.IPrivacyMetric|null} [privacyMetric] RiskAnalysisJobConfig privacyMetric
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [sourceTable] RiskAnalysisJobConfig sourceTable
                         * @property {Array.<google.privacy.dlp.v2.IAction>|null} [actions] RiskAnalysisJobConfig actions
                         */
    
                        /**
                         * Constructs a new RiskAnalysisJobConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RiskAnalysisJobConfig.
                         * @implements IRiskAnalysisJobConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRiskAnalysisJobConfig=} [properties] Properties to set
                         */
                        function RiskAnalysisJobConfig(properties) {
                            this.actions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RiskAnalysisJobConfig privacyMetric.
                         * @member {google.privacy.dlp.v2.IPrivacyMetric|null|undefined} privacyMetric
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @instance
                         */
                        RiskAnalysisJobConfig.prototype.privacyMetric = null;
    
                        /**
                         * RiskAnalysisJobConfig sourceTable.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} sourceTable
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @instance
                         */
                        RiskAnalysisJobConfig.prototype.sourceTable = null;
    
                        /**
                         * RiskAnalysisJobConfig actions.
                         * @member {Array.<google.privacy.dlp.v2.IAction>} actions
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @instance
                         */
                        RiskAnalysisJobConfig.prototype.actions = $util.emptyArray;
    
                        /**
                         * Creates a new RiskAnalysisJobConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IRiskAnalysisJobConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RiskAnalysisJobConfig} RiskAnalysisJobConfig instance
                         */
                        RiskAnalysisJobConfig.create = function create(properties) {
                            return new RiskAnalysisJobConfig(properties);
                        };
    
                        /**
                         * Encodes the specified RiskAnalysisJobConfig message. Does not implicitly {@link google.privacy.dlp.v2.RiskAnalysisJobConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IRiskAnalysisJobConfig} message RiskAnalysisJobConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RiskAnalysisJobConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.privacyMetric != null && Object.hasOwnProperty.call(message, "privacyMetric"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.encode(message.privacyMetric, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.sourceTable != null && Object.hasOwnProperty.call(message, "sourceTable"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.sourceTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.actions != null && message.actions.length)
                                for (var i = 0; i < message.actions.length; ++i)
                                    $root.google.privacy.dlp.v2.Action.encode(message.actions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RiskAnalysisJobConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RiskAnalysisJobConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IRiskAnalysisJobConfig} message RiskAnalysisJobConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RiskAnalysisJobConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RiskAnalysisJobConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RiskAnalysisJobConfig} RiskAnalysisJobConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RiskAnalysisJobConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RiskAnalysisJobConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.privacyMetric = $root.google.privacy.dlp.v2.PrivacyMetric.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.sourceTable = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    if (!(message.actions && message.actions.length))
                                        message.actions = [];
                                    message.actions.push($root.google.privacy.dlp.v2.Action.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RiskAnalysisJobConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RiskAnalysisJobConfig} RiskAnalysisJobConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RiskAnalysisJobConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RiskAnalysisJobConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RiskAnalysisJobConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.privacyMetric != null && message.hasOwnProperty("privacyMetric")) {
                                var error = $root.google.privacy.dlp.v2.PrivacyMetric.verify(message.privacyMetric);
                                if (error)
                                    return "privacyMetric." + error;
                            }
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable")) {
                                var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.sourceTable);
                                if (error)
                                    return "sourceTable." + error;
                            }
                            if (message.actions != null && message.hasOwnProperty("actions")) {
                                if (!Array.isArray(message.actions))
                                    return "actions: array expected";
                                for (var i = 0; i < message.actions.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Action.verify(message.actions[i]);
                                    if (error)
                                        return "actions." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RiskAnalysisJobConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RiskAnalysisJobConfig} RiskAnalysisJobConfig
                         */
                        RiskAnalysisJobConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RiskAnalysisJobConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RiskAnalysisJobConfig();
                            if (object.privacyMetric != null) {
                                if (typeof object.privacyMetric !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RiskAnalysisJobConfig.privacyMetric: object expected");
                                message.privacyMetric = $root.google.privacy.dlp.v2.PrivacyMetric.fromObject(object.privacyMetric);
                            }
                            if (object.sourceTable != null) {
                                if (typeof object.sourceTable !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RiskAnalysisJobConfig.sourceTable: object expected");
                                message.sourceTable = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.sourceTable);
                            }
                            if (object.actions) {
                                if (!Array.isArray(object.actions))
                                    throw TypeError(".google.privacy.dlp.v2.RiskAnalysisJobConfig.actions: array expected");
                                message.actions = [];
                                for (var i = 0; i < object.actions.length; ++i) {
                                    if (typeof object.actions[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RiskAnalysisJobConfig.actions: object expected");
                                    message.actions[i] = $root.google.privacy.dlp.v2.Action.fromObject(object.actions[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RiskAnalysisJobConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.RiskAnalysisJobConfig} message RiskAnalysisJobConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RiskAnalysisJobConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.actions = [];
                            if (options.defaults) {
                                object.privacyMetric = null;
                                object.sourceTable = null;
                            }
                            if (message.privacyMetric != null && message.hasOwnProperty("privacyMetric"))
                                object.privacyMetric = $root.google.privacy.dlp.v2.PrivacyMetric.toObject(message.privacyMetric, options);
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                object.sourceTable = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.sourceTable, options);
                            if (message.actions && message.actions.length) {
                                object.actions = [];
                                for (var j = 0; j < message.actions.length; ++j)
                                    object.actions[j] = $root.google.privacy.dlp.v2.Action.toObject(message.actions[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this RiskAnalysisJobConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RiskAnalysisJobConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RiskAnalysisJobConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RiskAnalysisJobConfig;
                    })();
    
                    v2.QuasiId = (function() {
    
                        /**
                         * Properties of a QuasiId.
                         * @memberof google.privacy.dlp.v2
                         * @interface IQuasiId
                         * @property {google.privacy.dlp.v2.IFieldId|null} [field] QuasiId field
                         * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] QuasiId infoType
                         * @property {string|null} [customTag] QuasiId customTag
                         * @property {google.protobuf.IEmpty|null} [inferred] QuasiId inferred
                         */
    
                        /**
                         * Constructs a new QuasiId.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a QuasiId.
                         * @implements IQuasiId
                         * @constructor
                         * @param {google.privacy.dlp.v2.IQuasiId=} [properties] Properties to set
                         */
                        function QuasiId(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QuasiId field.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @instance
                         */
                        QuasiId.prototype.field = null;
    
                        /**
                         * QuasiId infoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @instance
                         */
                        QuasiId.prototype.infoType = null;
    
                        /**
                         * QuasiId customTag.
                         * @member {string} customTag
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @instance
                         */
                        QuasiId.prototype.customTag = "";
    
                        /**
                         * QuasiId inferred.
                         * @member {google.protobuf.IEmpty|null|undefined} inferred
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @instance
                         */
                        QuasiId.prototype.inferred = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * QuasiId tag.
                         * @member {"infoType"|"customTag"|"inferred"|undefined} tag
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @instance
                         */
                        Object.defineProperty(QuasiId.prototype, "tag", {
                            get: $util.oneOfGetter($oneOfFields = ["infoType", "customTag", "inferred"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new QuasiId instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {google.privacy.dlp.v2.IQuasiId=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.QuasiId} QuasiId instance
                         */
                        QuasiId.create = function create(properties) {
                            return new QuasiId(properties);
                        };
    
                        /**
                         * Encodes the specified QuasiId message. Does not implicitly {@link google.privacy.dlp.v2.QuasiId.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {google.privacy.dlp.v2.IQuasiId} message QuasiId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuasiId.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.customTag != null && Object.hasOwnProperty.call(message, "customTag"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.customTag);
                            if (message.inferred != null && Object.hasOwnProperty.call(message, "inferred"))
                                $root.google.protobuf.Empty.encode(message.inferred, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QuasiId message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.QuasiId.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {google.privacy.dlp.v2.IQuasiId} message QuasiId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuasiId.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QuasiId message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.QuasiId} QuasiId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuasiId.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.QuasiId();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.customTag = reader.string();
                                    break;
                                case 4:
                                    message.inferred = $root.google.protobuf.Empty.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QuasiId message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.QuasiId} QuasiId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuasiId.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QuasiId message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QuasiId.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.field != null && message.hasOwnProperty("field")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                if (error)
                                    return "field." + error;
                            }
                            if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                properties.tag = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                    if (error)
                                        return "infoType." + error;
                                }
                            }
                            if (message.customTag != null && message.hasOwnProperty("customTag")) {
                                if (properties.tag === 1)
                                    return "tag: multiple values";
                                properties.tag = 1;
                                if (!$util.isString(message.customTag))
                                    return "customTag: string expected";
                            }
                            if (message.inferred != null && message.hasOwnProperty("inferred")) {
                                if (properties.tag === 1)
                                    return "tag: multiple values";
                                properties.tag = 1;
                                {
                                    var error = $root.google.protobuf.Empty.verify(message.inferred);
                                    if (error)
                                        return "inferred." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QuasiId message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.QuasiId} QuasiId
                         */
                        QuasiId.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.QuasiId)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.QuasiId();
                            if (object.field != null) {
                                if (typeof object.field !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.QuasiId.field: object expected");
                                message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                            }
                            if (object.infoType != null) {
                                if (typeof object.infoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.QuasiId.infoType: object expected");
                                message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                            }
                            if (object.customTag != null)
                                message.customTag = String(object.customTag);
                            if (object.inferred != null) {
                                if (typeof object.inferred !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.QuasiId.inferred: object expected");
                                message.inferred = $root.google.protobuf.Empty.fromObject(object.inferred);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QuasiId message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @static
                         * @param {google.privacy.dlp.v2.QuasiId} message QuasiId
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QuasiId.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.field = null;
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                            if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                                if (options.oneofs)
                                    object.tag = "infoType";
                            }
                            if (message.customTag != null && message.hasOwnProperty("customTag")) {
                                object.customTag = message.customTag;
                                if (options.oneofs)
                                    object.tag = "customTag";
                            }
                            if (message.inferred != null && message.hasOwnProperty("inferred")) {
                                object.inferred = $root.google.protobuf.Empty.toObject(message.inferred, options);
                                if (options.oneofs)
                                    object.tag = "inferred";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this QuasiId to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.QuasiId
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QuasiId.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QuasiId;
                    })();
    
                    v2.StatisticalTable = (function() {
    
                        /**
                         * Properties of a StatisticalTable.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStatisticalTable
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [table] StatisticalTable table
                         * @property {Array.<google.privacy.dlp.v2.StatisticalTable.IQuasiIdentifierField>|null} [quasiIds] StatisticalTable quasiIds
                         * @property {google.privacy.dlp.v2.IFieldId|null} [relativeFrequency] StatisticalTable relativeFrequency
                         */
    
                        /**
                         * Constructs a new StatisticalTable.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StatisticalTable.
                         * @implements IStatisticalTable
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStatisticalTable=} [properties] Properties to set
                         */
                        function StatisticalTable(properties) {
                            this.quasiIds = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StatisticalTable table.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} table
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @instance
                         */
                        StatisticalTable.prototype.table = null;
    
                        /**
                         * StatisticalTable quasiIds.
                         * @member {Array.<google.privacy.dlp.v2.StatisticalTable.IQuasiIdentifierField>} quasiIds
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @instance
                         */
                        StatisticalTable.prototype.quasiIds = $util.emptyArray;
    
                        /**
                         * StatisticalTable relativeFrequency.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} relativeFrequency
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @instance
                         */
                        StatisticalTable.prototype.relativeFrequency = null;
    
                        /**
                         * Creates a new StatisticalTable instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {google.privacy.dlp.v2.IStatisticalTable=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StatisticalTable} StatisticalTable instance
                         */
                        StatisticalTable.create = function create(properties) {
                            return new StatisticalTable(properties);
                        };
    
                        /**
                         * Encodes the specified StatisticalTable message. Does not implicitly {@link google.privacy.dlp.v2.StatisticalTable.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {google.privacy.dlp.v2.IStatisticalTable} message StatisticalTable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StatisticalTable.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.quasiIds != null && message.quasiIds.length)
                                for (var i = 0; i < message.quasiIds.length; ++i)
                                    $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.encode(message.quasiIds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.relativeFrequency != null && Object.hasOwnProperty.call(message, "relativeFrequency"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.relativeFrequency, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.table, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StatisticalTable message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StatisticalTable.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {google.privacy.dlp.v2.IStatisticalTable} message StatisticalTable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StatisticalTable.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StatisticalTable message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StatisticalTable} StatisticalTable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StatisticalTable.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StatisticalTable();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3:
                                    message.table = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 1:
                                    if (!(message.quasiIds && message.quasiIds.length))
                                        message.quasiIds = [];
                                    message.quasiIds.push($root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.relativeFrequency = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StatisticalTable message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StatisticalTable} StatisticalTable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StatisticalTable.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StatisticalTable message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StatisticalTable.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.table != null && message.hasOwnProperty("table")) {
                                var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.table);
                                if (error)
                                    return "table." + error;
                            }
                            if (message.quasiIds != null && message.hasOwnProperty("quasiIds")) {
                                if (!Array.isArray(message.quasiIds))
                                    return "quasiIds: array expected";
                                for (var i = 0; i < message.quasiIds.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.verify(message.quasiIds[i]);
                                    if (error)
                                        return "quasiIds." + error;
                                }
                            }
                            if (message.relativeFrequency != null && message.hasOwnProperty("relativeFrequency")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.relativeFrequency);
                                if (error)
                                    return "relativeFrequency." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StatisticalTable message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StatisticalTable} StatisticalTable
                         */
                        StatisticalTable.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StatisticalTable)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StatisticalTable();
                            if (object.table != null) {
                                if (typeof object.table !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StatisticalTable.table: object expected");
                                message.table = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.table);
                            }
                            if (object.quasiIds) {
                                if (!Array.isArray(object.quasiIds))
                                    throw TypeError(".google.privacy.dlp.v2.StatisticalTable.quasiIds: array expected");
                                message.quasiIds = [];
                                for (var i = 0; i < object.quasiIds.length; ++i) {
                                    if (typeof object.quasiIds[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StatisticalTable.quasiIds: object expected");
                                    message.quasiIds[i] = $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.fromObject(object.quasiIds[i]);
                                }
                            }
                            if (object.relativeFrequency != null) {
                                if (typeof object.relativeFrequency !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StatisticalTable.relativeFrequency: object expected");
                                message.relativeFrequency = $root.google.privacy.dlp.v2.FieldId.fromObject(object.relativeFrequency);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StatisticalTable message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @static
                         * @param {google.privacy.dlp.v2.StatisticalTable} message StatisticalTable
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StatisticalTable.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.quasiIds = [];
                            if (options.defaults) {
                                object.relativeFrequency = null;
                                object.table = null;
                            }
                            if (message.quasiIds && message.quasiIds.length) {
                                object.quasiIds = [];
                                for (var j = 0; j < message.quasiIds.length; ++j)
                                    object.quasiIds[j] = $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.toObject(message.quasiIds[j], options);
                            }
                            if (message.relativeFrequency != null && message.hasOwnProperty("relativeFrequency"))
                                object.relativeFrequency = $root.google.privacy.dlp.v2.FieldId.toObject(message.relativeFrequency, options);
                            if (message.table != null && message.hasOwnProperty("table"))
                                object.table = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.table, options);
                            return object;
                        };
    
                        /**
                         * Converts this StatisticalTable to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StatisticalTable
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StatisticalTable.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        StatisticalTable.QuasiIdentifierField = (function() {
    
                            /**
                             * Properties of a QuasiIdentifierField.
                             * @memberof google.privacy.dlp.v2.StatisticalTable
                             * @interface IQuasiIdentifierField
                             * @property {google.privacy.dlp.v2.IFieldId|null} [field] QuasiIdentifierField field
                             * @property {string|null} [customTag] QuasiIdentifierField customTag
                             */
    
                            /**
                             * Constructs a new QuasiIdentifierField.
                             * @memberof google.privacy.dlp.v2.StatisticalTable
                             * @classdesc Represents a QuasiIdentifierField.
                             * @implements IQuasiIdentifierField
                             * @constructor
                             * @param {google.privacy.dlp.v2.StatisticalTable.IQuasiIdentifierField=} [properties] Properties to set
                             */
                            function QuasiIdentifierField(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * QuasiIdentifierField field.
                             * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @instance
                             */
                            QuasiIdentifierField.prototype.field = null;
    
                            /**
                             * QuasiIdentifierField customTag.
                             * @member {string} customTag
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @instance
                             */
                            QuasiIdentifierField.prototype.customTag = "";
    
                            /**
                             * Creates a new QuasiIdentifierField instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {google.privacy.dlp.v2.StatisticalTable.IQuasiIdentifierField=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField} QuasiIdentifierField instance
                             */
                            QuasiIdentifierField.create = function create(properties) {
                                return new QuasiIdentifierField(properties);
                            };
    
                            /**
                             * Encodes the specified QuasiIdentifierField message. Does not implicitly {@link google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {google.privacy.dlp.v2.StatisticalTable.IQuasiIdentifierField} message QuasiIdentifierField message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            QuasiIdentifierField.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.customTag != null && Object.hasOwnProperty.call(message, "customTag"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.customTag);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified QuasiIdentifierField message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {google.privacy.dlp.v2.StatisticalTable.IQuasiIdentifierField} message QuasiIdentifierField message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            QuasiIdentifierField.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a QuasiIdentifierField message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField} QuasiIdentifierField
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            QuasiIdentifierField.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.customTag = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a QuasiIdentifierField message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField} QuasiIdentifierField
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            QuasiIdentifierField.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a QuasiIdentifierField message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            QuasiIdentifierField.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.field != null && message.hasOwnProperty("field")) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                    if (error)
                                        return "field." + error;
                                }
                                if (message.customTag != null && message.hasOwnProperty("customTag"))
                                    if (!$util.isString(message.customTag))
                                        return "customTag: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a QuasiIdentifierField message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField} QuasiIdentifierField
                             */
                            QuasiIdentifierField.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField();
                                if (object.field != null) {
                                    if (typeof object.field !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.field: object expected");
                                    message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                                }
                                if (object.customTag != null)
                                    message.customTag = String(object.customTag);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a QuasiIdentifierField message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @static
                             * @param {google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField} message QuasiIdentifierField
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            QuasiIdentifierField.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.field = null;
                                    object.customTag = "";
                                }
                                if (message.field != null && message.hasOwnProperty("field"))
                                    object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                                if (message.customTag != null && message.hasOwnProperty("customTag"))
                                    object.customTag = message.customTag;
                                return object;
                            };
    
                            /**
                             * Converts this QuasiIdentifierField to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            QuasiIdentifierField.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return QuasiIdentifierField;
                        })();
    
                        return StatisticalTable;
                    })();
    
                    v2.PrivacyMetric = (function() {
    
                        /**
                         * Properties of a PrivacyMetric.
                         * @memberof google.privacy.dlp.v2
                         * @interface IPrivacyMetric
                         * @property {google.privacy.dlp.v2.PrivacyMetric.INumericalStatsConfig|null} [numericalStatsConfig] PrivacyMetric numericalStatsConfig
                         * @property {google.privacy.dlp.v2.PrivacyMetric.ICategoricalStatsConfig|null} [categoricalStatsConfig] PrivacyMetric categoricalStatsConfig
                         * @property {google.privacy.dlp.v2.PrivacyMetric.IKAnonymityConfig|null} [kAnonymityConfig] PrivacyMetric kAnonymityConfig
                         * @property {google.privacy.dlp.v2.PrivacyMetric.ILDiversityConfig|null} [lDiversityConfig] PrivacyMetric lDiversityConfig
                         * @property {google.privacy.dlp.v2.PrivacyMetric.IKMapEstimationConfig|null} [kMapEstimationConfig] PrivacyMetric kMapEstimationConfig
                         * @property {google.privacy.dlp.v2.PrivacyMetric.IDeltaPresenceEstimationConfig|null} [deltaPresenceEstimationConfig] PrivacyMetric deltaPresenceEstimationConfig
                         */
    
                        /**
                         * Constructs a new PrivacyMetric.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a PrivacyMetric.
                         * @implements IPrivacyMetric
                         * @constructor
                         * @param {google.privacy.dlp.v2.IPrivacyMetric=} [properties] Properties to set
                         */
                        function PrivacyMetric(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PrivacyMetric numericalStatsConfig.
                         * @member {google.privacy.dlp.v2.PrivacyMetric.INumericalStatsConfig|null|undefined} numericalStatsConfig
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        PrivacyMetric.prototype.numericalStatsConfig = null;
    
                        /**
                         * PrivacyMetric categoricalStatsConfig.
                         * @member {google.privacy.dlp.v2.PrivacyMetric.ICategoricalStatsConfig|null|undefined} categoricalStatsConfig
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        PrivacyMetric.prototype.categoricalStatsConfig = null;
    
                        /**
                         * PrivacyMetric kAnonymityConfig.
                         * @member {google.privacy.dlp.v2.PrivacyMetric.IKAnonymityConfig|null|undefined} kAnonymityConfig
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        PrivacyMetric.prototype.kAnonymityConfig = null;
    
                        /**
                         * PrivacyMetric lDiversityConfig.
                         * @member {google.privacy.dlp.v2.PrivacyMetric.ILDiversityConfig|null|undefined} lDiversityConfig
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        PrivacyMetric.prototype.lDiversityConfig = null;
    
                        /**
                         * PrivacyMetric kMapEstimationConfig.
                         * @member {google.privacy.dlp.v2.PrivacyMetric.IKMapEstimationConfig|null|undefined} kMapEstimationConfig
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        PrivacyMetric.prototype.kMapEstimationConfig = null;
    
                        /**
                         * PrivacyMetric deltaPresenceEstimationConfig.
                         * @member {google.privacy.dlp.v2.PrivacyMetric.IDeltaPresenceEstimationConfig|null|undefined} deltaPresenceEstimationConfig
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        PrivacyMetric.prototype.deltaPresenceEstimationConfig = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * PrivacyMetric type.
                         * @member {"numericalStatsConfig"|"categoricalStatsConfig"|"kAnonymityConfig"|"lDiversityConfig"|"kMapEstimationConfig"|"deltaPresenceEstimationConfig"|undefined} type
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         */
                        Object.defineProperty(PrivacyMetric.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["numericalStatsConfig", "categoricalStatsConfig", "kAnonymityConfig", "lDiversityConfig", "kMapEstimationConfig", "deltaPresenceEstimationConfig"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new PrivacyMetric instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {google.privacy.dlp.v2.IPrivacyMetric=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.PrivacyMetric} PrivacyMetric instance
                         */
                        PrivacyMetric.create = function create(properties) {
                            return new PrivacyMetric(properties);
                        };
    
                        /**
                         * Encodes the specified PrivacyMetric message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {google.privacy.dlp.v2.IPrivacyMetric} message PrivacyMetric message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PrivacyMetric.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.numericalStatsConfig != null && Object.hasOwnProperty.call(message, "numericalStatsConfig"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.encode(message.numericalStatsConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.categoricalStatsConfig != null && Object.hasOwnProperty.call(message, "categoricalStatsConfig"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.encode(message.categoricalStatsConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.kAnonymityConfig != null && Object.hasOwnProperty.call(message, "kAnonymityConfig"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.encode(message.kAnonymityConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.lDiversityConfig != null && Object.hasOwnProperty.call(message, "lDiversityConfig"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.encode(message.lDiversityConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.kMapEstimationConfig != null && Object.hasOwnProperty.call(message, "kMapEstimationConfig"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.encode(message.kMapEstimationConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.deltaPresenceEstimationConfig != null && Object.hasOwnProperty.call(message, "deltaPresenceEstimationConfig"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.encode(message.deltaPresenceEstimationConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PrivacyMetric message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {google.privacy.dlp.v2.IPrivacyMetric} message PrivacyMetric message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PrivacyMetric.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PrivacyMetric message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.PrivacyMetric} PrivacyMetric
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PrivacyMetric.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.numericalStatsConfig = $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.categoricalStatsConfig = $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.kAnonymityConfig = $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.lDiversityConfig = $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.kMapEstimationConfig = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.deltaPresenceEstimationConfig = $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PrivacyMetric message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.PrivacyMetric} PrivacyMetric
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PrivacyMetric.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PrivacyMetric message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PrivacyMetric.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.numericalStatsConfig != null && message.hasOwnProperty("numericalStatsConfig")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.verify(message.numericalStatsConfig);
                                    if (error)
                                        return "numericalStatsConfig." + error;
                                }
                            }
                            if (message.categoricalStatsConfig != null && message.hasOwnProperty("categoricalStatsConfig")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.verify(message.categoricalStatsConfig);
                                    if (error)
                                        return "categoricalStatsConfig." + error;
                                }
                            }
                            if (message.kAnonymityConfig != null && message.hasOwnProperty("kAnonymityConfig")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.verify(message.kAnonymityConfig);
                                    if (error)
                                        return "kAnonymityConfig." + error;
                                }
                            }
                            if (message.lDiversityConfig != null && message.hasOwnProperty("lDiversityConfig")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.verify(message.lDiversityConfig);
                                    if (error)
                                        return "lDiversityConfig." + error;
                                }
                            }
                            if (message.kMapEstimationConfig != null && message.hasOwnProperty("kMapEstimationConfig")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.verify(message.kMapEstimationConfig);
                                    if (error)
                                        return "kMapEstimationConfig." + error;
                                }
                            }
                            if (message.deltaPresenceEstimationConfig != null && message.hasOwnProperty("deltaPresenceEstimationConfig")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.verify(message.deltaPresenceEstimationConfig);
                                    if (error)
                                        return "deltaPresenceEstimationConfig." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a PrivacyMetric message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.PrivacyMetric} PrivacyMetric
                         */
                        PrivacyMetric.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.PrivacyMetric();
                            if (object.numericalStatsConfig != null) {
                                if (typeof object.numericalStatsConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.numericalStatsConfig: object expected");
                                message.numericalStatsConfig = $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.fromObject(object.numericalStatsConfig);
                            }
                            if (object.categoricalStatsConfig != null) {
                                if (typeof object.categoricalStatsConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.categoricalStatsConfig: object expected");
                                message.categoricalStatsConfig = $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.fromObject(object.categoricalStatsConfig);
                            }
                            if (object.kAnonymityConfig != null) {
                                if (typeof object.kAnonymityConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.kAnonymityConfig: object expected");
                                message.kAnonymityConfig = $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.fromObject(object.kAnonymityConfig);
                            }
                            if (object.lDiversityConfig != null) {
                                if (typeof object.lDiversityConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.lDiversityConfig: object expected");
                                message.lDiversityConfig = $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.fromObject(object.lDiversityConfig);
                            }
                            if (object.kMapEstimationConfig != null) {
                                if (typeof object.kMapEstimationConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.kMapEstimationConfig: object expected");
                                message.kMapEstimationConfig = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.fromObject(object.kMapEstimationConfig);
                            }
                            if (object.deltaPresenceEstimationConfig != null) {
                                if (typeof object.deltaPresenceEstimationConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.deltaPresenceEstimationConfig: object expected");
                                message.deltaPresenceEstimationConfig = $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.fromObject(object.deltaPresenceEstimationConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PrivacyMetric message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @static
                         * @param {google.privacy.dlp.v2.PrivacyMetric} message PrivacyMetric
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PrivacyMetric.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.numericalStatsConfig != null && message.hasOwnProperty("numericalStatsConfig")) {
                                object.numericalStatsConfig = $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.toObject(message.numericalStatsConfig, options);
                                if (options.oneofs)
                                    object.type = "numericalStatsConfig";
                            }
                            if (message.categoricalStatsConfig != null && message.hasOwnProperty("categoricalStatsConfig")) {
                                object.categoricalStatsConfig = $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.toObject(message.categoricalStatsConfig, options);
                                if (options.oneofs)
                                    object.type = "categoricalStatsConfig";
                            }
                            if (message.kAnonymityConfig != null && message.hasOwnProperty("kAnonymityConfig")) {
                                object.kAnonymityConfig = $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.toObject(message.kAnonymityConfig, options);
                                if (options.oneofs)
                                    object.type = "kAnonymityConfig";
                            }
                            if (message.lDiversityConfig != null && message.hasOwnProperty("lDiversityConfig")) {
                                object.lDiversityConfig = $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.toObject(message.lDiversityConfig, options);
                                if (options.oneofs)
                                    object.type = "lDiversityConfig";
                            }
                            if (message.kMapEstimationConfig != null && message.hasOwnProperty("kMapEstimationConfig")) {
                                object.kMapEstimationConfig = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.toObject(message.kMapEstimationConfig, options);
                                if (options.oneofs)
                                    object.type = "kMapEstimationConfig";
                            }
                            if (message.deltaPresenceEstimationConfig != null && message.hasOwnProperty("deltaPresenceEstimationConfig")) {
                                object.deltaPresenceEstimationConfig = $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.toObject(message.deltaPresenceEstimationConfig, options);
                                if (options.oneofs)
                                    object.type = "deltaPresenceEstimationConfig";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this PrivacyMetric to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.PrivacyMetric
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PrivacyMetric.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        PrivacyMetric.NumericalStatsConfig = (function() {
    
                            /**
                             * Properties of a NumericalStatsConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @interface INumericalStatsConfig
                             * @property {google.privacy.dlp.v2.IFieldId|null} [field] NumericalStatsConfig field
                             */
    
                            /**
                             * Constructs a new NumericalStatsConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @classdesc Represents a NumericalStatsConfig.
                             * @implements INumericalStatsConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.PrivacyMetric.INumericalStatsConfig=} [properties] Properties to set
                             */
                            function NumericalStatsConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * NumericalStatsConfig field.
                             * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @instance
                             */
                            NumericalStatsConfig.prototype.field = null;
    
                            /**
                             * Creates a new NumericalStatsConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.INumericalStatsConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig} NumericalStatsConfig instance
                             */
                            NumericalStatsConfig.create = function create(properties) {
                                return new NumericalStatsConfig(properties);
                            };
    
                            /**
                             * Encodes the specified NumericalStatsConfig message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.INumericalStatsConfig} message NumericalStatsConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NumericalStatsConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified NumericalStatsConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.INumericalStatsConfig} message NumericalStatsConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NumericalStatsConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a NumericalStatsConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig} NumericalStatsConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NumericalStatsConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a NumericalStatsConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig} NumericalStatsConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NumericalStatsConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a NumericalStatsConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NumericalStatsConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.field != null && message.hasOwnProperty("field")) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                    if (error)
                                        return "field." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a NumericalStatsConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig} NumericalStatsConfig
                             */
                            NumericalStatsConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig();
                                if (object.field != null) {
                                    if (typeof object.field !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.field: object expected");
                                    message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a NumericalStatsConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig} message NumericalStatsConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NumericalStatsConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.field = null;
                                if (message.field != null && message.hasOwnProperty("field"))
                                    object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                                return object;
                            };
    
                            /**
                             * Converts this NumericalStatsConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NumericalStatsConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return NumericalStatsConfig;
                        })();
    
                        PrivacyMetric.CategoricalStatsConfig = (function() {
    
                            /**
                             * Properties of a CategoricalStatsConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @interface ICategoricalStatsConfig
                             * @property {google.privacy.dlp.v2.IFieldId|null} [field] CategoricalStatsConfig field
                             */
    
                            /**
                             * Constructs a new CategoricalStatsConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @classdesc Represents a CategoricalStatsConfig.
                             * @implements ICategoricalStatsConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ICategoricalStatsConfig=} [properties] Properties to set
                             */
                            function CategoricalStatsConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CategoricalStatsConfig field.
                             * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @instance
                             */
                            CategoricalStatsConfig.prototype.field = null;
    
                            /**
                             * Creates a new CategoricalStatsConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ICategoricalStatsConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig} CategoricalStatsConfig instance
                             */
                            CategoricalStatsConfig.create = function create(properties) {
                                return new CategoricalStatsConfig(properties);
                            };
    
                            /**
                             * Encodes the specified CategoricalStatsConfig message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ICategoricalStatsConfig} message CategoricalStatsConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CategoricalStatsConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CategoricalStatsConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ICategoricalStatsConfig} message CategoricalStatsConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CategoricalStatsConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CategoricalStatsConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig} CategoricalStatsConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CategoricalStatsConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CategoricalStatsConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig} CategoricalStatsConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CategoricalStatsConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CategoricalStatsConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CategoricalStatsConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.field != null && message.hasOwnProperty("field")) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                    if (error)
                                        return "field." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CategoricalStatsConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig} CategoricalStatsConfig
                             */
                            CategoricalStatsConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig();
                                if (object.field != null) {
                                    if (typeof object.field !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.field: object expected");
                                    message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CategoricalStatsConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig} message CategoricalStatsConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CategoricalStatsConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.field = null;
                                if (message.field != null && message.hasOwnProperty("field"))
                                    object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                                return object;
                            };
    
                            /**
                             * Converts this CategoricalStatsConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CategoricalStatsConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CategoricalStatsConfig;
                        })();
    
                        PrivacyMetric.KAnonymityConfig = (function() {
    
                            /**
                             * Properties of a KAnonymityConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @interface IKAnonymityConfig
                             * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [quasiIds] KAnonymityConfig quasiIds
                             * @property {google.privacy.dlp.v2.IEntityId|null} [entityId] KAnonymityConfig entityId
                             */
    
                            /**
                             * Constructs a new KAnonymityConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @classdesc Represents a KAnonymityConfig.
                             * @implements IKAnonymityConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKAnonymityConfig=} [properties] Properties to set
                             */
                            function KAnonymityConfig(properties) {
                                this.quasiIds = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KAnonymityConfig quasiIds.
                             * @member {Array.<google.privacy.dlp.v2.IFieldId>} quasiIds
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @instance
                             */
                            KAnonymityConfig.prototype.quasiIds = $util.emptyArray;
    
                            /**
                             * KAnonymityConfig entityId.
                             * @member {google.privacy.dlp.v2.IEntityId|null|undefined} entityId
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @instance
                             */
                            KAnonymityConfig.prototype.entityId = null;
    
                            /**
                             * Creates a new KAnonymityConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKAnonymityConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig} KAnonymityConfig instance
                             */
                            KAnonymityConfig.create = function create(properties) {
                                return new KAnonymityConfig(properties);
                            };
    
                            /**
                             * Encodes the specified KAnonymityConfig message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKAnonymityConfig} message KAnonymityConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KAnonymityConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.quasiIds != null && message.quasiIds.length)
                                    for (var i = 0; i < message.quasiIds.length; ++i)
                                        $root.google.privacy.dlp.v2.FieldId.encode(message.quasiIds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                                    $root.google.privacy.dlp.v2.EntityId.encode(message.entityId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KAnonymityConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKAnonymityConfig} message KAnonymityConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KAnonymityConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KAnonymityConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig} KAnonymityConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KAnonymityConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.quasiIds && message.quasiIds.length))
                                            message.quasiIds = [];
                                        message.quasiIds.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.entityId = $root.google.privacy.dlp.v2.EntityId.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KAnonymityConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig} KAnonymityConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KAnonymityConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KAnonymityConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KAnonymityConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.quasiIds != null && message.hasOwnProperty("quasiIds")) {
                                    if (!Array.isArray(message.quasiIds))
                                        return "quasiIds: array expected";
                                    for (var i = 0; i < message.quasiIds.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.FieldId.verify(message.quasiIds[i]);
                                        if (error)
                                            return "quasiIds." + error;
                                    }
                                }
                                if (message.entityId != null && message.hasOwnProperty("entityId")) {
                                    var error = $root.google.privacy.dlp.v2.EntityId.verify(message.entityId);
                                    if (error)
                                        return "entityId." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a KAnonymityConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig} KAnonymityConfig
                             */
                            KAnonymityConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig();
                                if (object.quasiIds) {
                                    if (!Array.isArray(object.quasiIds))
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasiIds: array expected");
                                    message.quasiIds = [];
                                    for (var i = 0; i < object.quasiIds.length; ++i) {
                                        if (typeof object.quasiIds[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasiIds: object expected");
                                        message.quasiIds[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.quasiIds[i]);
                                    }
                                }
                                if (object.entityId != null) {
                                    if (typeof object.entityId !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.entityId: object expected");
                                    message.entityId = $root.google.privacy.dlp.v2.EntityId.fromObject(object.entityId);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KAnonymityConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig} message KAnonymityConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KAnonymityConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.quasiIds = [];
                                if (options.defaults)
                                    object.entityId = null;
                                if (message.quasiIds && message.quasiIds.length) {
                                    object.quasiIds = [];
                                    for (var j = 0; j < message.quasiIds.length; ++j)
                                        object.quasiIds[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.quasiIds[j], options);
                                }
                                if (message.entityId != null && message.hasOwnProperty("entityId"))
                                    object.entityId = $root.google.privacy.dlp.v2.EntityId.toObject(message.entityId, options);
                                return object;
                            };
    
                            /**
                             * Converts this KAnonymityConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KAnonymityConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return KAnonymityConfig;
                        })();
    
                        PrivacyMetric.LDiversityConfig = (function() {
    
                            /**
                             * Properties of a LDiversityConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @interface ILDiversityConfig
                             * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [quasiIds] LDiversityConfig quasiIds
                             * @property {google.privacy.dlp.v2.IFieldId|null} [sensitiveAttribute] LDiversityConfig sensitiveAttribute
                             */
    
                            /**
                             * Constructs a new LDiversityConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @classdesc Represents a LDiversityConfig.
                             * @implements ILDiversityConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ILDiversityConfig=} [properties] Properties to set
                             */
                            function LDiversityConfig(properties) {
                                this.quasiIds = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * LDiversityConfig quasiIds.
                             * @member {Array.<google.privacy.dlp.v2.IFieldId>} quasiIds
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @instance
                             */
                            LDiversityConfig.prototype.quasiIds = $util.emptyArray;
    
                            /**
                             * LDiversityConfig sensitiveAttribute.
                             * @member {google.privacy.dlp.v2.IFieldId|null|undefined} sensitiveAttribute
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @instance
                             */
                            LDiversityConfig.prototype.sensitiveAttribute = null;
    
                            /**
                             * Creates a new LDiversityConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ILDiversityConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig} LDiversityConfig instance
                             */
                            LDiversityConfig.create = function create(properties) {
                                return new LDiversityConfig(properties);
                            };
    
                            /**
                             * Encodes the specified LDiversityConfig message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ILDiversityConfig} message LDiversityConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LDiversityConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.quasiIds != null && message.quasiIds.length)
                                    for (var i = 0; i < message.quasiIds.length; ++i)
                                        $root.google.privacy.dlp.v2.FieldId.encode(message.quasiIds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.sensitiveAttribute != null && Object.hasOwnProperty.call(message, "sensitiveAttribute"))
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.sensitiveAttribute, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LDiversityConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.ILDiversityConfig} message LDiversityConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LDiversityConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LDiversityConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig} LDiversityConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LDiversityConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.quasiIds && message.quasiIds.length))
                                            message.quasiIds = [];
                                        message.quasiIds.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.sensitiveAttribute = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LDiversityConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig} LDiversityConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LDiversityConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LDiversityConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LDiversityConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.quasiIds != null && message.hasOwnProperty("quasiIds")) {
                                    if (!Array.isArray(message.quasiIds))
                                        return "quasiIds: array expected";
                                    for (var i = 0; i < message.quasiIds.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.FieldId.verify(message.quasiIds[i]);
                                        if (error)
                                            return "quasiIds." + error;
                                    }
                                }
                                if (message.sensitiveAttribute != null && message.hasOwnProperty("sensitiveAttribute")) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.sensitiveAttribute);
                                    if (error)
                                        return "sensitiveAttribute." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a LDiversityConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig} LDiversityConfig
                             */
                            LDiversityConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig();
                                if (object.quasiIds) {
                                    if (!Array.isArray(object.quasiIds))
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasiIds: array expected");
                                    message.quasiIds = [];
                                    for (var i = 0; i < object.quasiIds.length; ++i) {
                                        if (typeof object.quasiIds[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasiIds: object expected");
                                        message.quasiIds[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.quasiIds[i]);
                                    }
                                }
                                if (object.sensitiveAttribute != null) {
                                    if (typeof object.sensitiveAttribute !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.sensitiveAttribute: object expected");
                                    message.sensitiveAttribute = $root.google.privacy.dlp.v2.FieldId.fromObject(object.sensitiveAttribute);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a LDiversityConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig} message LDiversityConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LDiversityConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.quasiIds = [];
                                if (options.defaults)
                                    object.sensitiveAttribute = null;
                                if (message.quasiIds && message.quasiIds.length) {
                                    object.quasiIds = [];
                                    for (var j = 0; j < message.quasiIds.length; ++j)
                                        object.quasiIds[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.quasiIds[j], options);
                                }
                                if (message.sensitiveAttribute != null && message.hasOwnProperty("sensitiveAttribute"))
                                    object.sensitiveAttribute = $root.google.privacy.dlp.v2.FieldId.toObject(message.sensitiveAttribute, options);
                                return object;
                            };
    
                            /**
                             * Converts this LDiversityConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LDiversityConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return LDiversityConfig;
                        })();
    
                        PrivacyMetric.KMapEstimationConfig = (function() {
    
                            /**
                             * Properties of a KMapEstimationConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @interface IKMapEstimationConfig
                             * @property {Array.<google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.ITaggedField>|null} [quasiIds] KMapEstimationConfig quasiIds
                             * @property {string|null} [regionCode] KMapEstimationConfig regionCode
                             * @property {Array.<google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.IAuxiliaryTable>|null} [auxiliaryTables] KMapEstimationConfig auxiliaryTables
                             */
    
                            /**
                             * Constructs a new KMapEstimationConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @classdesc Represents a KMapEstimationConfig.
                             * @implements IKMapEstimationConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKMapEstimationConfig=} [properties] Properties to set
                             */
                            function KMapEstimationConfig(properties) {
                                this.quasiIds = [];
                                this.auxiliaryTables = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KMapEstimationConfig quasiIds.
                             * @member {Array.<google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.ITaggedField>} quasiIds
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @instance
                             */
                            KMapEstimationConfig.prototype.quasiIds = $util.emptyArray;
    
                            /**
                             * KMapEstimationConfig regionCode.
                             * @member {string} regionCode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @instance
                             */
                            KMapEstimationConfig.prototype.regionCode = "";
    
                            /**
                             * KMapEstimationConfig auxiliaryTables.
                             * @member {Array.<google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.IAuxiliaryTable>} auxiliaryTables
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @instance
                             */
                            KMapEstimationConfig.prototype.auxiliaryTables = $util.emptyArray;
    
                            /**
                             * Creates a new KMapEstimationConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKMapEstimationConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig} KMapEstimationConfig instance
                             */
                            KMapEstimationConfig.create = function create(properties) {
                                return new KMapEstimationConfig(properties);
                            };
    
                            /**
                             * Encodes the specified KMapEstimationConfig message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKMapEstimationConfig} message KMapEstimationConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMapEstimationConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.quasiIds != null && message.quasiIds.length)
                                    for (var i = 0; i < message.quasiIds.length; ++i)
                                        $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.encode(message.quasiIds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.regionCode != null && Object.hasOwnProperty.call(message, "regionCode"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.regionCode);
                                if (message.auxiliaryTables != null && message.auxiliaryTables.length)
                                    for (var i = 0; i < message.auxiliaryTables.length; ++i)
                                        $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.encode(message.auxiliaryTables[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KMapEstimationConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IKMapEstimationConfig} message KMapEstimationConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMapEstimationConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KMapEstimationConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig} KMapEstimationConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMapEstimationConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.quasiIds && message.quasiIds.length))
                                            message.quasiIds = [];
                                        message.quasiIds.push($root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.regionCode = reader.string();
                                        break;
                                    case 3:
                                        if (!(message.auxiliaryTables && message.auxiliaryTables.length))
                                            message.auxiliaryTables = [];
                                        message.auxiliaryTables.push($root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KMapEstimationConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig} KMapEstimationConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMapEstimationConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KMapEstimationConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KMapEstimationConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.quasiIds != null && message.hasOwnProperty("quasiIds")) {
                                    if (!Array.isArray(message.quasiIds))
                                        return "quasiIds: array expected";
                                    for (var i = 0; i < message.quasiIds.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.verify(message.quasiIds[i]);
                                        if (error)
                                            return "quasiIds." + error;
                                    }
                                }
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    if (!$util.isString(message.regionCode))
                                        return "regionCode: string expected";
                                if (message.auxiliaryTables != null && message.hasOwnProperty("auxiliaryTables")) {
                                    if (!Array.isArray(message.auxiliaryTables))
                                        return "auxiliaryTables: array expected";
                                    for (var i = 0; i < message.auxiliaryTables.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.verify(message.auxiliaryTables[i]);
                                        if (error)
                                            return "auxiliaryTables." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a KMapEstimationConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig} KMapEstimationConfig
                             */
                            KMapEstimationConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig();
                                if (object.quasiIds) {
                                    if (!Array.isArray(object.quasiIds))
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasiIds: array expected");
                                    message.quasiIds = [];
                                    for (var i = 0; i < object.quasiIds.length; ++i) {
                                        if (typeof object.quasiIds[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasiIds: object expected");
                                        message.quasiIds[i] = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.fromObject(object.quasiIds[i]);
                                    }
                                }
                                if (object.regionCode != null)
                                    message.regionCode = String(object.regionCode);
                                if (object.auxiliaryTables) {
                                    if (!Array.isArray(object.auxiliaryTables))
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliaryTables: array expected");
                                    message.auxiliaryTables = [];
                                    for (var i = 0; i < object.auxiliaryTables.length; ++i) {
                                        if (typeof object.auxiliaryTables[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliaryTables: object expected");
                                        message.auxiliaryTables[i] = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.fromObject(object.auxiliaryTables[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KMapEstimationConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig} message KMapEstimationConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KMapEstimationConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.quasiIds = [];
                                    object.auxiliaryTables = [];
                                }
                                if (options.defaults)
                                    object.regionCode = "";
                                if (message.quasiIds && message.quasiIds.length) {
                                    object.quasiIds = [];
                                    for (var j = 0; j < message.quasiIds.length; ++j)
                                        object.quasiIds[j] = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.toObject(message.quasiIds[j], options);
                                }
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    object.regionCode = message.regionCode;
                                if (message.auxiliaryTables && message.auxiliaryTables.length) {
                                    object.auxiliaryTables = [];
                                    for (var j = 0; j < message.auxiliaryTables.length; ++j)
                                        object.auxiliaryTables[j] = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.toObject(message.auxiliaryTables[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this KMapEstimationConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KMapEstimationConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            KMapEstimationConfig.TaggedField = (function() {
    
                                /**
                                 * Properties of a TaggedField.
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                                 * @interface ITaggedField
                                 * @property {google.privacy.dlp.v2.IFieldId|null} [field] TaggedField field
                                 * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] TaggedField infoType
                                 * @property {string|null} [customTag] TaggedField customTag
                                 * @property {google.protobuf.IEmpty|null} [inferred] TaggedField inferred
                                 */
    
                                /**
                                 * Constructs a new TaggedField.
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                                 * @classdesc Represents a TaggedField.
                                 * @implements ITaggedField
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.ITaggedField=} [properties] Properties to set
                                 */
                                function TaggedField(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * TaggedField field.
                                 * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @instance
                                 */
                                TaggedField.prototype.field = null;
    
                                /**
                                 * TaggedField infoType.
                                 * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @instance
                                 */
                                TaggedField.prototype.infoType = null;
    
                                /**
                                 * TaggedField customTag.
                                 * @member {string} customTag
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @instance
                                 */
                                TaggedField.prototype.customTag = "";
    
                                /**
                                 * TaggedField inferred.
                                 * @member {google.protobuf.IEmpty|null|undefined} inferred
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @instance
                                 */
                                TaggedField.prototype.inferred = null;
    
                                // OneOf field names bound to virtual getters and setters
                                var $oneOfFields;
    
                                /**
                                 * TaggedField tag.
                                 * @member {"infoType"|"customTag"|"inferred"|undefined} tag
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @instance
                                 */
                                Object.defineProperty(TaggedField.prototype, "tag", {
                                    get: $util.oneOfGetter($oneOfFields = ["infoType", "customTag", "inferred"]),
                                    set: $util.oneOfSetter($oneOfFields)
                                });
    
                                /**
                                 * Creates a new TaggedField instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.ITaggedField=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField} TaggedField instance
                                 */
                                TaggedField.create = function create(properties) {
                                    return new TaggedField(properties);
                                };
    
                                /**
                                 * Encodes the specified TaggedField message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.ITaggedField} message TaggedField message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                TaggedField.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                        $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                        $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.customTag != null && Object.hasOwnProperty.call(message, "customTag"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.customTag);
                                    if (message.inferred != null && Object.hasOwnProperty.call(message, "inferred"))
                                        $root.google.protobuf.Empty.encode(message.inferred, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified TaggedField message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.ITaggedField} message TaggedField message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                TaggedField.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a TaggedField message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField} TaggedField
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TaggedField.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                            break;
                                        case 3:
                                            message.customTag = reader.string();
                                            break;
                                        case 4:
                                            message.inferred = $root.google.protobuf.Empty.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a TaggedField message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField} TaggedField
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TaggedField.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a TaggedField message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                TaggedField.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    var properties = {};
                                    if (message.field != null && message.hasOwnProperty("field")) {
                                        var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                        if (error)
                                            return "field." + error;
                                    }
                                    if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                        properties.tag = 1;
                                        {
                                            var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                            if (error)
                                                return "infoType." + error;
                                        }
                                    }
                                    if (message.customTag != null && message.hasOwnProperty("customTag")) {
                                        if (properties.tag === 1)
                                            return "tag: multiple values";
                                        properties.tag = 1;
                                        if (!$util.isString(message.customTag))
                                            return "customTag: string expected";
                                    }
                                    if (message.inferred != null && message.hasOwnProperty("inferred")) {
                                        if (properties.tag === 1)
                                            return "tag: multiple values";
                                        properties.tag = 1;
                                        {
                                            var error = $root.google.protobuf.Empty.verify(message.inferred);
                                            if (error)
                                                return "inferred." + error;
                                        }
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a TaggedField message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField} TaggedField
                                 */
                                TaggedField.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField();
                                    if (object.field != null) {
                                        if (typeof object.field !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.field: object expected");
                                        message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                                    }
                                    if (object.infoType != null) {
                                        if (typeof object.infoType !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.infoType: object expected");
                                        message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                                    }
                                    if (object.customTag != null)
                                        message.customTag = String(object.customTag);
                                    if (object.inferred != null) {
                                        if (typeof object.inferred !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.inferred: object expected");
                                        message.inferred = $root.google.protobuf.Empty.fromObject(object.inferred);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a TaggedField message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField} message TaggedField
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                TaggedField.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.field = null;
                                    if (message.field != null && message.hasOwnProperty("field"))
                                        object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                                    if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                        object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                                        if (options.oneofs)
                                            object.tag = "infoType";
                                    }
                                    if (message.customTag != null && message.hasOwnProperty("customTag")) {
                                        object.customTag = message.customTag;
                                        if (options.oneofs)
                                            object.tag = "customTag";
                                    }
                                    if (message.inferred != null && message.hasOwnProperty("inferred")) {
                                        object.inferred = $root.google.protobuf.Empty.toObject(message.inferred, options);
                                        if (options.oneofs)
                                            object.tag = "inferred";
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this TaggedField to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                TaggedField.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return TaggedField;
                            })();
    
                            KMapEstimationConfig.AuxiliaryTable = (function() {
    
                                /**
                                 * Properties of an AuxiliaryTable.
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                                 * @interface IAuxiliaryTable
                                 * @property {google.privacy.dlp.v2.IBigQueryTable|null} [table] AuxiliaryTable table
                                 * @property {Array.<google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.IQuasiIdField>|null} [quasiIds] AuxiliaryTable quasiIds
                                 * @property {google.privacy.dlp.v2.IFieldId|null} [relativeFrequency] AuxiliaryTable relativeFrequency
                                 */
    
                                /**
                                 * Constructs a new AuxiliaryTable.
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
                                 * @classdesc Represents an AuxiliaryTable.
                                 * @implements IAuxiliaryTable
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.IAuxiliaryTable=} [properties] Properties to set
                                 */
                                function AuxiliaryTable(properties) {
                                    this.quasiIds = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AuxiliaryTable table.
                                 * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} table
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @instance
                                 */
                                AuxiliaryTable.prototype.table = null;
    
                                /**
                                 * AuxiliaryTable quasiIds.
                                 * @member {Array.<google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.IQuasiIdField>} quasiIds
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @instance
                                 */
                                AuxiliaryTable.prototype.quasiIds = $util.emptyArray;
    
                                /**
                                 * AuxiliaryTable relativeFrequency.
                                 * @member {google.privacy.dlp.v2.IFieldId|null|undefined} relativeFrequency
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @instance
                                 */
                                AuxiliaryTable.prototype.relativeFrequency = null;
    
                                /**
                                 * Creates a new AuxiliaryTable instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.IAuxiliaryTable=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable} AuxiliaryTable instance
                                 */
                                AuxiliaryTable.create = function create(properties) {
                                    return new AuxiliaryTable(properties);
                                };
    
                                /**
                                 * Encodes the specified AuxiliaryTable message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.IAuxiliaryTable} message AuxiliaryTable message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AuxiliaryTable.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.quasiIds != null && message.quasiIds.length)
                                        for (var i = 0; i < message.quasiIds.length; ++i)
                                            $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.encode(message.quasiIds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.relativeFrequency != null && Object.hasOwnProperty.call(message, "relativeFrequency"))
                                        $root.google.privacy.dlp.v2.FieldId.encode(message.relativeFrequency, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                        $root.google.privacy.dlp.v2.BigQueryTable.encode(message.table, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AuxiliaryTable message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.IAuxiliaryTable} message AuxiliaryTable message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AuxiliaryTable.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AuxiliaryTable message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable} AuxiliaryTable
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AuxiliaryTable.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 3:
                                            message.table = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                            break;
                                        case 1:
                                            if (!(message.quasiIds && message.quasiIds.length))
                                                message.quasiIds = [];
                                            message.quasiIds.push($root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.decode(reader, reader.uint32()));
                                            break;
                                        case 2:
                                            message.relativeFrequency = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AuxiliaryTable message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable} AuxiliaryTable
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AuxiliaryTable.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AuxiliaryTable message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AuxiliaryTable.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.table != null && message.hasOwnProperty("table")) {
                                        var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.table);
                                        if (error)
                                            return "table." + error;
                                    }
                                    if (message.quasiIds != null && message.hasOwnProperty("quasiIds")) {
                                        if (!Array.isArray(message.quasiIds))
                                            return "quasiIds: array expected";
                                        for (var i = 0; i < message.quasiIds.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.verify(message.quasiIds[i]);
                                            if (error)
                                                return "quasiIds." + error;
                                        }
                                    }
                                    if (message.relativeFrequency != null && message.hasOwnProperty("relativeFrequency")) {
                                        var error = $root.google.privacy.dlp.v2.FieldId.verify(message.relativeFrequency);
                                        if (error)
                                            return "relativeFrequency." + error;
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates an AuxiliaryTable message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable} AuxiliaryTable
                                 */
                                AuxiliaryTable.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable();
                                    if (object.table != null) {
                                        if (typeof object.table !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.table: object expected");
                                        message.table = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.table);
                                    }
                                    if (object.quasiIds) {
                                        if (!Array.isArray(object.quasiIds))
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasiIds: array expected");
                                        message.quasiIds = [];
                                        for (var i = 0; i < object.quasiIds.length; ++i) {
                                            if (typeof object.quasiIds[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasiIds: object expected");
                                            message.quasiIds[i] = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.fromObject(object.quasiIds[i]);
                                        }
                                    }
                                    if (object.relativeFrequency != null) {
                                        if (typeof object.relativeFrequency !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.relativeFrequency: object expected");
                                        message.relativeFrequency = $root.google.privacy.dlp.v2.FieldId.fromObject(object.relativeFrequency);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AuxiliaryTable message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @static
                                 * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable} message AuxiliaryTable
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AuxiliaryTable.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.quasiIds = [];
                                    if (options.defaults) {
                                        object.relativeFrequency = null;
                                        object.table = null;
                                    }
                                    if (message.quasiIds && message.quasiIds.length) {
                                        object.quasiIds = [];
                                        for (var j = 0; j < message.quasiIds.length; ++j)
                                            object.quasiIds[j] = $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.toObject(message.quasiIds[j], options);
                                    }
                                    if (message.relativeFrequency != null && message.hasOwnProperty("relativeFrequency"))
                                        object.relativeFrequency = $root.google.privacy.dlp.v2.FieldId.toObject(message.relativeFrequency, options);
                                    if (message.table != null && message.hasOwnProperty("table"))
                                        object.table = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.table, options);
                                    return object;
                                };
    
                                /**
                                 * Converts this AuxiliaryTable to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AuxiliaryTable.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                AuxiliaryTable.QuasiIdField = (function() {
    
                                    /**
                                     * Properties of a QuasiIdField.
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                     * @interface IQuasiIdField
                                     * @property {google.privacy.dlp.v2.IFieldId|null} [field] QuasiIdField field
                                     * @property {string|null} [customTag] QuasiIdField customTag
                                     */
    
                                    /**
                                     * Constructs a new QuasiIdField.
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
                                     * @classdesc Represents a QuasiIdField.
                                     * @implements IQuasiIdField
                                     * @constructor
                                     * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.IQuasiIdField=} [properties] Properties to set
                                     */
                                    function QuasiIdField(properties) {
                                        if (properties)
                                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }
    
                                    /**
                                     * QuasiIdField field.
                                     * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @instance
                                     */
                                    QuasiIdField.prototype.field = null;
    
                                    /**
                                     * QuasiIdField customTag.
                                     * @member {string} customTag
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @instance
                                     */
                                    QuasiIdField.prototype.customTag = "";
    
                                    /**
                                     * Creates a new QuasiIdField instance using the specified properties.
                                     * @function create
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.IQuasiIdField=} [properties] Properties to set
                                     * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField} QuasiIdField instance
                                     */
                                    QuasiIdField.create = function create(properties) {
                                        return new QuasiIdField(properties);
                                    };
    
                                    /**
                                     * Encodes the specified QuasiIdField message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.verify|verify} messages.
                                     * @function encode
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.IQuasiIdField} message QuasiIdField message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    QuasiIdField.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                            $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.customTag != null && Object.hasOwnProperty.call(message, "customTag"))
                                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.customTag);
                                        return writer;
                                    };
    
                                    /**
                                     * Encodes the specified QuasiIdField message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.IQuasiIdField} message QuasiIdField message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    QuasiIdField.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };
    
                                    /**
                                     * Decodes a QuasiIdField message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField} QuasiIdField
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    QuasiIdField.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField();
                                        while (reader.pos < end) {
                                            var tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1:
                                                message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                                break;
                                            case 2:
                                                message.customTag = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };
    
                                    /**
                                     * Decodes a QuasiIdField message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField} QuasiIdField
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    QuasiIdField.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };
    
                                    /**
                                     * Verifies a QuasiIdField message.
                                     * @function verify
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    QuasiIdField.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.field != null && message.hasOwnProperty("field")) {
                                            var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                            if (error)
                                                return "field." + error;
                                        }
                                        if (message.customTag != null && message.hasOwnProperty("customTag"))
                                            if (!$util.isString(message.customTag))
                                                return "customTag: string expected";
                                        return null;
                                    };
    
                                    /**
                                     * Creates a QuasiIdField message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField} QuasiIdField
                                     */
                                    QuasiIdField.fromObject = function fromObject(object) {
                                        if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
                                            return object;
                                        var message = new $root.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField();
                                        if (object.field != null) {
                                            if (typeof object.field !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.field: object expected");
                                            message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                                        }
                                        if (object.customTag != null)
                                            message.customTag = String(object.customTag);
                                        return message;
                                    };
    
                                    /**
                                     * Creates a plain object from a QuasiIdField message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @static
                                     * @param {google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField} message QuasiIdField
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    QuasiIdField.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        var object = {};
                                        if (options.defaults) {
                                            object.field = null;
                                            object.customTag = "";
                                        }
                                        if (message.field != null && message.hasOwnProperty("field"))
                                            object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                                        if (message.customTag != null && message.hasOwnProperty("customTag"))
                                            object.customTag = message.customTag;
                                        return object;
                                    };
    
                                    /**
                                     * Converts this QuasiIdField to JSON.
                                     * @function toJSON
                                     * @memberof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    QuasiIdField.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };
    
                                    return QuasiIdField;
                                })();
    
                                return AuxiliaryTable;
                            })();
    
                            return KMapEstimationConfig;
                        })();
    
                        PrivacyMetric.DeltaPresenceEstimationConfig = (function() {
    
                            /**
                             * Properties of a DeltaPresenceEstimationConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @interface IDeltaPresenceEstimationConfig
                             * @property {Array.<google.privacy.dlp.v2.IQuasiId>|null} [quasiIds] DeltaPresenceEstimationConfig quasiIds
                             * @property {string|null} [regionCode] DeltaPresenceEstimationConfig regionCode
                             * @property {Array.<google.privacy.dlp.v2.IStatisticalTable>|null} [auxiliaryTables] DeltaPresenceEstimationConfig auxiliaryTables
                             */
    
                            /**
                             * Constructs a new DeltaPresenceEstimationConfig.
                             * @memberof google.privacy.dlp.v2.PrivacyMetric
                             * @classdesc Represents a DeltaPresenceEstimationConfig.
                             * @implements IDeltaPresenceEstimationConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IDeltaPresenceEstimationConfig=} [properties] Properties to set
                             */
                            function DeltaPresenceEstimationConfig(properties) {
                                this.quasiIds = [];
                                this.auxiliaryTables = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DeltaPresenceEstimationConfig quasiIds.
                             * @member {Array.<google.privacy.dlp.v2.IQuasiId>} quasiIds
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @instance
                             */
                            DeltaPresenceEstimationConfig.prototype.quasiIds = $util.emptyArray;
    
                            /**
                             * DeltaPresenceEstimationConfig regionCode.
                             * @member {string} regionCode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @instance
                             */
                            DeltaPresenceEstimationConfig.prototype.regionCode = "";
    
                            /**
                             * DeltaPresenceEstimationConfig auxiliaryTables.
                             * @member {Array.<google.privacy.dlp.v2.IStatisticalTable>} auxiliaryTables
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @instance
                             */
                            DeltaPresenceEstimationConfig.prototype.auxiliaryTables = $util.emptyArray;
    
                            /**
                             * Creates a new DeltaPresenceEstimationConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IDeltaPresenceEstimationConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig} DeltaPresenceEstimationConfig instance
                             */
                            DeltaPresenceEstimationConfig.create = function create(properties) {
                                return new DeltaPresenceEstimationConfig(properties);
                            };
    
                            /**
                             * Encodes the specified DeltaPresenceEstimationConfig message. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IDeltaPresenceEstimationConfig} message DeltaPresenceEstimationConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeltaPresenceEstimationConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.quasiIds != null && message.quasiIds.length)
                                    for (var i = 0; i < message.quasiIds.length; ++i)
                                        $root.google.privacy.dlp.v2.QuasiId.encode(message.quasiIds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.regionCode != null && Object.hasOwnProperty.call(message, "regionCode"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.regionCode);
                                if (message.auxiliaryTables != null && message.auxiliaryTables.length)
                                    for (var i = 0; i < message.auxiliaryTables.length; ++i)
                                        $root.google.privacy.dlp.v2.StatisticalTable.encode(message.auxiliaryTables[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DeltaPresenceEstimationConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.IDeltaPresenceEstimationConfig} message DeltaPresenceEstimationConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeltaPresenceEstimationConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DeltaPresenceEstimationConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig} DeltaPresenceEstimationConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeltaPresenceEstimationConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.quasiIds && message.quasiIds.length))
                                            message.quasiIds = [];
                                        message.quasiIds.push($root.google.privacy.dlp.v2.QuasiId.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.regionCode = reader.string();
                                        break;
                                    case 3:
                                        if (!(message.auxiliaryTables && message.auxiliaryTables.length))
                                            message.auxiliaryTables = [];
                                        message.auxiliaryTables.push($root.google.privacy.dlp.v2.StatisticalTable.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DeltaPresenceEstimationConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig} DeltaPresenceEstimationConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeltaPresenceEstimationConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DeltaPresenceEstimationConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DeltaPresenceEstimationConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.quasiIds != null && message.hasOwnProperty("quasiIds")) {
                                    if (!Array.isArray(message.quasiIds))
                                        return "quasiIds: array expected";
                                    for (var i = 0; i < message.quasiIds.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.QuasiId.verify(message.quasiIds[i]);
                                        if (error)
                                            return "quasiIds." + error;
                                    }
                                }
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    if (!$util.isString(message.regionCode))
                                        return "regionCode: string expected";
                                if (message.auxiliaryTables != null && message.hasOwnProperty("auxiliaryTables")) {
                                    if (!Array.isArray(message.auxiliaryTables))
                                        return "auxiliaryTables: array expected";
                                    for (var i = 0; i < message.auxiliaryTables.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.StatisticalTable.verify(message.auxiliaryTables[i]);
                                        if (error)
                                            return "auxiliaryTables." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a DeltaPresenceEstimationConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig} DeltaPresenceEstimationConfig
                             */
                            DeltaPresenceEstimationConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig();
                                if (object.quasiIds) {
                                    if (!Array.isArray(object.quasiIds))
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasiIds: array expected");
                                    message.quasiIds = [];
                                    for (var i = 0; i < object.quasiIds.length; ++i) {
                                        if (typeof object.quasiIds[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasiIds: object expected");
                                        message.quasiIds[i] = $root.google.privacy.dlp.v2.QuasiId.fromObject(object.quasiIds[i]);
                                    }
                                }
                                if (object.regionCode != null)
                                    message.regionCode = String(object.regionCode);
                                if (object.auxiliaryTables) {
                                    if (!Array.isArray(object.auxiliaryTables))
                                        throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliaryTables: array expected");
                                    message.auxiliaryTables = [];
                                    for (var i = 0; i < object.auxiliaryTables.length; ++i) {
                                        if (typeof object.auxiliaryTables[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliaryTables: object expected");
                                        message.auxiliaryTables[i] = $root.google.privacy.dlp.v2.StatisticalTable.fromObject(object.auxiliaryTables[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DeltaPresenceEstimationConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @static
                             * @param {google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig} message DeltaPresenceEstimationConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DeltaPresenceEstimationConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.quasiIds = [];
                                    object.auxiliaryTables = [];
                                }
                                if (options.defaults)
                                    object.regionCode = "";
                                if (message.quasiIds && message.quasiIds.length) {
                                    object.quasiIds = [];
                                    for (var j = 0; j < message.quasiIds.length; ++j)
                                        object.quasiIds[j] = $root.google.privacy.dlp.v2.QuasiId.toObject(message.quasiIds[j], options);
                                }
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    object.regionCode = message.regionCode;
                                if (message.auxiliaryTables && message.auxiliaryTables.length) {
                                    object.auxiliaryTables = [];
                                    for (var j = 0; j < message.auxiliaryTables.length; ++j)
                                        object.auxiliaryTables[j] = $root.google.privacy.dlp.v2.StatisticalTable.toObject(message.auxiliaryTables[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this DeltaPresenceEstimationConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DeltaPresenceEstimationConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return DeltaPresenceEstimationConfig;
                        })();
    
                        return PrivacyMetric;
                    })();
    
                    v2.AnalyzeDataSourceRiskDetails = (function() {
    
                        /**
                         * Properties of an AnalyzeDataSourceRiskDetails.
                         * @memberof google.privacy.dlp.v2
                         * @interface IAnalyzeDataSourceRiskDetails
                         * @property {google.privacy.dlp.v2.IPrivacyMetric|null} [requestedPrivacyMetric] AnalyzeDataSourceRiskDetails requestedPrivacyMetric
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [requestedSourceTable] AnalyzeDataSourceRiskDetails requestedSourceTable
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.INumericalStatsResult|null} [numericalStatsResult] AnalyzeDataSourceRiskDetails numericalStatsResult
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ICategoricalStatsResult|null} [categoricalStatsResult] AnalyzeDataSourceRiskDetails categoricalStatsResult
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKAnonymityResult|null} [kAnonymityResult] AnalyzeDataSourceRiskDetails kAnonymityResult
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ILDiversityResult|null} [lDiversityResult] AnalyzeDataSourceRiskDetails lDiversityResult
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKMapEstimationResult|null} [kMapEstimationResult] AnalyzeDataSourceRiskDetails kMapEstimationResult
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IDeltaPresenceEstimationResult|null} [deltaPresenceEstimationResult] AnalyzeDataSourceRiskDetails deltaPresenceEstimationResult
                         * @property {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IRequestedRiskAnalysisOptions|null} [requestedOptions] AnalyzeDataSourceRiskDetails requestedOptions
                         */
    
                        /**
                         * Constructs a new AnalyzeDataSourceRiskDetails.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an AnalyzeDataSourceRiskDetails.
                         * @implements IAnalyzeDataSourceRiskDetails
                         * @constructor
                         * @param {google.privacy.dlp.v2.IAnalyzeDataSourceRiskDetails=} [properties] Properties to set
                         */
                        function AnalyzeDataSourceRiskDetails(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeDataSourceRiskDetails requestedPrivacyMetric.
                         * @member {google.privacy.dlp.v2.IPrivacyMetric|null|undefined} requestedPrivacyMetric
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.requestedPrivacyMetric = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails requestedSourceTable.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} requestedSourceTable
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.requestedSourceTable = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails numericalStatsResult.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.INumericalStatsResult|null|undefined} numericalStatsResult
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.numericalStatsResult = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails categoricalStatsResult.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ICategoricalStatsResult|null|undefined} categoricalStatsResult
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.categoricalStatsResult = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails kAnonymityResult.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKAnonymityResult|null|undefined} kAnonymityResult
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.kAnonymityResult = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails lDiversityResult.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ILDiversityResult|null|undefined} lDiversityResult
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.lDiversityResult = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails kMapEstimationResult.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKMapEstimationResult|null|undefined} kMapEstimationResult
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.kMapEstimationResult = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails deltaPresenceEstimationResult.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IDeltaPresenceEstimationResult|null|undefined} deltaPresenceEstimationResult
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.deltaPresenceEstimationResult = null;
    
                        /**
                         * AnalyzeDataSourceRiskDetails requestedOptions.
                         * @member {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IRequestedRiskAnalysisOptions|null|undefined} requestedOptions
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        AnalyzeDataSourceRiskDetails.prototype.requestedOptions = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * AnalyzeDataSourceRiskDetails result.
                         * @member {"numericalStatsResult"|"categoricalStatsResult"|"kAnonymityResult"|"lDiversityResult"|"kMapEstimationResult"|"deltaPresenceEstimationResult"|undefined} result
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         */
                        Object.defineProperty(AnalyzeDataSourceRiskDetails.prototype, "result", {
                            get: $util.oneOfGetter($oneOfFields = ["numericalStatsResult", "categoricalStatsResult", "kAnonymityResult", "lDiversityResult", "kMapEstimationResult", "deltaPresenceEstimationResult"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new AnalyzeDataSourceRiskDetails instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IAnalyzeDataSourceRiskDetails=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails} AnalyzeDataSourceRiskDetails instance
                         */
                        AnalyzeDataSourceRiskDetails.create = function create(properties) {
                            return new AnalyzeDataSourceRiskDetails(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeDataSourceRiskDetails message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IAnalyzeDataSourceRiskDetails} message AnalyzeDataSourceRiskDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeDataSourceRiskDetails.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.requestedPrivacyMetric != null && Object.hasOwnProperty.call(message, "requestedPrivacyMetric"))
                                $root.google.privacy.dlp.v2.PrivacyMetric.encode(message.requestedPrivacyMetric, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestedSourceTable != null && Object.hasOwnProperty.call(message, "requestedSourceTable"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.requestedSourceTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.numericalStatsResult != null && Object.hasOwnProperty.call(message, "numericalStatsResult"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.encode(message.numericalStatsResult, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.categoricalStatsResult != null && Object.hasOwnProperty.call(message, "categoricalStatsResult"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.encode(message.categoricalStatsResult, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.kAnonymityResult != null && Object.hasOwnProperty.call(message, "kAnonymityResult"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.encode(message.kAnonymityResult, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.lDiversityResult != null && Object.hasOwnProperty.call(message, "lDiversityResult"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.encode(message.lDiversityResult, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.kMapEstimationResult != null && Object.hasOwnProperty.call(message, "kMapEstimationResult"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.encode(message.kMapEstimationResult, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.deltaPresenceEstimationResult != null && Object.hasOwnProperty.call(message, "deltaPresenceEstimationResult"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.encode(message.deltaPresenceEstimationResult, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.requestedOptions != null && Object.hasOwnProperty.call(message, "requestedOptions"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.encode(message.requestedOptions, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeDataSourceRiskDetails message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IAnalyzeDataSourceRiskDetails} message AnalyzeDataSourceRiskDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeDataSourceRiskDetails.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeDataSourceRiskDetails message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails} AnalyzeDataSourceRiskDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeDataSourceRiskDetails.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.requestedPrivacyMetric = $root.google.privacy.dlp.v2.PrivacyMetric.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestedSourceTable = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.numericalStatsResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.categoricalStatsResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.kAnonymityResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.lDiversityResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.kMapEstimationResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.decode(reader, reader.uint32());
                                    break;
                                case 9:
                                    message.deltaPresenceEstimationResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.decode(reader, reader.uint32());
                                    break;
                                case 10:
                                    message.requestedOptions = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeDataSourceRiskDetails message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails} AnalyzeDataSourceRiskDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeDataSourceRiskDetails.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeDataSourceRiskDetails message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeDataSourceRiskDetails.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.requestedPrivacyMetric != null && message.hasOwnProperty("requestedPrivacyMetric")) {
                                var error = $root.google.privacy.dlp.v2.PrivacyMetric.verify(message.requestedPrivacyMetric);
                                if (error)
                                    return "requestedPrivacyMetric." + error;
                            }
                            if (message.requestedSourceTable != null && message.hasOwnProperty("requestedSourceTable")) {
                                var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.requestedSourceTable);
                                if (error)
                                    return "requestedSourceTable." + error;
                            }
                            if (message.numericalStatsResult != null && message.hasOwnProperty("numericalStatsResult")) {
                                properties.result = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.verify(message.numericalStatsResult);
                                    if (error)
                                        return "numericalStatsResult." + error;
                                }
                            }
                            if (message.categoricalStatsResult != null && message.hasOwnProperty("categoricalStatsResult")) {
                                if (properties.result === 1)
                                    return "result: multiple values";
                                properties.result = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.verify(message.categoricalStatsResult);
                                    if (error)
                                        return "categoricalStatsResult." + error;
                                }
                            }
                            if (message.kAnonymityResult != null && message.hasOwnProperty("kAnonymityResult")) {
                                if (properties.result === 1)
                                    return "result: multiple values";
                                properties.result = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.verify(message.kAnonymityResult);
                                    if (error)
                                        return "kAnonymityResult." + error;
                                }
                            }
                            if (message.lDiversityResult != null && message.hasOwnProperty("lDiversityResult")) {
                                if (properties.result === 1)
                                    return "result: multiple values";
                                properties.result = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.verify(message.lDiversityResult);
                                    if (error)
                                        return "lDiversityResult." + error;
                                }
                            }
                            if (message.kMapEstimationResult != null && message.hasOwnProperty("kMapEstimationResult")) {
                                if (properties.result === 1)
                                    return "result: multiple values";
                                properties.result = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.verify(message.kMapEstimationResult);
                                    if (error)
                                        return "kMapEstimationResult." + error;
                                }
                            }
                            if (message.deltaPresenceEstimationResult != null && message.hasOwnProperty("deltaPresenceEstimationResult")) {
                                if (properties.result === 1)
                                    return "result: multiple values";
                                properties.result = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.verify(message.deltaPresenceEstimationResult);
                                    if (error)
                                        return "deltaPresenceEstimationResult." + error;
                                }
                            }
                            if (message.requestedOptions != null && message.hasOwnProperty("requestedOptions")) {
                                var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.verify(message.requestedOptions);
                                if (error)
                                    return "requestedOptions." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeDataSourceRiskDetails message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails} AnalyzeDataSourceRiskDetails
                         */
                        AnalyzeDataSourceRiskDetails.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails();
                            if (object.requestedPrivacyMetric != null) {
                                if (typeof object.requestedPrivacyMetric !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requestedPrivacyMetric: object expected");
                                message.requestedPrivacyMetric = $root.google.privacy.dlp.v2.PrivacyMetric.fromObject(object.requestedPrivacyMetric);
                            }
                            if (object.requestedSourceTable != null) {
                                if (typeof object.requestedSourceTable !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requestedSourceTable: object expected");
                                message.requestedSourceTable = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.requestedSourceTable);
                            }
                            if (object.numericalStatsResult != null) {
                                if (typeof object.numericalStatsResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.numericalStatsResult: object expected");
                                message.numericalStatsResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.fromObject(object.numericalStatsResult);
                            }
                            if (object.categoricalStatsResult != null) {
                                if (typeof object.categoricalStatsResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.categoricalStatsResult: object expected");
                                message.categoricalStatsResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.fromObject(object.categoricalStatsResult);
                            }
                            if (object.kAnonymityResult != null) {
                                if (typeof object.kAnonymityResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.kAnonymityResult: object expected");
                                message.kAnonymityResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.fromObject(object.kAnonymityResult);
                            }
                            if (object.lDiversityResult != null) {
                                if (typeof object.lDiversityResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.lDiversityResult: object expected");
                                message.lDiversityResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.fromObject(object.lDiversityResult);
                            }
                            if (object.kMapEstimationResult != null) {
                                if (typeof object.kMapEstimationResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.kMapEstimationResult: object expected");
                                message.kMapEstimationResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.fromObject(object.kMapEstimationResult);
                            }
                            if (object.deltaPresenceEstimationResult != null) {
                                if (typeof object.deltaPresenceEstimationResult !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.deltaPresenceEstimationResult: object expected");
                                message.deltaPresenceEstimationResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.fromObject(object.deltaPresenceEstimationResult);
                            }
                            if (object.requestedOptions != null) {
                                if (typeof object.requestedOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requestedOptions: object expected");
                                message.requestedOptions = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.fromObject(object.requestedOptions);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeDataSourceRiskDetails message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @static
                         * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails} message AnalyzeDataSourceRiskDetails
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeDataSourceRiskDetails.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.requestedPrivacyMetric = null;
                                object.requestedSourceTable = null;
                                object.requestedOptions = null;
                            }
                            if (message.requestedPrivacyMetric != null && message.hasOwnProperty("requestedPrivacyMetric"))
                                object.requestedPrivacyMetric = $root.google.privacy.dlp.v2.PrivacyMetric.toObject(message.requestedPrivacyMetric, options);
                            if (message.requestedSourceTable != null && message.hasOwnProperty("requestedSourceTable"))
                                object.requestedSourceTable = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.requestedSourceTable, options);
                            if (message.numericalStatsResult != null && message.hasOwnProperty("numericalStatsResult")) {
                                object.numericalStatsResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.toObject(message.numericalStatsResult, options);
                                if (options.oneofs)
                                    object.result = "numericalStatsResult";
                            }
                            if (message.categoricalStatsResult != null && message.hasOwnProperty("categoricalStatsResult")) {
                                object.categoricalStatsResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.toObject(message.categoricalStatsResult, options);
                                if (options.oneofs)
                                    object.result = "categoricalStatsResult";
                            }
                            if (message.kAnonymityResult != null && message.hasOwnProperty("kAnonymityResult")) {
                                object.kAnonymityResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.toObject(message.kAnonymityResult, options);
                                if (options.oneofs)
                                    object.result = "kAnonymityResult";
                            }
                            if (message.lDiversityResult != null && message.hasOwnProperty("lDiversityResult")) {
                                object.lDiversityResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.toObject(message.lDiversityResult, options);
                                if (options.oneofs)
                                    object.result = "lDiversityResult";
                            }
                            if (message.kMapEstimationResult != null && message.hasOwnProperty("kMapEstimationResult")) {
                                object.kMapEstimationResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.toObject(message.kMapEstimationResult, options);
                                if (options.oneofs)
                                    object.result = "kMapEstimationResult";
                            }
                            if (message.deltaPresenceEstimationResult != null && message.hasOwnProperty("deltaPresenceEstimationResult")) {
                                object.deltaPresenceEstimationResult = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.toObject(message.deltaPresenceEstimationResult, options);
                                if (options.oneofs)
                                    object.result = "deltaPresenceEstimationResult";
                            }
                            if (message.requestedOptions != null && message.hasOwnProperty("requestedOptions"))
                                object.requestedOptions = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.toObject(message.requestedOptions, options);
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeDataSourceRiskDetails to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeDataSourceRiskDetails.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        AnalyzeDataSourceRiskDetails.NumericalStatsResult = (function() {
    
                            /**
                             * Properties of a NumericalStatsResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface INumericalStatsResult
                             * @property {google.privacy.dlp.v2.IValue|null} [minValue] NumericalStatsResult minValue
                             * @property {google.privacy.dlp.v2.IValue|null} [maxValue] NumericalStatsResult maxValue
                             * @property {Array.<google.privacy.dlp.v2.IValue>|null} [quantileValues] NumericalStatsResult quantileValues
                             */
    
                            /**
                             * Constructs a new NumericalStatsResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a NumericalStatsResult.
                             * @implements INumericalStatsResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.INumericalStatsResult=} [properties] Properties to set
                             */
                            function NumericalStatsResult(properties) {
                                this.quantileValues = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * NumericalStatsResult minValue.
                             * @member {google.privacy.dlp.v2.IValue|null|undefined} minValue
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @instance
                             */
                            NumericalStatsResult.prototype.minValue = null;
    
                            /**
                             * NumericalStatsResult maxValue.
                             * @member {google.privacy.dlp.v2.IValue|null|undefined} maxValue
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @instance
                             */
                            NumericalStatsResult.prototype.maxValue = null;
    
                            /**
                             * NumericalStatsResult quantileValues.
                             * @member {Array.<google.privacy.dlp.v2.IValue>} quantileValues
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @instance
                             */
                            NumericalStatsResult.prototype.quantileValues = $util.emptyArray;
    
                            /**
                             * Creates a new NumericalStatsResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.INumericalStatsResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult} NumericalStatsResult instance
                             */
                            NumericalStatsResult.create = function create(properties) {
                                return new NumericalStatsResult(properties);
                            };
    
                            /**
                             * Encodes the specified NumericalStatsResult message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.INumericalStatsResult} message NumericalStatsResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NumericalStatsResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.minValue != null && Object.hasOwnProperty.call(message, "minValue"))
                                    $root.google.privacy.dlp.v2.Value.encode(message.minValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.maxValue != null && Object.hasOwnProperty.call(message, "maxValue"))
                                    $root.google.privacy.dlp.v2.Value.encode(message.maxValue, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.quantileValues != null && message.quantileValues.length)
                                    for (var i = 0; i < message.quantileValues.length; ++i)
                                        $root.google.privacy.dlp.v2.Value.encode(message.quantileValues[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified NumericalStatsResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.INumericalStatsResult} message NumericalStatsResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NumericalStatsResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a NumericalStatsResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult} NumericalStatsResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NumericalStatsResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.minValue = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.maxValue = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        if (!(message.quantileValues && message.quantileValues.length))
                                            message.quantileValues = [];
                                        message.quantileValues.push($root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a NumericalStatsResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult} NumericalStatsResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NumericalStatsResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a NumericalStatsResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NumericalStatsResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.minValue != null && message.hasOwnProperty("minValue")) {
                                    var error = $root.google.privacy.dlp.v2.Value.verify(message.minValue);
                                    if (error)
                                        return "minValue." + error;
                                }
                                if (message.maxValue != null && message.hasOwnProperty("maxValue")) {
                                    var error = $root.google.privacy.dlp.v2.Value.verify(message.maxValue);
                                    if (error)
                                        return "maxValue." + error;
                                }
                                if (message.quantileValues != null && message.hasOwnProperty("quantileValues")) {
                                    if (!Array.isArray(message.quantileValues))
                                        return "quantileValues: array expected";
                                    for (var i = 0; i < message.quantileValues.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.Value.verify(message.quantileValues[i]);
                                        if (error)
                                            return "quantileValues." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a NumericalStatsResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult} NumericalStatsResult
                             */
                            NumericalStatsResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult();
                                if (object.minValue != null) {
                                    if (typeof object.minValue !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.minValue: object expected");
                                    message.minValue = $root.google.privacy.dlp.v2.Value.fromObject(object.minValue);
                                }
                                if (object.maxValue != null) {
                                    if (typeof object.maxValue !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.maxValue: object expected");
                                    message.maxValue = $root.google.privacy.dlp.v2.Value.fromObject(object.maxValue);
                                }
                                if (object.quantileValues) {
                                    if (!Array.isArray(object.quantileValues))
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantileValues: array expected");
                                    message.quantileValues = [];
                                    for (var i = 0; i < object.quantileValues.length; ++i) {
                                        if (typeof object.quantileValues[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantileValues: object expected");
                                        message.quantileValues[i] = $root.google.privacy.dlp.v2.Value.fromObject(object.quantileValues[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a NumericalStatsResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult} message NumericalStatsResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NumericalStatsResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.quantileValues = [];
                                if (options.defaults) {
                                    object.minValue = null;
                                    object.maxValue = null;
                                }
                                if (message.minValue != null && message.hasOwnProperty("minValue"))
                                    object.minValue = $root.google.privacy.dlp.v2.Value.toObject(message.minValue, options);
                                if (message.maxValue != null && message.hasOwnProperty("maxValue"))
                                    object.maxValue = $root.google.privacy.dlp.v2.Value.toObject(message.maxValue, options);
                                if (message.quantileValues && message.quantileValues.length) {
                                    object.quantileValues = [];
                                    for (var j = 0; j < message.quantileValues.length; ++j)
                                        object.quantileValues[j] = $root.google.privacy.dlp.v2.Value.toObject(message.quantileValues[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this NumericalStatsResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NumericalStatsResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return NumericalStatsResult;
                        })();
    
                        AnalyzeDataSourceRiskDetails.CategoricalStatsResult = (function() {
    
                            /**
                             * Properties of a CategoricalStatsResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface ICategoricalStatsResult
                             * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.ICategoricalStatsHistogramBucket>|null} [valueFrequencyHistogramBuckets] CategoricalStatsResult valueFrequencyHistogramBuckets
                             */
    
                            /**
                             * Constructs a new CategoricalStatsResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a CategoricalStatsResult.
                             * @implements ICategoricalStatsResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ICategoricalStatsResult=} [properties] Properties to set
                             */
                            function CategoricalStatsResult(properties) {
                                this.valueFrequencyHistogramBuckets = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CategoricalStatsResult valueFrequencyHistogramBuckets.
                             * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.ICategoricalStatsHistogramBucket>} valueFrequencyHistogramBuckets
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @instance
                             */
                            CategoricalStatsResult.prototype.valueFrequencyHistogramBuckets = $util.emptyArray;
    
                            /**
                             * Creates a new CategoricalStatsResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ICategoricalStatsResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult} CategoricalStatsResult instance
                             */
                            CategoricalStatsResult.create = function create(properties) {
                                return new CategoricalStatsResult(properties);
                            };
    
                            /**
                             * Encodes the specified CategoricalStatsResult message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ICategoricalStatsResult} message CategoricalStatsResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CategoricalStatsResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.valueFrequencyHistogramBuckets != null && message.valueFrequencyHistogramBuckets.length)
                                    for (var i = 0; i < message.valueFrequencyHistogramBuckets.length; ++i)
                                        $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.encode(message.valueFrequencyHistogramBuckets[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CategoricalStatsResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ICategoricalStatsResult} message CategoricalStatsResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CategoricalStatsResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CategoricalStatsResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult} CategoricalStatsResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CategoricalStatsResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 5:
                                        if (!(message.valueFrequencyHistogramBuckets && message.valueFrequencyHistogramBuckets.length))
                                            message.valueFrequencyHistogramBuckets = [];
                                        message.valueFrequencyHistogramBuckets.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CategoricalStatsResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult} CategoricalStatsResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CategoricalStatsResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CategoricalStatsResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CategoricalStatsResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.valueFrequencyHistogramBuckets != null && message.hasOwnProperty("valueFrequencyHistogramBuckets")) {
                                    if (!Array.isArray(message.valueFrequencyHistogramBuckets))
                                        return "valueFrequencyHistogramBuckets: array expected";
                                    for (var i = 0; i < message.valueFrequencyHistogramBuckets.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.verify(message.valueFrequencyHistogramBuckets[i]);
                                        if (error)
                                            return "valueFrequencyHistogramBuckets." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CategoricalStatsResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult} CategoricalStatsResult
                             */
                            CategoricalStatsResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult();
                                if (object.valueFrequencyHistogramBuckets) {
                                    if (!Array.isArray(object.valueFrequencyHistogramBuckets))
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.valueFrequencyHistogramBuckets: array expected");
                                    message.valueFrequencyHistogramBuckets = [];
                                    for (var i = 0; i < object.valueFrequencyHistogramBuckets.length; ++i) {
                                        if (typeof object.valueFrequencyHistogramBuckets[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.valueFrequencyHistogramBuckets: object expected");
                                        message.valueFrequencyHistogramBuckets[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.fromObject(object.valueFrequencyHistogramBuckets[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CategoricalStatsResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult} message CategoricalStatsResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CategoricalStatsResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.valueFrequencyHistogramBuckets = [];
                                if (message.valueFrequencyHistogramBuckets && message.valueFrequencyHistogramBuckets.length) {
                                    object.valueFrequencyHistogramBuckets = [];
                                    for (var j = 0; j < message.valueFrequencyHistogramBuckets.length; ++j)
                                        object.valueFrequencyHistogramBuckets[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.toObject(message.valueFrequencyHistogramBuckets[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this CategoricalStatsResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CategoricalStatsResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            CategoricalStatsResult.CategoricalStatsHistogramBucket = (function() {
    
                                /**
                                 * Properties of a CategoricalStatsHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                                 * @interface ICategoricalStatsHistogramBucket
                                 * @property {number|Long|null} [valueFrequencyLowerBound] CategoricalStatsHistogramBucket valueFrequencyLowerBound
                                 * @property {number|Long|null} [valueFrequencyUpperBound] CategoricalStatsHistogramBucket valueFrequencyUpperBound
                                 * @property {number|Long|null} [bucketSize] CategoricalStatsHistogramBucket bucketSize
                                 * @property {Array.<google.privacy.dlp.v2.IValueFrequency>|null} [bucketValues] CategoricalStatsHistogramBucket bucketValues
                                 * @property {number|Long|null} [bucketValueCount] CategoricalStatsHistogramBucket bucketValueCount
                                 */
    
                                /**
                                 * Constructs a new CategoricalStatsHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
                                 * @classdesc Represents a CategoricalStatsHistogramBucket.
                                 * @implements ICategoricalStatsHistogramBucket
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.ICategoricalStatsHistogramBucket=} [properties] Properties to set
                                 */
                                function CategoricalStatsHistogramBucket(properties) {
                                    this.bucketValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * CategoricalStatsHistogramBucket valueFrequencyLowerBound.
                                 * @member {number|Long} valueFrequencyLowerBound
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @instance
                                 */
                                CategoricalStatsHistogramBucket.prototype.valueFrequencyLowerBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * CategoricalStatsHistogramBucket valueFrequencyUpperBound.
                                 * @member {number|Long} valueFrequencyUpperBound
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @instance
                                 */
                                CategoricalStatsHistogramBucket.prototype.valueFrequencyUpperBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * CategoricalStatsHistogramBucket bucketSize.
                                 * @member {number|Long} bucketSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @instance
                                 */
                                CategoricalStatsHistogramBucket.prototype.bucketSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * CategoricalStatsHistogramBucket bucketValues.
                                 * @member {Array.<google.privacy.dlp.v2.IValueFrequency>} bucketValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @instance
                                 */
                                CategoricalStatsHistogramBucket.prototype.bucketValues = $util.emptyArray;
    
                                /**
                                 * CategoricalStatsHistogramBucket bucketValueCount.
                                 * @member {number|Long} bucketValueCount
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @instance
                                 */
                                CategoricalStatsHistogramBucket.prototype.bucketValueCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new CategoricalStatsHistogramBucket instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.ICategoricalStatsHistogramBucket=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket} CategoricalStatsHistogramBucket instance
                                 */
                                CategoricalStatsHistogramBucket.create = function create(properties) {
                                    return new CategoricalStatsHistogramBucket(properties);
                                };
    
                                /**
                                 * Encodes the specified CategoricalStatsHistogramBucket message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.ICategoricalStatsHistogramBucket} message CategoricalStatsHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CategoricalStatsHistogramBucket.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.valueFrequencyLowerBound != null && Object.hasOwnProperty.call(message, "valueFrequencyLowerBound"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.valueFrequencyLowerBound);
                                    if (message.valueFrequencyUpperBound != null && Object.hasOwnProperty.call(message, "valueFrequencyUpperBound"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.valueFrequencyUpperBound);
                                    if (message.bucketSize != null && Object.hasOwnProperty.call(message, "bucketSize"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.bucketSize);
                                    if (message.bucketValues != null && message.bucketValues.length)
                                        for (var i = 0; i < message.bucketValues.length; ++i)
                                            $root.google.privacy.dlp.v2.ValueFrequency.encode(message.bucketValues[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.bucketValueCount != null && Object.hasOwnProperty.call(message, "bucketValueCount"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.bucketValueCount);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified CategoricalStatsHistogramBucket message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.ICategoricalStatsHistogramBucket} message CategoricalStatsHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CategoricalStatsHistogramBucket.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a CategoricalStatsHistogramBucket message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket} CategoricalStatsHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CategoricalStatsHistogramBucket.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.valueFrequencyLowerBound = reader.int64();
                                            break;
                                        case 2:
                                            message.valueFrequencyUpperBound = reader.int64();
                                            break;
                                        case 3:
                                            message.bucketSize = reader.int64();
                                            break;
                                        case 4:
                                            if (!(message.bucketValues && message.bucketValues.length))
                                                message.bucketValues = [];
                                            message.bucketValues.push($root.google.privacy.dlp.v2.ValueFrequency.decode(reader, reader.uint32()));
                                            break;
                                        case 5:
                                            message.bucketValueCount = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a CategoricalStatsHistogramBucket message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket} CategoricalStatsHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CategoricalStatsHistogramBucket.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a CategoricalStatsHistogramBucket message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                CategoricalStatsHistogramBucket.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.valueFrequencyLowerBound != null && message.hasOwnProperty("valueFrequencyLowerBound"))
                                        if (!$util.isInteger(message.valueFrequencyLowerBound) && !(message.valueFrequencyLowerBound && $util.isInteger(message.valueFrequencyLowerBound.low) && $util.isInteger(message.valueFrequencyLowerBound.high)))
                                            return "valueFrequencyLowerBound: integer|Long expected";
                                    if (message.valueFrequencyUpperBound != null && message.hasOwnProperty("valueFrequencyUpperBound"))
                                        if (!$util.isInteger(message.valueFrequencyUpperBound) && !(message.valueFrequencyUpperBound && $util.isInteger(message.valueFrequencyUpperBound.low) && $util.isInteger(message.valueFrequencyUpperBound.high)))
                                            return "valueFrequencyUpperBound: integer|Long expected";
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (!$util.isInteger(message.bucketSize) && !(message.bucketSize && $util.isInteger(message.bucketSize.low) && $util.isInteger(message.bucketSize.high)))
                                            return "bucketSize: integer|Long expected";
                                    if (message.bucketValues != null && message.hasOwnProperty("bucketValues")) {
                                        if (!Array.isArray(message.bucketValues))
                                            return "bucketValues: array expected";
                                        for (var i = 0; i < message.bucketValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.ValueFrequency.verify(message.bucketValues[i]);
                                            if (error)
                                                return "bucketValues." + error;
                                        }
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (!$util.isInteger(message.bucketValueCount) && !(message.bucketValueCount && $util.isInteger(message.bucketValueCount.low) && $util.isInteger(message.bucketValueCount.high)))
                                            return "bucketValueCount: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a CategoricalStatsHistogramBucket message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket} CategoricalStatsHistogramBucket
                                 */
                                CategoricalStatsHistogramBucket.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket();
                                    if (object.valueFrequencyLowerBound != null)
                                        if ($util.Long)
                                            (message.valueFrequencyLowerBound = $util.Long.fromValue(object.valueFrequencyLowerBound)).unsigned = false;
                                        else if (typeof object.valueFrequencyLowerBound === "string")
                                            message.valueFrequencyLowerBound = parseInt(object.valueFrequencyLowerBound, 10);
                                        else if (typeof object.valueFrequencyLowerBound === "number")
                                            message.valueFrequencyLowerBound = object.valueFrequencyLowerBound;
                                        else if (typeof object.valueFrequencyLowerBound === "object")
                                            message.valueFrequencyLowerBound = new $util.LongBits(object.valueFrequencyLowerBound.low >>> 0, object.valueFrequencyLowerBound.high >>> 0).toNumber();
                                    if (object.valueFrequencyUpperBound != null)
                                        if ($util.Long)
                                            (message.valueFrequencyUpperBound = $util.Long.fromValue(object.valueFrequencyUpperBound)).unsigned = false;
                                        else if (typeof object.valueFrequencyUpperBound === "string")
                                            message.valueFrequencyUpperBound = parseInt(object.valueFrequencyUpperBound, 10);
                                        else if (typeof object.valueFrequencyUpperBound === "number")
                                            message.valueFrequencyUpperBound = object.valueFrequencyUpperBound;
                                        else if (typeof object.valueFrequencyUpperBound === "object")
                                            message.valueFrequencyUpperBound = new $util.LongBits(object.valueFrequencyUpperBound.low >>> 0, object.valueFrequencyUpperBound.high >>> 0).toNumber();
                                    if (object.bucketSize != null)
                                        if ($util.Long)
                                            (message.bucketSize = $util.Long.fromValue(object.bucketSize)).unsigned = false;
                                        else if (typeof object.bucketSize === "string")
                                            message.bucketSize = parseInt(object.bucketSize, 10);
                                        else if (typeof object.bucketSize === "number")
                                            message.bucketSize = object.bucketSize;
                                        else if (typeof object.bucketSize === "object")
                                            message.bucketSize = new $util.LongBits(object.bucketSize.low >>> 0, object.bucketSize.high >>> 0).toNumber();
                                    if (object.bucketValues) {
                                        if (!Array.isArray(object.bucketValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucketValues: array expected");
                                        message.bucketValues = [];
                                        for (var i = 0; i < object.bucketValues.length; ++i) {
                                            if (typeof object.bucketValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucketValues: object expected");
                                            message.bucketValues[i] = $root.google.privacy.dlp.v2.ValueFrequency.fromObject(object.bucketValues[i]);
                                        }
                                    }
                                    if (object.bucketValueCount != null)
                                        if ($util.Long)
                                            (message.bucketValueCount = $util.Long.fromValue(object.bucketValueCount)).unsigned = false;
                                        else if (typeof object.bucketValueCount === "string")
                                            message.bucketValueCount = parseInt(object.bucketValueCount, 10);
                                        else if (typeof object.bucketValueCount === "number")
                                            message.bucketValueCount = object.bucketValueCount;
                                        else if (typeof object.bucketValueCount === "object")
                                            message.bucketValueCount = new $util.LongBits(object.bucketValueCount.low >>> 0, object.bucketValueCount.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a CategoricalStatsHistogramBucket message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket} message CategoricalStatsHistogramBucket
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                CategoricalStatsHistogramBucket.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.bucketValues = [];
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.valueFrequencyLowerBound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.valueFrequencyLowerBound = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.valueFrequencyUpperBound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.valueFrequencyUpperBound = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketSize = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketValueCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketValueCount = options.longs === String ? "0" : 0;
                                    }
                                    if (message.valueFrequencyLowerBound != null && message.hasOwnProperty("valueFrequencyLowerBound"))
                                        if (typeof message.valueFrequencyLowerBound === "number")
                                            object.valueFrequencyLowerBound = options.longs === String ? String(message.valueFrequencyLowerBound) : message.valueFrequencyLowerBound;
                                        else
                                            object.valueFrequencyLowerBound = options.longs === String ? $util.Long.prototype.toString.call(message.valueFrequencyLowerBound) : options.longs === Number ? new $util.LongBits(message.valueFrequencyLowerBound.low >>> 0, message.valueFrequencyLowerBound.high >>> 0).toNumber() : message.valueFrequencyLowerBound;
                                    if (message.valueFrequencyUpperBound != null && message.hasOwnProperty("valueFrequencyUpperBound"))
                                        if (typeof message.valueFrequencyUpperBound === "number")
                                            object.valueFrequencyUpperBound = options.longs === String ? String(message.valueFrequencyUpperBound) : message.valueFrequencyUpperBound;
                                        else
                                            object.valueFrequencyUpperBound = options.longs === String ? $util.Long.prototype.toString.call(message.valueFrequencyUpperBound) : options.longs === Number ? new $util.LongBits(message.valueFrequencyUpperBound.low >>> 0, message.valueFrequencyUpperBound.high >>> 0).toNumber() : message.valueFrequencyUpperBound;
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (typeof message.bucketSize === "number")
                                            object.bucketSize = options.longs === String ? String(message.bucketSize) : message.bucketSize;
                                        else
                                            object.bucketSize = options.longs === String ? $util.Long.prototype.toString.call(message.bucketSize) : options.longs === Number ? new $util.LongBits(message.bucketSize.low >>> 0, message.bucketSize.high >>> 0).toNumber() : message.bucketSize;
                                    if (message.bucketValues && message.bucketValues.length) {
                                        object.bucketValues = [];
                                        for (var j = 0; j < message.bucketValues.length; ++j)
                                            object.bucketValues[j] = $root.google.privacy.dlp.v2.ValueFrequency.toObject(message.bucketValues[j], options);
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (typeof message.bucketValueCount === "number")
                                            object.bucketValueCount = options.longs === String ? String(message.bucketValueCount) : message.bucketValueCount;
                                        else
                                            object.bucketValueCount = options.longs === String ? $util.Long.prototype.toString.call(message.bucketValueCount) : options.longs === Number ? new $util.LongBits(message.bucketValueCount.low >>> 0, message.bucketValueCount.high >>> 0).toNumber() : message.bucketValueCount;
                                    return object;
                                };
    
                                /**
                                 * Converts this CategoricalStatsHistogramBucket to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                CategoricalStatsHistogramBucket.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return CategoricalStatsHistogramBucket;
                            })();
    
                            return CategoricalStatsResult;
                        })();
    
                        AnalyzeDataSourceRiskDetails.KAnonymityResult = (function() {
    
                            /**
                             * Properties of a KAnonymityResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface IKAnonymityResult
                             * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityHistogramBucket>|null} [equivalenceClassHistogramBuckets] KAnonymityResult equivalenceClassHistogramBuckets
                             */
    
                            /**
                             * Constructs a new KAnonymityResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a KAnonymityResult.
                             * @implements IKAnonymityResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKAnonymityResult=} [properties] Properties to set
                             */
                            function KAnonymityResult(properties) {
                                this.equivalenceClassHistogramBuckets = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KAnonymityResult equivalenceClassHistogramBuckets.
                             * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityHistogramBucket>} equivalenceClassHistogramBuckets
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @instance
                             */
                            KAnonymityResult.prototype.equivalenceClassHistogramBuckets = $util.emptyArray;
    
                            /**
                             * Creates a new KAnonymityResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKAnonymityResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult} KAnonymityResult instance
                             */
                            KAnonymityResult.create = function create(properties) {
                                return new KAnonymityResult(properties);
                            };
    
                            /**
                             * Encodes the specified KAnonymityResult message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKAnonymityResult} message KAnonymityResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KAnonymityResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.equivalenceClassHistogramBuckets != null && message.equivalenceClassHistogramBuckets.length)
                                    for (var i = 0; i < message.equivalenceClassHistogramBuckets.length; ++i)
                                        $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.encode(message.equivalenceClassHistogramBuckets[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KAnonymityResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKAnonymityResult} message KAnonymityResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KAnonymityResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KAnonymityResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult} KAnonymityResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KAnonymityResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 5:
                                        if (!(message.equivalenceClassHistogramBuckets && message.equivalenceClassHistogramBuckets.length))
                                            message.equivalenceClassHistogramBuckets = [];
                                        message.equivalenceClassHistogramBuckets.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KAnonymityResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult} KAnonymityResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KAnonymityResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KAnonymityResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KAnonymityResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.equivalenceClassHistogramBuckets != null && message.hasOwnProperty("equivalenceClassHistogramBuckets")) {
                                    if (!Array.isArray(message.equivalenceClassHistogramBuckets))
                                        return "equivalenceClassHistogramBuckets: array expected";
                                    for (var i = 0; i < message.equivalenceClassHistogramBuckets.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.verify(message.equivalenceClassHistogramBuckets[i]);
                                        if (error)
                                            return "equivalenceClassHistogramBuckets." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a KAnonymityResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult} KAnonymityResult
                             */
                            KAnonymityResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult();
                                if (object.equivalenceClassHistogramBuckets) {
                                    if (!Array.isArray(object.equivalenceClassHistogramBuckets))
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalenceClassHistogramBuckets: array expected");
                                    message.equivalenceClassHistogramBuckets = [];
                                    for (var i = 0; i < object.equivalenceClassHistogramBuckets.length; ++i) {
                                        if (typeof object.equivalenceClassHistogramBuckets[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalenceClassHistogramBuckets: object expected");
                                        message.equivalenceClassHistogramBuckets[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.fromObject(object.equivalenceClassHistogramBuckets[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KAnonymityResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult} message KAnonymityResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KAnonymityResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.equivalenceClassHistogramBuckets = [];
                                if (message.equivalenceClassHistogramBuckets && message.equivalenceClassHistogramBuckets.length) {
                                    object.equivalenceClassHistogramBuckets = [];
                                    for (var j = 0; j < message.equivalenceClassHistogramBuckets.length; ++j)
                                        object.equivalenceClassHistogramBuckets[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.toObject(message.equivalenceClassHistogramBuckets[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this KAnonymityResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KAnonymityResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            KAnonymityResult.KAnonymityEquivalenceClass = (function() {
    
                                /**
                                 * Properties of a KAnonymityEquivalenceClass.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                                 * @interface IKAnonymityEquivalenceClass
                                 * @property {Array.<google.privacy.dlp.v2.IValue>|null} [quasiIdsValues] KAnonymityEquivalenceClass quasiIdsValues
                                 * @property {number|Long|null} [equivalenceClassSize] KAnonymityEquivalenceClass equivalenceClassSize
                                 */
    
                                /**
                                 * Constructs a new KAnonymityEquivalenceClass.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                                 * @classdesc Represents a KAnonymityEquivalenceClass.
                                 * @implements IKAnonymityEquivalenceClass
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityEquivalenceClass=} [properties] Properties to set
                                 */
                                function KAnonymityEquivalenceClass(properties) {
                                    this.quasiIdsValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * KAnonymityEquivalenceClass quasiIdsValues.
                                 * @member {Array.<google.privacy.dlp.v2.IValue>} quasiIdsValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @instance
                                 */
                                KAnonymityEquivalenceClass.prototype.quasiIdsValues = $util.emptyArray;
    
                                /**
                                 * KAnonymityEquivalenceClass equivalenceClassSize.
                                 * @member {number|Long} equivalenceClassSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @instance
                                 */
                                KAnonymityEquivalenceClass.prototype.equivalenceClassSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new KAnonymityEquivalenceClass instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityEquivalenceClass=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass} KAnonymityEquivalenceClass instance
                                 */
                                KAnonymityEquivalenceClass.create = function create(properties) {
                                    return new KAnonymityEquivalenceClass(properties);
                                };
    
                                /**
                                 * Encodes the specified KAnonymityEquivalenceClass message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityEquivalenceClass} message KAnonymityEquivalenceClass message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KAnonymityEquivalenceClass.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.quasiIdsValues != null && message.quasiIdsValues.length)
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i)
                                            $root.google.privacy.dlp.v2.Value.encode(message.quasiIdsValues[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.equivalenceClassSize != null && Object.hasOwnProperty.call(message, "equivalenceClassSize"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.equivalenceClassSize);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified KAnonymityEquivalenceClass message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityEquivalenceClass} message KAnonymityEquivalenceClass message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KAnonymityEquivalenceClass.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a KAnonymityEquivalenceClass message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass} KAnonymityEquivalenceClass
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KAnonymityEquivalenceClass.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.quasiIdsValues && message.quasiIdsValues.length))
                                                message.quasiIdsValues = [];
                                            message.quasiIdsValues.push($root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32()));
                                            break;
                                        case 2:
                                            message.equivalenceClassSize = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a KAnonymityEquivalenceClass message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass} KAnonymityEquivalenceClass
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KAnonymityEquivalenceClass.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a KAnonymityEquivalenceClass message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                KAnonymityEquivalenceClass.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.quasiIdsValues != null && message.hasOwnProperty("quasiIdsValues")) {
                                        if (!Array.isArray(message.quasiIdsValues))
                                            return "quasiIdsValues: array expected";
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.Value.verify(message.quasiIdsValues[i]);
                                            if (error)
                                                return "quasiIdsValues." + error;
                                        }
                                    }
                                    if (message.equivalenceClassSize != null && message.hasOwnProperty("equivalenceClassSize"))
                                        if (!$util.isInteger(message.equivalenceClassSize) && !(message.equivalenceClassSize && $util.isInteger(message.equivalenceClassSize.low) && $util.isInteger(message.equivalenceClassSize.high)))
                                            return "equivalenceClassSize: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a KAnonymityEquivalenceClass message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass} KAnonymityEquivalenceClass
                                 */
                                KAnonymityEquivalenceClass.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass();
                                    if (object.quasiIdsValues) {
                                        if (!Array.isArray(object.quasiIdsValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasiIdsValues: array expected");
                                        message.quasiIdsValues = [];
                                        for (var i = 0; i < object.quasiIdsValues.length; ++i) {
                                            if (typeof object.quasiIdsValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasiIdsValues: object expected");
                                            message.quasiIdsValues[i] = $root.google.privacy.dlp.v2.Value.fromObject(object.quasiIdsValues[i]);
                                        }
                                    }
                                    if (object.equivalenceClassSize != null)
                                        if ($util.Long)
                                            (message.equivalenceClassSize = $util.Long.fromValue(object.equivalenceClassSize)).unsigned = false;
                                        else if (typeof object.equivalenceClassSize === "string")
                                            message.equivalenceClassSize = parseInt(object.equivalenceClassSize, 10);
                                        else if (typeof object.equivalenceClassSize === "number")
                                            message.equivalenceClassSize = object.equivalenceClassSize;
                                        else if (typeof object.equivalenceClassSize === "object")
                                            message.equivalenceClassSize = new $util.LongBits(object.equivalenceClassSize.low >>> 0, object.equivalenceClassSize.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a KAnonymityEquivalenceClass message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass} message KAnonymityEquivalenceClass
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                KAnonymityEquivalenceClass.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.quasiIdsValues = [];
                                    if (options.defaults)
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.equivalenceClassSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.equivalenceClassSize = options.longs === String ? "0" : 0;
                                    if (message.quasiIdsValues && message.quasiIdsValues.length) {
                                        object.quasiIdsValues = [];
                                        for (var j = 0; j < message.quasiIdsValues.length; ++j)
                                            object.quasiIdsValues[j] = $root.google.privacy.dlp.v2.Value.toObject(message.quasiIdsValues[j], options);
                                    }
                                    if (message.equivalenceClassSize != null && message.hasOwnProperty("equivalenceClassSize"))
                                        if (typeof message.equivalenceClassSize === "number")
                                            object.equivalenceClassSize = options.longs === String ? String(message.equivalenceClassSize) : message.equivalenceClassSize;
                                        else
                                            object.equivalenceClassSize = options.longs === String ? $util.Long.prototype.toString.call(message.equivalenceClassSize) : options.longs === Number ? new $util.LongBits(message.equivalenceClassSize.low >>> 0, message.equivalenceClassSize.high >>> 0).toNumber() : message.equivalenceClassSize;
                                    return object;
                                };
    
                                /**
                                 * Converts this KAnonymityEquivalenceClass to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                KAnonymityEquivalenceClass.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return KAnonymityEquivalenceClass;
                            })();
    
                            KAnonymityResult.KAnonymityHistogramBucket = (function() {
    
                                /**
                                 * Properties of a KAnonymityHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                                 * @interface IKAnonymityHistogramBucket
                                 * @property {number|Long|null} [equivalenceClassSizeLowerBound] KAnonymityHistogramBucket equivalenceClassSizeLowerBound
                                 * @property {number|Long|null} [equivalenceClassSizeUpperBound] KAnonymityHistogramBucket equivalenceClassSizeUpperBound
                                 * @property {number|Long|null} [bucketSize] KAnonymityHistogramBucket bucketSize
                                 * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityEquivalenceClass>|null} [bucketValues] KAnonymityHistogramBucket bucketValues
                                 * @property {number|Long|null} [bucketValueCount] KAnonymityHistogramBucket bucketValueCount
                                 */
    
                                /**
                                 * Constructs a new KAnonymityHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
                                 * @classdesc Represents a KAnonymityHistogramBucket.
                                 * @implements IKAnonymityHistogramBucket
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityHistogramBucket=} [properties] Properties to set
                                 */
                                function KAnonymityHistogramBucket(properties) {
                                    this.bucketValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * KAnonymityHistogramBucket equivalenceClassSizeLowerBound.
                                 * @member {number|Long} equivalenceClassSizeLowerBound
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @instance
                                 */
                                KAnonymityHistogramBucket.prototype.equivalenceClassSizeLowerBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * KAnonymityHistogramBucket equivalenceClassSizeUpperBound.
                                 * @member {number|Long} equivalenceClassSizeUpperBound
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @instance
                                 */
                                KAnonymityHistogramBucket.prototype.equivalenceClassSizeUpperBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * KAnonymityHistogramBucket bucketSize.
                                 * @member {number|Long} bucketSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @instance
                                 */
                                KAnonymityHistogramBucket.prototype.bucketSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * KAnonymityHistogramBucket bucketValues.
                                 * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityEquivalenceClass>} bucketValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @instance
                                 */
                                KAnonymityHistogramBucket.prototype.bucketValues = $util.emptyArray;
    
                                /**
                                 * KAnonymityHistogramBucket bucketValueCount.
                                 * @member {number|Long} bucketValueCount
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @instance
                                 */
                                KAnonymityHistogramBucket.prototype.bucketValueCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new KAnonymityHistogramBucket instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityHistogramBucket=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket} KAnonymityHistogramBucket instance
                                 */
                                KAnonymityHistogramBucket.create = function create(properties) {
                                    return new KAnonymityHistogramBucket(properties);
                                };
    
                                /**
                                 * Encodes the specified KAnonymityHistogramBucket message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityHistogramBucket} message KAnonymityHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KAnonymityHistogramBucket.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.equivalenceClassSizeLowerBound != null && Object.hasOwnProperty.call(message, "equivalenceClassSizeLowerBound"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.equivalenceClassSizeLowerBound);
                                    if (message.equivalenceClassSizeUpperBound != null && Object.hasOwnProperty.call(message, "equivalenceClassSizeUpperBound"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.equivalenceClassSizeUpperBound);
                                    if (message.bucketSize != null && Object.hasOwnProperty.call(message, "bucketSize"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.bucketSize);
                                    if (message.bucketValues != null && message.bucketValues.length)
                                        for (var i = 0; i < message.bucketValues.length; ++i)
                                            $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.encode(message.bucketValues[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.bucketValueCount != null && Object.hasOwnProperty.call(message, "bucketValueCount"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.bucketValueCount);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified KAnonymityHistogramBucket message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.IKAnonymityHistogramBucket} message KAnonymityHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KAnonymityHistogramBucket.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a KAnonymityHistogramBucket message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket} KAnonymityHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KAnonymityHistogramBucket.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.equivalenceClassSizeLowerBound = reader.int64();
                                            break;
                                        case 2:
                                            message.equivalenceClassSizeUpperBound = reader.int64();
                                            break;
                                        case 3:
                                            message.bucketSize = reader.int64();
                                            break;
                                        case 4:
                                            if (!(message.bucketValues && message.bucketValues.length))
                                                message.bucketValues = [];
                                            message.bucketValues.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.decode(reader, reader.uint32()));
                                            break;
                                        case 5:
                                            message.bucketValueCount = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a KAnonymityHistogramBucket message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket} KAnonymityHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KAnonymityHistogramBucket.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a KAnonymityHistogramBucket message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                KAnonymityHistogramBucket.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.equivalenceClassSizeLowerBound != null && message.hasOwnProperty("equivalenceClassSizeLowerBound"))
                                        if (!$util.isInteger(message.equivalenceClassSizeLowerBound) && !(message.equivalenceClassSizeLowerBound && $util.isInteger(message.equivalenceClassSizeLowerBound.low) && $util.isInteger(message.equivalenceClassSizeLowerBound.high)))
                                            return "equivalenceClassSizeLowerBound: integer|Long expected";
                                    if (message.equivalenceClassSizeUpperBound != null && message.hasOwnProperty("equivalenceClassSizeUpperBound"))
                                        if (!$util.isInteger(message.equivalenceClassSizeUpperBound) && !(message.equivalenceClassSizeUpperBound && $util.isInteger(message.equivalenceClassSizeUpperBound.low) && $util.isInteger(message.equivalenceClassSizeUpperBound.high)))
                                            return "equivalenceClassSizeUpperBound: integer|Long expected";
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (!$util.isInteger(message.bucketSize) && !(message.bucketSize && $util.isInteger(message.bucketSize.low) && $util.isInteger(message.bucketSize.high)))
                                            return "bucketSize: integer|Long expected";
                                    if (message.bucketValues != null && message.hasOwnProperty("bucketValues")) {
                                        if (!Array.isArray(message.bucketValues))
                                            return "bucketValues: array expected";
                                        for (var i = 0; i < message.bucketValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.verify(message.bucketValues[i]);
                                            if (error)
                                                return "bucketValues." + error;
                                        }
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (!$util.isInteger(message.bucketValueCount) && !(message.bucketValueCount && $util.isInteger(message.bucketValueCount.low) && $util.isInteger(message.bucketValueCount.high)))
                                            return "bucketValueCount: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a KAnonymityHistogramBucket message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket} KAnonymityHistogramBucket
                                 */
                                KAnonymityHistogramBucket.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket();
                                    if (object.equivalenceClassSizeLowerBound != null)
                                        if ($util.Long)
                                            (message.equivalenceClassSizeLowerBound = $util.Long.fromValue(object.equivalenceClassSizeLowerBound)).unsigned = false;
                                        else if (typeof object.equivalenceClassSizeLowerBound === "string")
                                            message.equivalenceClassSizeLowerBound = parseInt(object.equivalenceClassSizeLowerBound, 10);
                                        else if (typeof object.equivalenceClassSizeLowerBound === "number")
                                            message.equivalenceClassSizeLowerBound = object.equivalenceClassSizeLowerBound;
                                        else if (typeof object.equivalenceClassSizeLowerBound === "object")
                                            message.equivalenceClassSizeLowerBound = new $util.LongBits(object.equivalenceClassSizeLowerBound.low >>> 0, object.equivalenceClassSizeLowerBound.high >>> 0).toNumber();
                                    if (object.equivalenceClassSizeUpperBound != null)
                                        if ($util.Long)
                                            (message.equivalenceClassSizeUpperBound = $util.Long.fromValue(object.equivalenceClassSizeUpperBound)).unsigned = false;
                                        else if (typeof object.equivalenceClassSizeUpperBound === "string")
                                            message.equivalenceClassSizeUpperBound = parseInt(object.equivalenceClassSizeUpperBound, 10);
                                        else if (typeof object.equivalenceClassSizeUpperBound === "number")
                                            message.equivalenceClassSizeUpperBound = object.equivalenceClassSizeUpperBound;
                                        else if (typeof object.equivalenceClassSizeUpperBound === "object")
                                            message.equivalenceClassSizeUpperBound = new $util.LongBits(object.equivalenceClassSizeUpperBound.low >>> 0, object.equivalenceClassSizeUpperBound.high >>> 0).toNumber();
                                    if (object.bucketSize != null)
                                        if ($util.Long)
                                            (message.bucketSize = $util.Long.fromValue(object.bucketSize)).unsigned = false;
                                        else if (typeof object.bucketSize === "string")
                                            message.bucketSize = parseInt(object.bucketSize, 10);
                                        else if (typeof object.bucketSize === "number")
                                            message.bucketSize = object.bucketSize;
                                        else if (typeof object.bucketSize === "object")
                                            message.bucketSize = new $util.LongBits(object.bucketSize.low >>> 0, object.bucketSize.high >>> 0).toNumber();
                                    if (object.bucketValues) {
                                        if (!Array.isArray(object.bucketValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucketValues: array expected");
                                        message.bucketValues = [];
                                        for (var i = 0; i < object.bucketValues.length; ++i) {
                                            if (typeof object.bucketValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucketValues: object expected");
                                            message.bucketValues[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.fromObject(object.bucketValues[i]);
                                        }
                                    }
                                    if (object.bucketValueCount != null)
                                        if ($util.Long)
                                            (message.bucketValueCount = $util.Long.fromValue(object.bucketValueCount)).unsigned = false;
                                        else if (typeof object.bucketValueCount === "string")
                                            message.bucketValueCount = parseInt(object.bucketValueCount, 10);
                                        else if (typeof object.bucketValueCount === "number")
                                            message.bucketValueCount = object.bucketValueCount;
                                        else if (typeof object.bucketValueCount === "object")
                                            message.bucketValueCount = new $util.LongBits(object.bucketValueCount.low >>> 0, object.bucketValueCount.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a KAnonymityHistogramBucket message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket} message KAnonymityHistogramBucket
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                KAnonymityHistogramBucket.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.bucketValues = [];
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.equivalenceClassSizeLowerBound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.equivalenceClassSizeLowerBound = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.equivalenceClassSizeUpperBound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.equivalenceClassSizeUpperBound = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketSize = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketValueCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketValueCount = options.longs === String ? "0" : 0;
                                    }
                                    if (message.equivalenceClassSizeLowerBound != null && message.hasOwnProperty("equivalenceClassSizeLowerBound"))
                                        if (typeof message.equivalenceClassSizeLowerBound === "number")
                                            object.equivalenceClassSizeLowerBound = options.longs === String ? String(message.equivalenceClassSizeLowerBound) : message.equivalenceClassSizeLowerBound;
                                        else
                                            object.equivalenceClassSizeLowerBound = options.longs === String ? $util.Long.prototype.toString.call(message.equivalenceClassSizeLowerBound) : options.longs === Number ? new $util.LongBits(message.equivalenceClassSizeLowerBound.low >>> 0, message.equivalenceClassSizeLowerBound.high >>> 0).toNumber() : message.equivalenceClassSizeLowerBound;
                                    if (message.equivalenceClassSizeUpperBound != null && message.hasOwnProperty("equivalenceClassSizeUpperBound"))
                                        if (typeof message.equivalenceClassSizeUpperBound === "number")
                                            object.equivalenceClassSizeUpperBound = options.longs === String ? String(message.equivalenceClassSizeUpperBound) : message.equivalenceClassSizeUpperBound;
                                        else
                                            object.equivalenceClassSizeUpperBound = options.longs === String ? $util.Long.prototype.toString.call(message.equivalenceClassSizeUpperBound) : options.longs === Number ? new $util.LongBits(message.equivalenceClassSizeUpperBound.low >>> 0, message.equivalenceClassSizeUpperBound.high >>> 0).toNumber() : message.equivalenceClassSizeUpperBound;
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (typeof message.bucketSize === "number")
                                            object.bucketSize = options.longs === String ? String(message.bucketSize) : message.bucketSize;
                                        else
                                            object.bucketSize = options.longs === String ? $util.Long.prototype.toString.call(message.bucketSize) : options.longs === Number ? new $util.LongBits(message.bucketSize.low >>> 0, message.bucketSize.high >>> 0).toNumber() : message.bucketSize;
                                    if (message.bucketValues && message.bucketValues.length) {
                                        object.bucketValues = [];
                                        for (var j = 0; j < message.bucketValues.length; ++j)
                                            object.bucketValues[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.toObject(message.bucketValues[j], options);
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (typeof message.bucketValueCount === "number")
                                            object.bucketValueCount = options.longs === String ? String(message.bucketValueCount) : message.bucketValueCount;
                                        else
                                            object.bucketValueCount = options.longs === String ? $util.Long.prototype.toString.call(message.bucketValueCount) : options.longs === Number ? new $util.LongBits(message.bucketValueCount.low >>> 0, message.bucketValueCount.high >>> 0).toNumber() : message.bucketValueCount;
                                    return object;
                                };
    
                                /**
                                 * Converts this KAnonymityHistogramBucket to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                KAnonymityHistogramBucket.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return KAnonymityHistogramBucket;
                            })();
    
                            return KAnonymityResult;
                        })();
    
                        AnalyzeDataSourceRiskDetails.LDiversityResult = (function() {
    
                            /**
                             * Properties of a LDiversityResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface ILDiversityResult
                             * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityHistogramBucket>|null} [sensitiveValueFrequencyHistogramBuckets] LDiversityResult sensitiveValueFrequencyHistogramBuckets
                             */
    
                            /**
                             * Constructs a new LDiversityResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a LDiversityResult.
                             * @implements ILDiversityResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ILDiversityResult=} [properties] Properties to set
                             */
                            function LDiversityResult(properties) {
                                this.sensitiveValueFrequencyHistogramBuckets = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * LDiversityResult sensitiveValueFrequencyHistogramBuckets.
                             * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityHistogramBucket>} sensitiveValueFrequencyHistogramBuckets
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @instance
                             */
                            LDiversityResult.prototype.sensitiveValueFrequencyHistogramBuckets = $util.emptyArray;
    
                            /**
                             * Creates a new LDiversityResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ILDiversityResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult} LDiversityResult instance
                             */
                            LDiversityResult.create = function create(properties) {
                                return new LDiversityResult(properties);
                            };
    
                            /**
                             * Encodes the specified LDiversityResult message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ILDiversityResult} message LDiversityResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LDiversityResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.sensitiveValueFrequencyHistogramBuckets != null && message.sensitiveValueFrequencyHistogramBuckets.length)
                                    for (var i = 0; i < message.sensitiveValueFrequencyHistogramBuckets.length; ++i)
                                        $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.encode(message.sensitiveValueFrequencyHistogramBuckets[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LDiversityResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.ILDiversityResult} message LDiversityResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LDiversityResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LDiversityResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult} LDiversityResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LDiversityResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 5:
                                        if (!(message.sensitiveValueFrequencyHistogramBuckets && message.sensitiveValueFrequencyHistogramBuckets.length))
                                            message.sensitiveValueFrequencyHistogramBuckets = [];
                                        message.sensitiveValueFrequencyHistogramBuckets.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LDiversityResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult} LDiversityResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LDiversityResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LDiversityResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LDiversityResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.sensitiveValueFrequencyHistogramBuckets != null && message.hasOwnProperty("sensitiveValueFrequencyHistogramBuckets")) {
                                    if (!Array.isArray(message.sensitiveValueFrequencyHistogramBuckets))
                                        return "sensitiveValueFrequencyHistogramBuckets: array expected";
                                    for (var i = 0; i < message.sensitiveValueFrequencyHistogramBuckets.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.verify(message.sensitiveValueFrequencyHistogramBuckets[i]);
                                        if (error)
                                            return "sensitiveValueFrequencyHistogramBuckets." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a LDiversityResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult} LDiversityResult
                             */
                            LDiversityResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult();
                                if (object.sensitiveValueFrequencyHistogramBuckets) {
                                    if (!Array.isArray(object.sensitiveValueFrequencyHistogramBuckets))
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitiveValueFrequencyHistogramBuckets: array expected");
                                    message.sensitiveValueFrequencyHistogramBuckets = [];
                                    for (var i = 0; i < object.sensitiveValueFrequencyHistogramBuckets.length; ++i) {
                                        if (typeof object.sensitiveValueFrequencyHistogramBuckets[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitiveValueFrequencyHistogramBuckets: object expected");
                                        message.sensitiveValueFrequencyHistogramBuckets[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.fromObject(object.sensitiveValueFrequencyHistogramBuckets[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a LDiversityResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult} message LDiversityResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LDiversityResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.sensitiveValueFrequencyHistogramBuckets = [];
                                if (message.sensitiveValueFrequencyHistogramBuckets && message.sensitiveValueFrequencyHistogramBuckets.length) {
                                    object.sensitiveValueFrequencyHistogramBuckets = [];
                                    for (var j = 0; j < message.sensitiveValueFrequencyHistogramBuckets.length; ++j)
                                        object.sensitiveValueFrequencyHistogramBuckets[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.toObject(message.sensitiveValueFrequencyHistogramBuckets[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this LDiversityResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LDiversityResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            LDiversityResult.LDiversityEquivalenceClass = (function() {
    
                                /**
                                 * Properties of a LDiversityEquivalenceClass.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                                 * @interface ILDiversityEquivalenceClass
                                 * @property {Array.<google.privacy.dlp.v2.IValue>|null} [quasiIdsValues] LDiversityEquivalenceClass quasiIdsValues
                                 * @property {number|Long|null} [equivalenceClassSize] LDiversityEquivalenceClass equivalenceClassSize
                                 * @property {number|Long|null} [numDistinctSensitiveValues] LDiversityEquivalenceClass numDistinctSensitiveValues
                                 * @property {Array.<google.privacy.dlp.v2.IValueFrequency>|null} [topSensitiveValues] LDiversityEquivalenceClass topSensitiveValues
                                 */
    
                                /**
                                 * Constructs a new LDiversityEquivalenceClass.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                                 * @classdesc Represents a LDiversityEquivalenceClass.
                                 * @implements ILDiversityEquivalenceClass
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityEquivalenceClass=} [properties] Properties to set
                                 */
                                function LDiversityEquivalenceClass(properties) {
                                    this.quasiIdsValues = [];
                                    this.topSensitiveValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * LDiversityEquivalenceClass quasiIdsValues.
                                 * @member {Array.<google.privacy.dlp.v2.IValue>} quasiIdsValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @instance
                                 */
                                LDiversityEquivalenceClass.prototype.quasiIdsValues = $util.emptyArray;
    
                                /**
                                 * LDiversityEquivalenceClass equivalenceClassSize.
                                 * @member {number|Long} equivalenceClassSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @instance
                                 */
                                LDiversityEquivalenceClass.prototype.equivalenceClassSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * LDiversityEquivalenceClass numDistinctSensitiveValues.
                                 * @member {number|Long} numDistinctSensitiveValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @instance
                                 */
                                LDiversityEquivalenceClass.prototype.numDistinctSensitiveValues = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * LDiversityEquivalenceClass topSensitiveValues.
                                 * @member {Array.<google.privacy.dlp.v2.IValueFrequency>} topSensitiveValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @instance
                                 */
                                LDiversityEquivalenceClass.prototype.topSensitiveValues = $util.emptyArray;
    
                                /**
                                 * Creates a new LDiversityEquivalenceClass instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityEquivalenceClass=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass} LDiversityEquivalenceClass instance
                                 */
                                LDiversityEquivalenceClass.create = function create(properties) {
                                    return new LDiversityEquivalenceClass(properties);
                                };
    
                                /**
                                 * Encodes the specified LDiversityEquivalenceClass message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityEquivalenceClass} message LDiversityEquivalenceClass message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LDiversityEquivalenceClass.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.quasiIdsValues != null && message.quasiIdsValues.length)
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i)
                                            $root.google.privacy.dlp.v2.Value.encode(message.quasiIdsValues[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.equivalenceClassSize != null && Object.hasOwnProperty.call(message, "equivalenceClassSize"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.equivalenceClassSize);
                                    if (message.numDistinctSensitiveValues != null && Object.hasOwnProperty.call(message, "numDistinctSensitiveValues"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.numDistinctSensitiveValues);
                                    if (message.topSensitiveValues != null && message.topSensitiveValues.length)
                                        for (var i = 0; i < message.topSensitiveValues.length; ++i)
                                            $root.google.privacy.dlp.v2.ValueFrequency.encode(message.topSensitiveValues[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified LDiversityEquivalenceClass message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityEquivalenceClass} message LDiversityEquivalenceClass message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LDiversityEquivalenceClass.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a LDiversityEquivalenceClass message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass} LDiversityEquivalenceClass
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LDiversityEquivalenceClass.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.quasiIdsValues && message.quasiIdsValues.length))
                                                message.quasiIdsValues = [];
                                            message.quasiIdsValues.push($root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32()));
                                            break;
                                        case 2:
                                            message.equivalenceClassSize = reader.int64();
                                            break;
                                        case 3:
                                            message.numDistinctSensitiveValues = reader.int64();
                                            break;
                                        case 4:
                                            if (!(message.topSensitiveValues && message.topSensitiveValues.length))
                                                message.topSensitiveValues = [];
                                            message.topSensitiveValues.push($root.google.privacy.dlp.v2.ValueFrequency.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a LDiversityEquivalenceClass message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass} LDiversityEquivalenceClass
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LDiversityEquivalenceClass.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a LDiversityEquivalenceClass message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LDiversityEquivalenceClass.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.quasiIdsValues != null && message.hasOwnProperty("quasiIdsValues")) {
                                        if (!Array.isArray(message.quasiIdsValues))
                                            return "quasiIdsValues: array expected";
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.Value.verify(message.quasiIdsValues[i]);
                                            if (error)
                                                return "quasiIdsValues." + error;
                                        }
                                    }
                                    if (message.equivalenceClassSize != null && message.hasOwnProperty("equivalenceClassSize"))
                                        if (!$util.isInteger(message.equivalenceClassSize) && !(message.equivalenceClassSize && $util.isInteger(message.equivalenceClassSize.low) && $util.isInteger(message.equivalenceClassSize.high)))
                                            return "equivalenceClassSize: integer|Long expected";
                                    if (message.numDistinctSensitiveValues != null && message.hasOwnProperty("numDistinctSensitiveValues"))
                                        if (!$util.isInteger(message.numDistinctSensitiveValues) && !(message.numDistinctSensitiveValues && $util.isInteger(message.numDistinctSensitiveValues.low) && $util.isInteger(message.numDistinctSensitiveValues.high)))
                                            return "numDistinctSensitiveValues: integer|Long expected";
                                    if (message.topSensitiveValues != null && message.hasOwnProperty("topSensitiveValues")) {
                                        if (!Array.isArray(message.topSensitiveValues))
                                            return "topSensitiveValues: array expected";
                                        for (var i = 0; i < message.topSensitiveValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.ValueFrequency.verify(message.topSensitiveValues[i]);
                                            if (error)
                                                return "topSensitiveValues." + error;
                                        }
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a LDiversityEquivalenceClass message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass} LDiversityEquivalenceClass
                                 */
                                LDiversityEquivalenceClass.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass();
                                    if (object.quasiIdsValues) {
                                        if (!Array.isArray(object.quasiIdsValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasiIdsValues: array expected");
                                        message.quasiIdsValues = [];
                                        for (var i = 0; i < object.quasiIdsValues.length; ++i) {
                                            if (typeof object.quasiIdsValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasiIdsValues: object expected");
                                            message.quasiIdsValues[i] = $root.google.privacy.dlp.v2.Value.fromObject(object.quasiIdsValues[i]);
                                        }
                                    }
                                    if (object.equivalenceClassSize != null)
                                        if ($util.Long)
                                            (message.equivalenceClassSize = $util.Long.fromValue(object.equivalenceClassSize)).unsigned = false;
                                        else if (typeof object.equivalenceClassSize === "string")
                                            message.equivalenceClassSize = parseInt(object.equivalenceClassSize, 10);
                                        else if (typeof object.equivalenceClassSize === "number")
                                            message.equivalenceClassSize = object.equivalenceClassSize;
                                        else if (typeof object.equivalenceClassSize === "object")
                                            message.equivalenceClassSize = new $util.LongBits(object.equivalenceClassSize.low >>> 0, object.equivalenceClassSize.high >>> 0).toNumber();
                                    if (object.numDistinctSensitiveValues != null)
                                        if ($util.Long)
                                            (message.numDistinctSensitiveValues = $util.Long.fromValue(object.numDistinctSensitiveValues)).unsigned = false;
                                        else if (typeof object.numDistinctSensitiveValues === "string")
                                            message.numDistinctSensitiveValues = parseInt(object.numDistinctSensitiveValues, 10);
                                        else if (typeof object.numDistinctSensitiveValues === "number")
                                            message.numDistinctSensitiveValues = object.numDistinctSensitiveValues;
                                        else if (typeof object.numDistinctSensitiveValues === "object")
                                            message.numDistinctSensitiveValues = new $util.LongBits(object.numDistinctSensitiveValues.low >>> 0, object.numDistinctSensitiveValues.high >>> 0).toNumber();
                                    if (object.topSensitiveValues) {
                                        if (!Array.isArray(object.topSensitiveValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.topSensitiveValues: array expected");
                                        message.topSensitiveValues = [];
                                        for (var i = 0; i < object.topSensitiveValues.length; ++i) {
                                            if (typeof object.topSensitiveValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.topSensitiveValues: object expected");
                                            message.topSensitiveValues[i] = $root.google.privacy.dlp.v2.ValueFrequency.fromObject(object.topSensitiveValues[i]);
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a LDiversityEquivalenceClass message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass} message LDiversityEquivalenceClass
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LDiversityEquivalenceClass.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.quasiIdsValues = [];
                                        object.topSensitiveValues = [];
                                    }
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.equivalenceClassSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.equivalenceClassSize = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.numDistinctSensitiveValues = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.numDistinctSensitiveValues = options.longs === String ? "0" : 0;
                                    }
                                    if (message.quasiIdsValues && message.quasiIdsValues.length) {
                                        object.quasiIdsValues = [];
                                        for (var j = 0; j < message.quasiIdsValues.length; ++j)
                                            object.quasiIdsValues[j] = $root.google.privacy.dlp.v2.Value.toObject(message.quasiIdsValues[j], options);
                                    }
                                    if (message.equivalenceClassSize != null && message.hasOwnProperty("equivalenceClassSize"))
                                        if (typeof message.equivalenceClassSize === "number")
                                            object.equivalenceClassSize = options.longs === String ? String(message.equivalenceClassSize) : message.equivalenceClassSize;
                                        else
                                            object.equivalenceClassSize = options.longs === String ? $util.Long.prototype.toString.call(message.equivalenceClassSize) : options.longs === Number ? new $util.LongBits(message.equivalenceClassSize.low >>> 0, message.equivalenceClassSize.high >>> 0).toNumber() : message.equivalenceClassSize;
                                    if (message.numDistinctSensitiveValues != null && message.hasOwnProperty("numDistinctSensitiveValues"))
                                        if (typeof message.numDistinctSensitiveValues === "number")
                                            object.numDistinctSensitiveValues = options.longs === String ? String(message.numDistinctSensitiveValues) : message.numDistinctSensitiveValues;
                                        else
                                            object.numDistinctSensitiveValues = options.longs === String ? $util.Long.prototype.toString.call(message.numDistinctSensitiveValues) : options.longs === Number ? new $util.LongBits(message.numDistinctSensitiveValues.low >>> 0, message.numDistinctSensitiveValues.high >>> 0).toNumber() : message.numDistinctSensitiveValues;
                                    if (message.topSensitiveValues && message.topSensitiveValues.length) {
                                        object.topSensitiveValues = [];
                                        for (var j = 0; j < message.topSensitiveValues.length; ++j)
                                            object.topSensitiveValues[j] = $root.google.privacy.dlp.v2.ValueFrequency.toObject(message.topSensitiveValues[j], options);
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this LDiversityEquivalenceClass to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LDiversityEquivalenceClass.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return LDiversityEquivalenceClass;
                            })();
    
                            LDiversityResult.LDiversityHistogramBucket = (function() {
    
                                /**
                                 * Properties of a LDiversityHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                                 * @interface ILDiversityHistogramBucket
                                 * @property {number|Long|null} [sensitiveValueFrequencyLowerBound] LDiversityHistogramBucket sensitiveValueFrequencyLowerBound
                                 * @property {number|Long|null} [sensitiveValueFrequencyUpperBound] LDiversityHistogramBucket sensitiveValueFrequencyUpperBound
                                 * @property {number|Long|null} [bucketSize] LDiversityHistogramBucket bucketSize
                                 * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityEquivalenceClass>|null} [bucketValues] LDiversityHistogramBucket bucketValues
                                 * @property {number|Long|null} [bucketValueCount] LDiversityHistogramBucket bucketValueCount
                                 */
    
                                /**
                                 * Constructs a new LDiversityHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
                                 * @classdesc Represents a LDiversityHistogramBucket.
                                 * @implements ILDiversityHistogramBucket
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityHistogramBucket=} [properties] Properties to set
                                 */
                                function LDiversityHistogramBucket(properties) {
                                    this.bucketValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * LDiversityHistogramBucket sensitiveValueFrequencyLowerBound.
                                 * @member {number|Long} sensitiveValueFrequencyLowerBound
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @instance
                                 */
                                LDiversityHistogramBucket.prototype.sensitiveValueFrequencyLowerBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * LDiversityHistogramBucket sensitiveValueFrequencyUpperBound.
                                 * @member {number|Long} sensitiveValueFrequencyUpperBound
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @instance
                                 */
                                LDiversityHistogramBucket.prototype.sensitiveValueFrequencyUpperBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * LDiversityHistogramBucket bucketSize.
                                 * @member {number|Long} bucketSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @instance
                                 */
                                LDiversityHistogramBucket.prototype.bucketSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * LDiversityHistogramBucket bucketValues.
                                 * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityEquivalenceClass>} bucketValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @instance
                                 */
                                LDiversityHistogramBucket.prototype.bucketValues = $util.emptyArray;
    
                                /**
                                 * LDiversityHistogramBucket bucketValueCount.
                                 * @member {number|Long} bucketValueCount
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @instance
                                 */
                                LDiversityHistogramBucket.prototype.bucketValueCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new LDiversityHistogramBucket instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityHistogramBucket=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket} LDiversityHistogramBucket instance
                                 */
                                LDiversityHistogramBucket.create = function create(properties) {
                                    return new LDiversityHistogramBucket(properties);
                                };
    
                                /**
                                 * Encodes the specified LDiversityHistogramBucket message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityHistogramBucket} message LDiversityHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LDiversityHistogramBucket.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.sensitiveValueFrequencyLowerBound != null && Object.hasOwnProperty.call(message, "sensitiveValueFrequencyLowerBound"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sensitiveValueFrequencyLowerBound);
                                    if (message.sensitiveValueFrequencyUpperBound != null && Object.hasOwnProperty.call(message, "sensitiveValueFrequencyUpperBound"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.sensitiveValueFrequencyUpperBound);
                                    if (message.bucketSize != null && Object.hasOwnProperty.call(message, "bucketSize"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.bucketSize);
                                    if (message.bucketValues != null && message.bucketValues.length)
                                        for (var i = 0; i < message.bucketValues.length; ++i)
                                            $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.encode(message.bucketValues[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.bucketValueCount != null && Object.hasOwnProperty.call(message, "bucketValueCount"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.bucketValueCount);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified LDiversityHistogramBucket message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.ILDiversityHistogramBucket} message LDiversityHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LDiversityHistogramBucket.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a LDiversityHistogramBucket message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket} LDiversityHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LDiversityHistogramBucket.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.sensitiveValueFrequencyLowerBound = reader.int64();
                                            break;
                                        case 2:
                                            message.sensitiveValueFrequencyUpperBound = reader.int64();
                                            break;
                                        case 3:
                                            message.bucketSize = reader.int64();
                                            break;
                                        case 4:
                                            if (!(message.bucketValues && message.bucketValues.length))
                                                message.bucketValues = [];
                                            message.bucketValues.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.decode(reader, reader.uint32()));
                                            break;
                                        case 5:
                                            message.bucketValueCount = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a LDiversityHistogramBucket message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket} LDiversityHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LDiversityHistogramBucket.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a LDiversityHistogramBucket message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LDiversityHistogramBucket.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.sensitiveValueFrequencyLowerBound != null && message.hasOwnProperty("sensitiveValueFrequencyLowerBound"))
                                        if (!$util.isInteger(message.sensitiveValueFrequencyLowerBound) && !(message.sensitiveValueFrequencyLowerBound && $util.isInteger(message.sensitiveValueFrequencyLowerBound.low) && $util.isInteger(message.sensitiveValueFrequencyLowerBound.high)))
                                            return "sensitiveValueFrequencyLowerBound: integer|Long expected";
                                    if (message.sensitiveValueFrequencyUpperBound != null && message.hasOwnProperty("sensitiveValueFrequencyUpperBound"))
                                        if (!$util.isInteger(message.sensitiveValueFrequencyUpperBound) && !(message.sensitiveValueFrequencyUpperBound && $util.isInteger(message.sensitiveValueFrequencyUpperBound.low) && $util.isInteger(message.sensitiveValueFrequencyUpperBound.high)))
                                            return "sensitiveValueFrequencyUpperBound: integer|Long expected";
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (!$util.isInteger(message.bucketSize) && !(message.bucketSize && $util.isInteger(message.bucketSize.low) && $util.isInteger(message.bucketSize.high)))
                                            return "bucketSize: integer|Long expected";
                                    if (message.bucketValues != null && message.hasOwnProperty("bucketValues")) {
                                        if (!Array.isArray(message.bucketValues))
                                            return "bucketValues: array expected";
                                        for (var i = 0; i < message.bucketValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.verify(message.bucketValues[i]);
                                            if (error)
                                                return "bucketValues." + error;
                                        }
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (!$util.isInteger(message.bucketValueCount) && !(message.bucketValueCount && $util.isInteger(message.bucketValueCount.low) && $util.isInteger(message.bucketValueCount.high)))
                                            return "bucketValueCount: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a LDiversityHistogramBucket message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket} LDiversityHistogramBucket
                                 */
                                LDiversityHistogramBucket.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket();
                                    if (object.sensitiveValueFrequencyLowerBound != null)
                                        if ($util.Long)
                                            (message.sensitiveValueFrequencyLowerBound = $util.Long.fromValue(object.sensitiveValueFrequencyLowerBound)).unsigned = false;
                                        else if (typeof object.sensitiveValueFrequencyLowerBound === "string")
                                            message.sensitiveValueFrequencyLowerBound = parseInt(object.sensitiveValueFrequencyLowerBound, 10);
                                        else if (typeof object.sensitiveValueFrequencyLowerBound === "number")
                                            message.sensitiveValueFrequencyLowerBound = object.sensitiveValueFrequencyLowerBound;
                                        else if (typeof object.sensitiveValueFrequencyLowerBound === "object")
                                            message.sensitiveValueFrequencyLowerBound = new $util.LongBits(object.sensitiveValueFrequencyLowerBound.low >>> 0, object.sensitiveValueFrequencyLowerBound.high >>> 0).toNumber();
                                    if (object.sensitiveValueFrequencyUpperBound != null)
                                        if ($util.Long)
                                            (message.sensitiveValueFrequencyUpperBound = $util.Long.fromValue(object.sensitiveValueFrequencyUpperBound)).unsigned = false;
                                        else if (typeof object.sensitiveValueFrequencyUpperBound === "string")
                                            message.sensitiveValueFrequencyUpperBound = parseInt(object.sensitiveValueFrequencyUpperBound, 10);
                                        else if (typeof object.sensitiveValueFrequencyUpperBound === "number")
                                            message.sensitiveValueFrequencyUpperBound = object.sensitiveValueFrequencyUpperBound;
                                        else if (typeof object.sensitiveValueFrequencyUpperBound === "object")
                                            message.sensitiveValueFrequencyUpperBound = new $util.LongBits(object.sensitiveValueFrequencyUpperBound.low >>> 0, object.sensitiveValueFrequencyUpperBound.high >>> 0).toNumber();
                                    if (object.bucketSize != null)
                                        if ($util.Long)
                                            (message.bucketSize = $util.Long.fromValue(object.bucketSize)).unsigned = false;
                                        else if (typeof object.bucketSize === "string")
                                            message.bucketSize = parseInt(object.bucketSize, 10);
                                        else if (typeof object.bucketSize === "number")
                                            message.bucketSize = object.bucketSize;
                                        else if (typeof object.bucketSize === "object")
                                            message.bucketSize = new $util.LongBits(object.bucketSize.low >>> 0, object.bucketSize.high >>> 0).toNumber();
                                    if (object.bucketValues) {
                                        if (!Array.isArray(object.bucketValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucketValues: array expected");
                                        message.bucketValues = [];
                                        for (var i = 0; i < object.bucketValues.length; ++i) {
                                            if (typeof object.bucketValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucketValues: object expected");
                                            message.bucketValues[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.fromObject(object.bucketValues[i]);
                                        }
                                    }
                                    if (object.bucketValueCount != null)
                                        if ($util.Long)
                                            (message.bucketValueCount = $util.Long.fromValue(object.bucketValueCount)).unsigned = false;
                                        else if (typeof object.bucketValueCount === "string")
                                            message.bucketValueCount = parseInt(object.bucketValueCount, 10);
                                        else if (typeof object.bucketValueCount === "number")
                                            message.bucketValueCount = object.bucketValueCount;
                                        else if (typeof object.bucketValueCount === "object")
                                            message.bucketValueCount = new $util.LongBits(object.bucketValueCount.low >>> 0, object.bucketValueCount.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a LDiversityHistogramBucket message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket} message LDiversityHistogramBucket
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LDiversityHistogramBucket.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.bucketValues = [];
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.sensitiveValueFrequencyLowerBound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.sensitiveValueFrequencyLowerBound = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.sensitiveValueFrequencyUpperBound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.sensitiveValueFrequencyUpperBound = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketSize = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketValueCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketValueCount = options.longs === String ? "0" : 0;
                                    }
                                    if (message.sensitiveValueFrequencyLowerBound != null && message.hasOwnProperty("sensitiveValueFrequencyLowerBound"))
                                        if (typeof message.sensitiveValueFrequencyLowerBound === "number")
                                            object.sensitiveValueFrequencyLowerBound = options.longs === String ? String(message.sensitiveValueFrequencyLowerBound) : message.sensitiveValueFrequencyLowerBound;
                                        else
                                            object.sensitiveValueFrequencyLowerBound = options.longs === String ? $util.Long.prototype.toString.call(message.sensitiveValueFrequencyLowerBound) : options.longs === Number ? new $util.LongBits(message.sensitiveValueFrequencyLowerBound.low >>> 0, message.sensitiveValueFrequencyLowerBound.high >>> 0).toNumber() : message.sensitiveValueFrequencyLowerBound;
                                    if (message.sensitiveValueFrequencyUpperBound != null && message.hasOwnProperty("sensitiveValueFrequencyUpperBound"))
                                        if (typeof message.sensitiveValueFrequencyUpperBound === "number")
                                            object.sensitiveValueFrequencyUpperBound = options.longs === String ? String(message.sensitiveValueFrequencyUpperBound) : message.sensitiveValueFrequencyUpperBound;
                                        else
                                            object.sensitiveValueFrequencyUpperBound = options.longs === String ? $util.Long.prototype.toString.call(message.sensitiveValueFrequencyUpperBound) : options.longs === Number ? new $util.LongBits(message.sensitiveValueFrequencyUpperBound.low >>> 0, message.sensitiveValueFrequencyUpperBound.high >>> 0).toNumber() : message.sensitiveValueFrequencyUpperBound;
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (typeof message.bucketSize === "number")
                                            object.bucketSize = options.longs === String ? String(message.bucketSize) : message.bucketSize;
                                        else
                                            object.bucketSize = options.longs === String ? $util.Long.prototype.toString.call(message.bucketSize) : options.longs === Number ? new $util.LongBits(message.bucketSize.low >>> 0, message.bucketSize.high >>> 0).toNumber() : message.bucketSize;
                                    if (message.bucketValues && message.bucketValues.length) {
                                        object.bucketValues = [];
                                        for (var j = 0; j < message.bucketValues.length; ++j)
                                            object.bucketValues[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.toObject(message.bucketValues[j], options);
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (typeof message.bucketValueCount === "number")
                                            object.bucketValueCount = options.longs === String ? String(message.bucketValueCount) : message.bucketValueCount;
                                        else
                                            object.bucketValueCount = options.longs === String ? $util.Long.prototype.toString.call(message.bucketValueCount) : options.longs === Number ? new $util.LongBits(message.bucketValueCount.low >>> 0, message.bucketValueCount.high >>> 0).toNumber() : message.bucketValueCount;
                                    return object;
                                };
    
                                /**
                                 * Converts this LDiversityHistogramBucket to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LDiversityHistogramBucket.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return LDiversityHistogramBucket;
                            })();
    
                            return LDiversityResult;
                        })();
    
                        AnalyzeDataSourceRiskDetails.KMapEstimationResult = (function() {
    
                            /**
                             * Properties of a KMapEstimationResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface IKMapEstimationResult
                             * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationHistogramBucket>|null} [kMapEstimationHistogram] KMapEstimationResult kMapEstimationHistogram
                             */
    
                            /**
                             * Constructs a new KMapEstimationResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a KMapEstimationResult.
                             * @implements IKMapEstimationResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKMapEstimationResult=} [properties] Properties to set
                             */
                            function KMapEstimationResult(properties) {
                                this.kMapEstimationHistogram = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KMapEstimationResult kMapEstimationHistogram.
                             * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationHistogramBucket>} kMapEstimationHistogram
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @instance
                             */
                            KMapEstimationResult.prototype.kMapEstimationHistogram = $util.emptyArray;
    
                            /**
                             * Creates a new KMapEstimationResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKMapEstimationResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult} KMapEstimationResult instance
                             */
                            KMapEstimationResult.create = function create(properties) {
                                return new KMapEstimationResult(properties);
                            };
    
                            /**
                             * Encodes the specified KMapEstimationResult message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKMapEstimationResult} message KMapEstimationResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMapEstimationResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.kMapEstimationHistogram != null && message.kMapEstimationHistogram.length)
                                    for (var i = 0; i < message.kMapEstimationHistogram.length; ++i)
                                        $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.encode(message.kMapEstimationHistogram[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KMapEstimationResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IKMapEstimationResult} message KMapEstimationResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMapEstimationResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KMapEstimationResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult} KMapEstimationResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMapEstimationResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.kMapEstimationHistogram && message.kMapEstimationHistogram.length))
                                            message.kMapEstimationHistogram = [];
                                        message.kMapEstimationHistogram.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KMapEstimationResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult} KMapEstimationResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMapEstimationResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KMapEstimationResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KMapEstimationResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.kMapEstimationHistogram != null && message.hasOwnProperty("kMapEstimationHistogram")) {
                                    if (!Array.isArray(message.kMapEstimationHistogram))
                                        return "kMapEstimationHistogram: array expected";
                                    for (var i = 0; i < message.kMapEstimationHistogram.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.verify(message.kMapEstimationHistogram[i]);
                                        if (error)
                                            return "kMapEstimationHistogram." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a KMapEstimationResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult} KMapEstimationResult
                             */
                            KMapEstimationResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult();
                                if (object.kMapEstimationHistogram) {
                                    if (!Array.isArray(object.kMapEstimationHistogram))
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.kMapEstimationHistogram: array expected");
                                    message.kMapEstimationHistogram = [];
                                    for (var i = 0; i < object.kMapEstimationHistogram.length; ++i) {
                                        if (typeof object.kMapEstimationHistogram[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.kMapEstimationHistogram: object expected");
                                        message.kMapEstimationHistogram[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.fromObject(object.kMapEstimationHistogram[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KMapEstimationResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult} message KMapEstimationResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KMapEstimationResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.kMapEstimationHistogram = [];
                                if (message.kMapEstimationHistogram && message.kMapEstimationHistogram.length) {
                                    object.kMapEstimationHistogram = [];
                                    for (var j = 0; j < message.kMapEstimationHistogram.length; ++j)
                                        object.kMapEstimationHistogram[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.toObject(message.kMapEstimationHistogram[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this KMapEstimationResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KMapEstimationResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            KMapEstimationResult.KMapEstimationQuasiIdValues = (function() {
    
                                /**
                                 * Properties of a KMapEstimationQuasiIdValues.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                                 * @interface IKMapEstimationQuasiIdValues
                                 * @property {Array.<google.privacy.dlp.v2.IValue>|null} [quasiIdsValues] KMapEstimationQuasiIdValues quasiIdsValues
                                 * @property {number|Long|null} [estimatedAnonymity] KMapEstimationQuasiIdValues estimatedAnonymity
                                 */
    
                                /**
                                 * Constructs a new KMapEstimationQuasiIdValues.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                                 * @classdesc Represents a KMapEstimationQuasiIdValues.
                                 * @implements IKMapEstimationQuasiIdValues
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationQuasiIdValues=} [properties] Properties to set
                                 */
                                function KMapEstimationQuasiIdValues(properties) {
                                    this.quasiIdsValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * KMapEstimationQuasiIdValues quasiIdsValues.
                                 * @member {Array.<google.privacy.dlp.v2.IValue>} quasiIdsValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @instance
                                 */
                                KMapEstimationQuasiIdValues.prototype.quasiIdsValues = $util.emptyArray;
    
                                /**
                                 * KMapEstimationQuasiIdValues estimatedAnonymity.
                                 * @member {number|Long} estimatedAnonymity
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @instance
                                 */
                                KMapEstimationQuasiIdValues.prototype.estimatedAnonymity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new KMapEstimationQuasiIdValues instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationQuasiIdValues=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues} KMapEstimationQuasiIdValues instance
                                 */
                                KMapEstimationQuasiIdValues.create = function create(properties) {
                                    return new KMapEstimationQuasiIdValues(properties);
                                };
    
                                /**
                                 * Encodes the specified KMapEstimationQuasiIdValues message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationQuasiIdValues} message KMapEstimationQuasiIdValues message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KMapEstimationQuasiIdValues.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.quasiIdsValues != null && message.quasiIdsValues.length)
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i)
                                            $root.google.privacy.dlp.v2.Value.encode(message.quasiIdsValues[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.estimatedAnonymity != null && Object.hasOwnProperty.call(message, "estimatedAnonymity"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.estimatedAnonymity);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified KMapEstimationQuasiIdValues message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationQuasiIdValues} message KMapEstimationQuasiIdValues message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KMapEstimationQuasiIdValues.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a KMapEstimationQuasiIdValues message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues} KMapEstimationQuasiIdValues
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KMapEstimationQuasiIdValues.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.quasiIdsValues && message.quasiIdsValues.length))
                                                message.quasiIdsValues = [];
                                            message.quasiIdsValues.push($root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32()));
                                            break;
                                        case 2:
                                            message.estimatedAnonymity = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a KMapEstimationQuasiIdValues message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues} KMapEstimationQuasiIdValues
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KMapEstimationQuasiIdValues.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a KMapEstimationQuasiIdValues message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                KMapEstimationQuasiIdValues.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.quasiIdsValues != null && message.hasOwnProperty("quasiIdsValues")) {
                                        if (!Array.isArray(message.quasiIdsValues))
                                            return "quasiIdsValues: array expected";
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.Value.verify(message.quasiIdsValues[i]);
                                            if (error)
                                                return "quasiIdsValues." + error;
                                        }
                                    }
                                    if (message.estimatedAnonymity != null && message.hasOwnProperty("estimatedAnonymity"))
                                        if (!$util.isInteger(message.estimatedAnonymity) && !(message.estimatedAnonymity && $util.isInteger(message.estimatedAnonymity.low) && $util.isInteger(message.estimatedAnonymity.high)))
                                            return "estimatedAnonymity: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a KMapEstimationQuasiIdValues message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues} KMapEstimationQuasiIdValues
                                 */
                                KMapEstimationQuasiIdValues.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues();
                                    if (object.quasiIdsValues) {
                                        if (!Array.isArray(object.quasiIdsValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasiIdsValues: array expected");
                                        message.quasiIdsValues = [];
                                        for (var i = 0; i < object.quasiIdsValues.length; ++i) {
                                            if (typeof object.quasiIdsValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasiIdsValues: object expected");
                                            message.quasiIdsValues[i] = $root.google.privacy.dlp.v2.Value.fromObject(object.quasiIdsValues[i]);
                                        }
                                    }
                                    if (object.estimatedAnonymity != null)
                                        if ($util.Long)
                                            (message.estimatedAnonymity = $util.Long.fromValue(object.estimatedAnonymity)).unsigned = false;
                                        else if (typeof object.estimatedAnonymity === "string")
                                            message.estimatedAnonymity = parseInt(object.estimatedAnonymity, 10);
                                        else if (typeof object.estimatedAnonymity === "number")
                                            message.estimatedAnonymity = object.estimatedAnonymity;
                                        else if (typeof object.estimatedAnonymity === "object")
                                            message.estimatedAnonymity = new $util.LongBits(object.estimatedAnonymity.low >>> 0, object.estimatedAnonymity.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a KMapEstimationQuasiIdValues message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues} message KMapEstimationQuasiIdValues
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                KMapEstimationQuasiIdValues.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.quasiIdsValues = [];
                                    if (options.defaults)
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.estimatedAnonymity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.estimatedAnonymity = options.longs === String ? "0" : 0;
                                    if (message.quasiIdsValues && message.quasiIdsValues.length) {
                                        object.quasiIdsValues = [];
                                        for (var j = 0; j < message.quasiIdsValues.length; ++j)
                                            object.quasiIdsValues[j] = $root.google.privacy.dlp.v2.Value.toObject(message.quasiIdsValues[j], options);
                                    }
                                    if (message.estimatedAnonymity != null && message.hasOwnProperty("estimatedAnonymity"))
                                        if (typeof message.estimatedAnonymity === "number")
                                            object.estimatedAnonymity = options.longs === String ? String(message.estimatedAnonymity) : message.estimatedAnonymity;
                                        else
                                            object.estimatedAnonymity = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedAnonymity) : options.longs === Number ? new $util.LongBits(message.estimatedAnonymity.low >>> 0, message.estimatedAnonymity.high >>> 0).toNumber() : message.estimatedAnonymity;
                                    return object;
                                };
    
                                /**
                                 * Converts this KMapEstimationQuasiIdValues to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                KMapEstimationQuasiIdValues.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return KMapEstimationQuasiIdValues;
                            })();
    
                            KMapEstimationResult.KMapEstimationHistogramBucket = (function() {
    
                                /**
                                 * Properties of a KMapEstimationHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                                 * @interface IKMapEstimationHistogramBucket
                                 * @property {number|Long|null} [minAnonymity] KMapEstimationHistogramBucket minAnonymity
                                 * @property {number|Long|null} [maxAnonymity] KMapEstimationHistogramBucket maxAnonymity
                                 * @property {number|Long|null} [bucketSize] KMapEstimationHistogramBucket bucketSize
                                 * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationQuasiIdValues>|null} [bucketValues] KMapEstimationHistogramBucket bucketValues
                                 * @property {number|Long|null} [bucketValueCount] KMapEstimationHistogramBucket bucketValueCount
                                 */
    
                                /**
                                 * Constructs a new KMapEstimationHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
                                 * @classdesc Represents a KMapEstimationHistogramBucket.
                                 * @implements IKMapEstimationHistogramBucket
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationHistogramBucket=} [properties] Properties to set
                                 */
                                function KMapEstimationHistogramBucket(properties) {
                                    this.bucketValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * KMapEstimationHistogramBucket minAnonymity.
                                 * @member {number|Long} minAnonymity
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @instance
                                 */
                                KMapEstimationHistogramBucket.prototype.minAnonymity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * KMapEstimationHistogramBucket maxAnonymity.
                                 * @member {number|Long} maxAnonymity
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @instance
                                 */
                                KMapEstimationHistogramBucket.prototype.maxAnonymity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * KMapEstimationHistogramBucket bucketSize.
                                 * @member {number|Long} bucketSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @instance
                                 */
                                KMapEstimationHistogramBucket.prototype.bucketSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * KMapEstimationHistogramBucket bucketValues.
                                 * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationQuasiIdValues>} bucketValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @instance
                                 */
                                KMapEstimationHistogramBucket.prototype.bucketValues = $util.emptyArray;
    
                                /**
                                 * KMapEstimationHistogramBucket bucketValueCount.
                                 * @member {number|Long} bucketValueCount
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @instance
                                 */
                                KMapEstimationHistogramBucket.prototype.bucketValueCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new KMapEstimationHistogramBucket instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationHistogramBucket=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket} KMapEstimationHistogramBucket instance
                                 */
                                KMapEstimationHistogramBucket.create = function create(properties) {
                                    return new KMapEstimationHistogramBucket(properties);
                                };
    
                                /**
                                 * Encodes the specified KMapEstimationHistogramBucket message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationHistogramBucket} message KMapEstimationHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KMapEstimationHistogramBucket.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.minAnonymity != null && Object.hasOwnProperty.call(message, "minAnonymity"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.minAnonymity);
                                    if (message.maxAnonymity != null && Object.hasOwnProperty.call(message, "maxAnonymity"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAnonymity);
                                    if (message.bucketSize != null && Object.hasOwnProperty.call(message, "bucketSize"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.bucketSize);
                                    if (message.bucketValues != null && message.bucketValues.length)
                                        for (var i = 0; i < message.bucketValues.length; ++i)
                                            $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.encode(message.bucketValues[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                    if (message.bucketValueCount != null && Object.hasOwnProperty.call(message, "bucketValueCount"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.bucketValueCount);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified KMapEstimationHistogramBucket message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.IKMapEstimationHistogramBucket} message KMapEstimationHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KMapEstimationHistogramBucket.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a KMapEstimationHistogramBucket message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket} KMapEstimationHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KMapEstimationHistogramBucket.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.minAnonymity = reader.int64();
                                            break;
                                        case 2:
                                            message.maxAnonymity = reader.int64();
                                            break;
                                        case 5:
                                            message.bucketSize = reader.int64();
                                            break;
                                        case 6:
                                            if (!(message.bucketValues && message.bucketValues.length))
                                                message.bucketValues = [];
                                            message.bucketValues.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.decode(reader, reader.uint32()));
                                            break;
                                        case 7:
                                            message.bucketValueCount = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a KMapEstimationHistogramBucket message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket} KMapEstimationHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KMapEstimationHistogramBucket.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a KMapEstimationHistogramBucket message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                KMapEstimationHistogramBucket.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.minAnonymity != null && message.hasOwnProperty("minAnonymity"))
                                        if (!$util.isInteger(message.minAnonymity) && !(message.minAnonymity && $util.isInteger(message.minAnonymity.low) && $util.isInteger(message.minAnonymity.high)))
                                            return "minAnonymity: integer|Long expected";
                                    if (message.maxAnonymity != null && message.hasOwnProperty("maxAnonymity"))
                                        if (!$util.isInteger(message.maxAnonymity) && !(message.maxAnonymity && $util.isInteger(message.maxAnonymity.low) && $util.isInteger(message.maxAnonymity.high)))
                                            return "maxAnonymity: integer|Long expected";
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (!$util.isInteger(message.bucketSize) && !(message.bucketSize && $util.isInteger(message.bucketSize.low) && $util.isInteger(message.bucketSize.high)))
                                            return "bucketSize: integer|Long expected";
                                    if (message.bucketValues != null && message.hasOwnProperty("bucketValues")) {
                                        if (!Array.isArray(message.bucketValues))
                                            return "bucketValues: array expected";
                                        for (var i = 0; i < message.bucketValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.verify(message.bucketValues[i]);
                                            if (error)
                                                return "bucketValues." + error;
                                        }
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (!$util.isInteger(message.bucketValueCount) && !(message.bucketValueCount && $util.isInteger(message.bucketValueCount.low) && $util.isInteger(message.bucketValueCount.high)))
                                            return "bucketValueCount: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a KMapEstimationHistogramBucket message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket} KMapEstimationHistogramBucket
                                 */
                                KMapEstimationHistogramBucket.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket();
                                    if (object.minAnonymity != null)
                                        if ($util.Long)
                                            (message.minAnonymity = $util.Long.fromValue(object.minAnonymity)).unsigned = false;
                                        else if (typeof object.minAnonymity === "string")
                                            message.minAnonymity = parseInt(object.minAnonymity, 10);
                                        else if (typeof object.minAnonymity === "number")
                                            message.minAnonymity = object.minAnonymity;
                                        else if (typeof object.minAnonymity === "object")
                                            message.minAnonymity = new $util.LongBits(object.minAnonymity.low >>> 0, object.minAnonymity.high >>> 0).toNumber();
                                    if (object.maxAnonymity != null)
                                        if ($util.Long)
                                            (message.maxAnonymity = $util.Long.fromValue(object.maxAnonymity)).unsigned = false;
                                        else if (typeof object.maxAnonymity === "string")
                                            message.maxAnonymity = parseInt(object.maxAnonymity, 10);
                                        else if (typeof object.maxAnonymity === "number")
                                            message.maxAnonymity = object.maxAnonymity;
                                        else if (typeof object.maxAnonymity === "object")
                                            message.maxAnonymity = new $util.LongBits(object.maxAnonymity.low >>> 0, object.maxAnonymity.high >>> 0).toNumber();
                                    if (object.bucketSize != null)
                                        if ($util.Long)
                                            (message.bucketSize = $util.Long.fromValue(object.bucketSize)).unsigned = false;
                                        else if (typeof object.bucketSize === "string")
                                            message.bucketSize = parseInt(object.bucketSize, 10);
                                        else if (typeof object.bucketSize === "number")
                                            message.bucketSize = object.bucketSize;
                                        else if (typeof object.bucketSize === "object")
                                            message.bucketSize = new $util.LongBits(object.bucketSize.low >>> 0, object.bucketSize.high >>> 0).toNumber();
                                    if (object.bucketValues) {
                                        if (!Array.isArray(object.bucketValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucketValues: array expected");
                                        message.bucketValues = [];
                                        for (var i = 0; i < object.bucketValues.length; ++i) {
                                            if (typeof object.bucketValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucketValues: object expected");
                                            message.bucketValues[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.fromObject(object.bucketValues[i]);
                                        }
                                    }
                                    if (object.bucketValueCount != null)
                                        if ($util.Long)
                                            (message.bucketValueCount = $util.Long.fromValue(object.bucketValueCount)).unsigned = false;
                                        else if (typeof object.bucketValueCount === "string")
                                            message.bucketValueCount = parseInt(object.bucketValueCount, 10);
                                        else if (typeof object.bucketValueCount === "number")
                                            message.bucketValueCount = object.bucketValueCount;
                                        else if (typeof object.bucketValueCount === "object")
                                            message.bucketValueCount = new $util.LongBits(object.bucketValueCount.low >>> 0, object.bucketValueCount.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a KMapEstimationHistogramBucket message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket} message KMapEstimationHistogramBucket
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                KMapEstimationHistogramBucket.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.bucketValues = [];
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.minAnonymity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.minAnonymity = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.maxAnonymity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.maxAnonymity = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketSize = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketValueCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketValueCount = options.longs === String ? "0" : 0;
                                    }
                                    if (message.minAnonymity != null && message.hasOwnProperty("minAnonymity"))
                                        if (typeof message.minAnonymity === "number")
                                            object.minAnonymity = options.longs === String ? String(message.minAnonymity) : message.minAnonymity;
                                        else
                                            object.minAnonymity = options.longs === String ? $util.Long.prototype.toString.call(message.minAnonymity) : options.longs === Number ? new $util.LongBits(message.minAnonymity.low >>> 0, message.minAnonymity.high >>> 0).toNumber() : message.minAnonymity;
                                    if (message.maxAnonymity != null && message.hasOwnProperty("maxAnonymity"))
                                        if (typeof message.maxAnonymity === "number")
                                            object.maxAnonymity = options.longs === String ? String(message.maxAnonymity) : message.maxAnonymity;
                                        else
                                            object.maxAnonymity = options.longs === String ? $util.Long.prototype.toString.call(message.maxAnonymity) : options.longs === Number ? new $util.LongBits(message.maxAnonymity.low >>> 0, message.maxAnonymity.high >>> 0).toNumber() : message.maxAnonymity;
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (typeof message.bucketSize === "number")
                                            object.bucketSize = options.longs === String ? String(message.bucketSize) : message.bucketSize;
                                        else
                                            object.bucketSize = options.longs === String ? $util.Long.prototype.toString.call(message.bucketSize) : options.longs === Number ? new $util.LongBits(message.bucketSize.low >>> 0, message.bucketSize.high >>> 0).toNumber() : message.bucketSize;
                                    if (message.bucketValues && message.bucketValues.length) {
                                        object.bucketValues = [];
                                        for (var j = 0; j < message.bucketValues.length; ++j)
                                            object.bucketValues[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.toObject(message.bucketValues[j], options);
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (typeof message.bucketValueCount === "number")
                                            object.bucketValueCount = options.longs === String ? String(message.bucketValueCount) : message.bucketValueCount;
                                        else
                                            object.bucketValueCount = options.longs === String ? $util.Long.prototype.toString.call(message.bucketValueCount) : options.longs === Number ? new $util.LongBits(message.bucketValueCount.low >>> 0, message.bucketValueCount.high >>> 0).toNumber() : message.bucketValueCount;
                                    return object;
                                };
    
                                /**
                                 * Converts this KMapEstimationHistogramBucket to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                KMapEstimationHistogramBucket.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return KMapEstimationHistogramBucket;
                            })();
    
                            return KMapEstimationResult;
                        })();
    
                        AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult = (function() {
    
                            /**
                             * Properties of a DeltaPresenceEstimationResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface IDeltaPresenceEstimationResult
                             * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationHistogramBucket>|null} [deltaPresenceEstimationHistogram] DeltaPresenceEstimationResult deltaPresenceEstimationHistogram
                             */
    
                            /**
                             * Constructs a new DeltaPresenceEstimationResult.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a DeltaPresenceEstimationResult.
                             * @implements IDeltaPresenceEstimationResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IDeltaPresenceEstimationResult=} [properties] Properties to set
                             */
                            function DeltaPresenceEstimationResult(properties) {
                                this.deltaPresenceEstimationHistogram = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DeltaPresenceEstimationResult deltaPresenceEstimationHistogram.
                             * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationHistogramBucket>} deltaPresenceEstimationHistogram
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @instance
                             */
                            DeltaPresenceEstimationResult.prototype.deltaPresenceEstimationHistogram = $util.emptyArray;
    
                            /**
                             * Creates a new DeltaPresenceEstimationResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IDeltaPresenceEstimationResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult} DeltaPresenceEstimationResult instance
                             */
                            DeltaPresenceEstimationResult.create = function create(properties) {
                                return new DeltaPresenceEstimationResult(properties);
                            };
    
                            /**
                             * Encodes the specified DeltaPresenceEstimationResult message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IDeltaPresenceEstimationResult} message DeltaPresenceEstimationResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeltaPresenceEstimationResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.deltaPresenceEstimationHistogram != null && message.deltaPresenceEstimationHistogram.length)
                                    for (var i = 0; i < message.deltaPresenceEstimationHistogram.length; ++i)
                                        $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.encode(message.deltaPresenceEstimationHistogram[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DeltaPresenceEstimationResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IDeltaPresenceEstimationResult} message DeltaPresenceEstimationResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeltaPresenceEstimationResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DeltaPresenceEstimationResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult} DeltaPresenceEstimationResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeltaPresenceEstimationResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.deltaPresenceEstimationHistogram && message.deltaPresenceEstimationHistogram.length))
                                            message.deltaPresenceEstimationHistogram = [];
                                        message.deltaPresenceEstimationHistogram.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DeltaPresenceEstimationResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult} DeltaPresenceEstimationResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeltaPresenceEstimationResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DeltaPresenceEstimationResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DeltaPresenceEstimationResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.deltaPresenceEstimationHistogram != null && message.hasOwnProperty("deltaPresenceEstimationHistogram")) {
                                    if (!Array.isArray(message.deltaPresenceEstimationHistogram))
                                        return "deltaPresenceEstimationHistogram: array expected";
                                    for (var i = 0; i < message.deltaPresenceEstimationHistogram.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.verify(message.deltaPresenceEstimationHistogram[i]);
                                        if (error)
                                            return "deltaPresenceEstimationHistogram." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a DeltaPresenceEstimationResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult} DeltaPresenceEstimationResult
                             */
                            DeltaPresenceEstimationResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult();
                                if (object.deltaPresenceEstimationHistogram) {
                                    if (!Array.isArray(object.deltaPresenceEstimationHistogram))
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.deltaPresenceEstimationHistogram: array expected");
                                    message.deltaPresenceEstimationHistogram = [];
                                    for (var i = 0; i < object.deltaPresenceEstimationHistogram.length; ++i) {
                                        if (typeof object.deltaPresenceEstimationHistogram[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.deltaPresenceEstimationHistogram: object expected");
                                        message.deltaPresenceEstimationHistogram[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.fromObject(object.deltaPresenceEstimationHistogram[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DeltaPresenceEstimationResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult} message DeltaPresenceEstimationResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DeltaPresenceEstimationResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.deltaPresenceEstimationHistogram = [];
                                if (message.deltaPresenceEstimationHistogram && message.deltaPresenceEstimationHistogram.length) {
                                    object.deltaPresenceEstimationHistogram = [];
                                    for (var j = 0; j < message.deltaPresenceEstimationHistogram.length; ++j)
                                        object.deltaPresenceEstimationHistogram[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.toObject(message.deltaPresenceEstimationHistogram[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this DeltaPresenceEstimationResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DeltaPresenceEstimationResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues = (function() {
    
                                /**
                                 * Properties of a DeltaPresenceEstimationQuasiIdValues.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                                 * @interface IDeltaPresenceEstimationQuasiIdValues
                                 * @property {Array.<google.privacy.dlp.v2.IValue>|null} [quasiIdsValues] DeltaPresenceEstimationQuasiIdValues quasiIdsValues
                                 * @property {number|null} [estimatedProbability] DeltaPresenceEstimationQuasiIdValues estimatedProbability
                                 */
    
                                /**
                                 * Constructs a new DeltaPresenceEstimationQuasiIdValues.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                                 * @classdesc Represents a DeltaPresenceEstimationQuasiIdValues.
                                 * @implements IDeltaPresenceEstimationQuasiIdValues
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationQuasiIdValues=} [properties] Properties to set
                                 */
                                function DeltaPresenceEstimationQuasiIdValues(properties) {
                                    this.quasiIdsValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * DeltaPresenceEstimationQuasiIdValues quasiIdsValues.
                                 * @member {Array.<google.privacy.dlp.v2.IValue>} quasiIdsValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @instance
                                 */
                                DeltaPresenceEstimationQuasiIdValues.prototype.quasiIdsValues = $util.emptyArray;
    
                                /**
                                 * DeltaPresenceEstimationQuasiIdValues estimatedProbability.
                                 * @member {number} estimatedProbability
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @instance
                                 */
                                DeltaPresenceEstimationQuasiIdValues.prototype.estimatedProbability = 0;
    
                                /**
                                 * Creates a new DeltaPresenceEstimationQuasiIdValues instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationQuasiIdValues=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues} DeltaPresenceEstimationQuasiIdValues instance
                                 */
                                DeltaPresenceEstimationQuasiIdValues.create = function create(properties) {
                                    return new DeltaPresenceEstimationQuasiIdValues(properties);
                                };
    
                                /**
                                 * Encodes the specified DeltaPresenceEstimationQuasiIdValues message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationQuasiIdValues} message DeltaPresenceEstimationQuasiIdValues message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeltaPresenceEstimationQuasiIdValues.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.quasiIdsValues != null && message.quasiIdsValues.length)
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i)
                                            $root.google.privacy.dlp.v2.Value.encode(message.quasiIdsValues[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.estimatedProbability != null && Object.hasOwnProperty.call(message, "estimatedProbability"))
                                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.estimatedProbability);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified DeltaPresenceEstimationQuasiIdValues message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationQuasiIdValues} message DeltaPresenceEstimationQuasiIdValues message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeltaPresenceEstimationQuasiIdValues.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a DeltaPresenceEstimationQuasiIdValues message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues} DeltaPresenceEstimationQuasiIdValues
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeltaPresenceEstimationQuasiIdValues.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.quasiIdsValues && message.quasiIdsValues.length))
                                                message.quasiIdsValues = [];
                                            message.quasiIdsValues.push($root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32()));
                                            break;
                                        case 2:
                                            message.estimatedProbability = reader.double();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a DeltaPresenceEstimationQuasiIdValues message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues} DeltaPresenceEstimationQuasiIdValues
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeltaPresenceEstimationQuasiIdValues.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a DeltaPresenceEstimationQuasiIdValues message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                DeltaPresenceEstimationQuasiIdValues.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.quasiIdsValues != null && message.hasOwnProperty("quasiIdsValues")) {
                                        if (!Array.isArray(message.quasiIdsValues))
                                            return "quasiIdsValues: array expected";
                                        for (var i = 0; i < message.quasiIdsValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.Value.verify(message.quasiIdsValues[i]);
                                            if (error)
                                                return "quasiIdsValues." + error;
                                        }
                                    }
                                    if (message.estimatedProbability != null && message.hasOwnProperty("estimatedProbability"))
                                        if (typeof message.estimatedProbability !== "number")
                                            return "estimatedProbability: number expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a DeltaPresenceEstimationQuasiIdValues message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues} DeltaPresenceEstimationQuasiIdValues
                                 */
                                DeltaPresenceEstimationQuasiIdValues.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues();
                                    if (object.quasiIdsValues) {
                                        if (!Array.isArray(object.quasiIdsValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasiIdsValues: array expected");
                                        message.quasiIdsValues = [];
                                        for (var i = 0; i < object.quasiIdsValues.length; ++i) {
                                            if (typeof object.quasiIdsValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasiIdsValues: object expected");
                                            message.quasiIdsValues[i] = $root.google.privacy.dlp.v2.Value.fromObject(object.quasiIdsValues[i]);
                                        }
                                    }
                                    if (object.estimatedProbability != null)
                                        message.estimatedProbability = Number(object.estimatedProbability);
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a DeltaPresenceEstimationQuasiIdValues message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues} message DeltaPresenceEstimationQuasiIdValues
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                DeltaPresenceEstimationQuasiIdValues.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.quasiIdsValues = [];
                                    if (options.defaults)
                                        object.estimatedProbability = 0;
                                    if (message.quasiIdsValues && message.quasiIdsValues.length) {
                                        object.quasiIdsValues = [];
                                        for (var j = 0; j < message.quasiIdsValues.length; ++j)
                                            object.quasiIdsValues[j] = $root.google.privacy.dlp.v2.Value.toObject(message.quasiIdsValues[j], options);
                                    }
                                    if (message.estimatedProbability != null && message.hasOwnProperty("estimatedProbability"))
                                        object.estimatedProbability = options.json && !isFinite(message.estimatedProbability) ? String(message.estimatedProbability) : message.estimatedProbability;
                                    return object;
                                };
    
                                /**
                                 * Converts this DeltaPresenceEstimationQuasiIdValues to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                DeltaPresenceEstimationQuasiIdValues.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return DeltaPresenceEstimationQuasiIdValues;
                            })();
    
                            DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket = (function() {
    
                                /**
                                 * Properties of a DeltaPresenceEstimationHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                                 * @interface IDeltaPresenceEstimationHistogramBucket
                                 * @property {number|null} [minProbability] DeltaPresenceEstimationHistogramBucket minProbability
                                 * @property {number|null} [maxProbability] DeltaPresenceEstimationHistogramBucket maxProbability
                                 * @property {number|Long|null} [bucketSize] DeltaPresenceEstimationHistogramBucket bucketSize
                                 * @property {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationQuasiIdValues>|null} [bucketValues] DeltaPresenceEstimationHistogramBucket bucketValues
                                 * @property {number|Long|null} [bucketValueCount] DeltaPresenceEstimationHistogramBucket bucketValueCount
                                 */
    
                                /**
                                 * Constructs a new DeltaPresenceEstimationHistogramBucket.
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
                                 * @classdesc Represents a DeltaPresenceEstimationHistogramBucket.
                                 * @implements IDeltaPresenceEstimationHistogramBucket
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationHistogramBucket=} [properties] Properties to set
                                 */
                                function DeltaPresenceEstimationHistogramBucket(properties) {
                                    this.bucketValues = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * DeltaPresenceEstimationHistogramBucket minProbability.
                                 * @member {number} minProbability
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @instance
                                 */
                                DeltaPresenceEstimationHistogramBucket.prototype.minProbability = 0;
    
                                /**
                                 * DeltaPresenceEstimationHistogramBucket maxProbability.
                                 * @member {number} maxProbability
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @instance
                                 */
                                DeltaPresenceEstimationHistogramBucket.prototype.maxProbability = 0;
    
                                /**
                                 * DeltaPresenceEstimationHistogramBucket bucketSize.
                                 * @member {number|Long} bucketSize
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @instance
                                 */
                                DeltaPresenceEstimationHistogramBucket.prototype.bucketSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * DeltaPresenceEstimationHistogramBucket bucketValues.
                                 * @member {Array.<google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationQuasiIdValues>} bucketValues
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @instance
                                 */
                                DeltaPresenceEstimationHistogramBucket.prototype.bucketValues = $util.emptyArray;
    
                                /**
                                 * DeltaPresenceEstimationHistogramBucket bucketValueCount.
                                 * @member {number|Long} bucketValueCount
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @instance
                                 */
                                DeltaPresenceEstimationHistogramBucket.prototype.bucketValueCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new DeltaPresenceEstimationHistogramBucket instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationHistogramBucket=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket} DeltaPresenceEstimationHistogramBucket instance
                                 */
                                DeltaPresenceEstimationHistogramBucket.create = function create(properties) {
                                    return new DeltaPresenceEstimationHistogramBucket(properties);
                                };
    
                                /**
                                 * Encodes the specified DeltaPresenceEstimationHistogramBucket message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationHistogramBucket} message DeltaPresenceEstimationHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeltaPresenceEstimationHistogramBucket.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.minProbability != null && Object.hasOwnProperty.call(message, "minProbability"))
                                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.minProbability);
                                    if (message.maxProbability != null && Object.hasOwnProperty.call(message, "maxProbability"))
                                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.maxProbability);
                                    if (message.bucketSize != null && Object.hasOwnProperty.call(message, "bucketSize"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.bucketSize);
                                    if (message.bucketValues != null && message.bucketValues.length)
                                        for (var i = 0; i < message.bucketValues.length; ++i)
                                            $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.encode(message.bucketValues[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                    if (message.bucketValueCount != null && Object.hasOwnProperty.call(message, "bucketValueCount"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.bucketValueCount);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified DeltaPresenceEstimationHistogramBucket message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.IDeltaPresenceEstimationHistogramBucket} message DeltaPresenceEstimationHistogramBucket message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeltaPresenceEstimationHistogramBucket.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a DeltaPresenceEstimationHistogramBucket message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket} DeltaPresenceEstimationHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeltaPresenceEstimationHistogramBucket.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.minProbability = reader.double();
                                            break;
                                        case 2:
                                            message.maxProbability = reader.double();
                                            break;
                                        case 5:
                                            message.bucketSize = reader.int64();
                                            break;
                                        case 6:
                                            if (!(message.bucketValues && message.bucketValues.length))
                                                message.bucketValues = [];
                                            message.bucketValues.push($root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.decode(reader, reader.uint32()));
                                            break;
                                        case 7:
                                            message.bucketValueCount = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a DeltaPresenceEstimationHistogramBucket message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket} DeltaPresenceEstimationHistogramBucket
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeltaPresenceEstimationHistogramBucket.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a DeltaPresenceEstimationHistogramBucket message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                DeltaPresenceEstimationHistogramBucket.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.minProbability != null && message.hasOwnProperty("minProbability"))
                                        if (typeof message.minProbability !== "number")
                                            return "minProbability: number expected";
                                    if (message.maxProbability != null && message.hasOwnProperty("maxProbability"))
                                        if (typeof message.maxProbability !== "number")
                                            return "maxProbability: number expected";
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (!$util.isInteger(message.bucketSize) && !(message.bucketSize && $util.isInteger(message.bucketSize.low) && $util.isInteger(message.bucketSize.high)))
                                            return "bucketSize: integer|Long expected";
                                    if (message.bucketValues != null && message.hasOwnProperty("bucketValues")) {
                                        if (!Array.isArray(message.bucketValues))
                                            return "bucketValues: array expected";
                                        for (var i = 0; i < message.bucketValues.length; ++i) {
                                            var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.verify(message.bucketValues[i]);
                                            if (error)
                                                return "bucketValues." + error;
                                        }
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (!$util.isInteger(message.bucketValueCount) && !(message.bucketValueCount && $util.isInteger(message.bucketValueCount.low) && $util.isInteger(message.bucketValueCount.high)))
                                            return "bucketValueCount: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a DeltaPresenceEstimationHistogramBucket message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket} DeltaPresenceEstimationHistogramBucket
                                 */
                                DeltaPresenceEstimationHistogramBucket.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket();
                                    if (object.minProbability != null)
                                        message.minProbability = Number(object.minProbability);
                                    if (object.maxProbability != null)
                                        message.maxProbability = Number(object.maxProbability);
                                    if (object.bucketSize != null)
                                        if ($util.Long)
                                            (message.bucketSize = $util.Long.fromValue(object.bucketSize)).unsigned = false;
                                        else if (typeof object.bucketSize === "string")
                                            message.bucketSize = parseInt(object.bucketSize, 10);
                                        else if (typeof object.bucketSize === "number")
                                            message.bucketSize = object.bucketSize;
                                        else if (typeof object.bucketSize === "object")
                                            message.bucketSize = new $util.LongBits(object.bucketSize.low >>> 0, object.bucketSize.high >>> 0).toNumber();
                                    if (object.bucketValues) {
                                        if (!Array.isArray(object.bucketValues))
                                            throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucketValues: array expected");
                                        message.bucketValues = [];
                                        for (var i = 0; i < object.bucketValues.length; ++i) {
                                            if (typeof object.bucketValues[i] !== "object")
                                                throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucketValues: object expected");
                                            message.bucketValues[i] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.fromObject(object.bucketValues[i]);
                                        }
                                    }
                                    if (object.bucketValueCount != null)
                                        if ($util.Long)
                                            (message.bucketValueCount = $util.Long.fromValue(object.bucketValueCount)).unsigned = false;
                                        else if (typeof object.bucketValueCount === "string")
                                            message.bucketValueCount = parseInt(object.bucketValueCount, 10);
                                        else if (typeof object.bucketValueCount === "number")
                                            message.bucketValueCount = object.bucketValueCount;
                                        else if (typeof object.bucketValueCount === "object")
                                            message.bucketValueCount = new $util.LongBits(object.bucketValueCount.low >>> 0, object.bucketValueCount.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a DeltaPresenceEstimationHistogramBucket message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @static
                                 * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket} message DeltaPresenceEstimationHistogramBucket
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                DeltaPresenceEstimationHistogramBucket.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.bucketValues = [];
                                    if (options.defaults) {
                                        object.minProbability = 0;
                                        object.maxProbability = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketSize = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.bucketValueCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.bucketValueCount = options.longs === String ? "0" : 0;
                                    }
                                    if (message.minProbability != null && message.hasOwnProperty("minProbability"))
                                        object.minProbability = options.json && !isFinite(message.minProbability) ? String(message.minProbability) : message.minProbability;
                                    if (message.maxProbability != null && message.hasOwnProperty("maxProbability"))
                                        object.maxProbability = options.json && !isFinite(message.maxProbability) ? String(message.maxProbability) : message.maxProbability;
                                    if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                        if (typeof message.bucketSize === "number")
                                            object.bucketSize = options.longs === String ? String(message.bucketSize) : message.bucketSize;
                                        else
                                            object.bucketSize = options.longs === String ? $util.Long.prototype.toString.call(message.bucketSize) : options.longs === Number ? new $util.LongBits(message.bucketSize.low >>> 0, message.bucketSize.high >>> 0).toNumber() : message.bucketSize;
                                    if (message.bucketValues && message.bucketValues.length) {
                                        object.bucketValues = [];
                                        for (var j = 0; j < message.bucketValues.length; ++j)
                                            object.bucketValues[j] = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.toObject(message.bucketValues[j], options);
                                    }
                                    if (message.bucketValueCount != null && message.hasOwnProperty("bucketValueCount"))
                                        if (typeof message.bucketValueCount === "number")
                                            object.bucketValueCount = options.longs === String ? String(message.bucketValueCount) : message.bucketValueCount;
                                        else
                                            object.bucketValueCount = options.longs === String ? $util.Long.prototype.toString.call(message.bucketValueCount) : options.longs === Number ? new $util.LongBits(message.bucketValueCount.low >>> 0, message.bucketValueCount.high >>> 0).toNumber() : message.bucketValueCount;
                                    return object;
                                };
    
                                /**
                                 * Converts this DeltaPresenceEstimationHistogramBucket to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                DeltaPresenceEstimationHistogramBucket.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return DeltaPresenceEstimationHistogramBucket;
                            })();
    
                            return DeltaPresenceEstimationResult;
                        })();
    
                        AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions = (function() {
    
                            /**
                             * Properties of a RequestedRiskAnalysisOptions.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @interface IRequestedRiskAnalysisOptions
                             * @property {google.privacy.dlp.v2.IRiskAnalysisJobConfig|null} [jobConfig] RequestedRiskAnalysisOptions jobConfig
                             */
    
                            /**
                             * Constructs a new RequestedRiskAnalysisOptions.
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
                             * @classdesc Represents a RequestedRiskAnalysisOptions.
                             * @implements IRequestedRiskAnalysisOptions
                             * @constructor
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IRequestedRiskAnalysisOptions=} [properties] Properties to set
                             */
                            function RequestedRiskAnalysisOptions(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * RequestedRiskAnalysisOptions jobConfig.
                             * @member {google.privacy.dlp.v2.IRiskAnalysisJobConfig|null|undefined} jobConfig
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @instance
                             */
                            RequestedRiskAnalysisOptions.prototype.jobConfig = null;
    
                            /**
                             * Creates a new RequestedRiskAnalysisOptions instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IRequestedRiskAnalysisOptions=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions} RequestedRiskAnalysisOptions instance
                             */
                            RequestedRiskAnalysisOptions.create = function create(properties) {
                                return new RequestedRiskAnalysisOptions(properties);
                            };
    
                            /**
                             * Encodes the specified RequestedRiskAnalysisOptions message. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IRequestedRiskAnalysisOptions} message RequestedRiskAnalysisOptions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RequestedRiskAnalysisOptions.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.jobConfig != null && Object.hasOwnProperty.call(message, "jobConfig"))
                                    $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.encode(message.jobConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified RequestedRiskAnalysisOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.IRequestedRiskAnalysisOptions} message RequestedRiskAnalysisOptions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RequestedRiskAnalysisOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a RequestedRiskAnalysisOptions message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions} RequestedRiskAnalysisOptions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RequestedRiskAnalysisOptions.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.jobConfig = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a RequestedRiskAnalysisOptions message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions} RequestedRiskAnalysisOptions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RequestedRiskAnalysisOptions.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a RequestedRiskAnalysisOptions message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RequestedRiskAnalysisOptions.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.jobConfig != null && message.hasOwnProperty("jobConfig")) {
                                    var error = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.verify(message.jobConfig);
                                    if (error)
                                        return "jobConfig." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a RequestedRiskAnalysisOptions message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions} RequestedRiskAnalysisOptions
                             */
                            RequestedRiskAnalysisOptions.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions();
                                if (object.jobConfig != null) {
                                    if (typeof object.jobConfig !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.jobConfig: object expected");
                                    message.jobConfig = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.fromObject(object.jobConfig);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a RequestedRiskAnalysisOptions message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @static
                             * @param {google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions} message RequestedRiskAnalysisOptions
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RequestedRiskAnalysisOptions.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.jobConfig = null;
                                if (message.jobConfig != null && message.hasOwnProperty("jobConfig"))
                                    object.jobConfig = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.toObject(message.jobConfig, options);
                                return object;
                            };
    
                            /**
                             * Converts this RequestedRiskAnalysisOptions to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RequestedRiskAnalysisOptions.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return RequestedRiskAnalysisOptions;
                        })();
    
                        return AnalyzeDataSourceRiskDetails;
                    })();
    
                    v2.ValueFrequency = (function() {
    
                        /**
                         * Properties of a ValueFrequency.
                         * @memberof google.privacy.dlp.v2
                         * @interface IValueFrequency
                         * @property {google.privacy.dlp.v2.IValue|null} [value] ValueFrequency value
                         * @property {number|Long|null} [count] ValueFrequency count
                         */
    
                        /**
                         * Constructs a new ValueFrequency.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ValueFrequency.
                         * @implements IValueFrequency
                         * @constructor
                         * @param {google.privacy.dlp.v2.IValueFrequency=} [properties] Properties to set
                         */
                        function ValueFrequency(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ValueFrequency value.
                         * @member {google.privacy.dlp.v2.IValue|null|undefined} value
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @instance
                         */
                        ValueFrequency.prototype.value = null;
    
                        /**
                         * ValueFrequency count.
                         * @member {number|Long} count
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @instance
                         */
                        ValueFrequency.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new ValueFrequency instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {google.privacy.dlp.v2.IValueFrequency=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ValueFrequency} ValueFrequency instance
                         */
                        ValueFrequency.create = function create(properties) {
                            return new ValueFrequency(properties);
                        };
    
                        /**
                         * Encodes the specified ValueFrequency message. Does not implicitly {@link google.privacy.dlp.v2.ValueFrequency.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {google.privacy.dlp.v2.IValueFrequency} message ValueFrequency message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ValueFrequency.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                $root.google.privacy.dlp.v2.Value.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.count);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ValueFrequency message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ValueFrequency.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {google.privacy.dlp.v2.IValueFrequency} message ValueFrequency message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ValueFrequency.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ValueFrequency message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ValueFrequency} ValueFrequency
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ValueFrequency.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ValueFrequency();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.count = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ValueFrequency message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ValueFrequency} ValueFrequency
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ValueFrequency.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ValueFrequency message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ValueFrequency.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value")) {
                                var error = $root.google.privacy.dlp.v2.Value.verify(message.value);
                                if (error)
                                    return "value." + error;
                            }
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                    return "count: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a ValueFrequency message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ValueFrequency} ValueFrequency
                         */
                        ValueFrequency.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ValueFrequency)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ValueFrequency();
                            if (object.value != null) {
                                if (typeof object.value !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ValueFrequency.value: object expected");
                                message.value = $root.google.privacy.dlp.v2.Value.fromObject(object.value);
                            }
                            if (object.count != null)
                                if ($util.Long)
                                    (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                else if (typeof object.count === "string")
                                    message.count = parseInt(object.count, 10);
                                else if (typeof object.count === "number")
                                    message.count = object.count;
                                else if (typeof object.count === "object")
                                    message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ValueFrequency message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @static
                         * @param {google.privacy.dlp.v2.ValueFrequency} message ValueFrequency
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ValueFrequency.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.value = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.count = options.longs === String ? "0" : 0;
                            }
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = $root.google.privacy.dlp.v2.Value.toObject(message.value, options);
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (typeof message.count === "number")
                                    object.count = options.longs === String ? String(message.count) : message.count;
                                else
                                    object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                            return object;
                        };
    
                        /**
                         * Converts this ValueFrequency to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ValueFrequency
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ValueFrequency.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ValueFrequency;
                    })();
    
                    v2.Value = (function() {
    
                        /**
                         * Properties of a Value.
                         * @memberof google.privacy.dlp.v2
                         * @interface IValue
                         * @property {number|Long|null} [integerValue] Value integerValue
                         * @property {number|null} [floatValue] Value floatValue
                         * @property {string|null} [stringValue] Value stringValue
                         * @property {boolean|null} [booleanValue] Value booleanValue
                         * @property {google.protobuf.ITimestamp|null} [timestampValue] Value timestampValue
                         * @property {google.type.ITimeOfDay|null} [timeValue] Value timeValue
                         * @property {google.type.IDate|null} [dateValue] Value dateValue
                         * @property {google.type.DayOfWeek|null} [dayOfWeekValue] Value dayOfWeekValue
                         */
    
                        /**
                         * Constructs a new Value.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Value.
                         * @implements IValue
                         * @constructor
                         * @param {google.privacy.dlp.v2.IValue=} [properties] Properties to set
                         */
                        function Value(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Value integerValue.
                         * @member {number|Long} integerValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.integerValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Value floatValue.
                         * @member {number} floatValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.floatValue = 0;
    
                        /**
                         * Value stringValue.
                         * @member {string} stringValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.stringValue = "";
    
                        /**
                         * Value booleanValue.
                         * @member {boolean} booleanValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.booleanValue = false;
    
                        /**
                         * Value timestampValue.
                         * @member {google.protobuf.ITimestamp|null|undefined} timestampValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.timestampValue = null;
    
                        /**
                         * Value timeValue.
                         * @member {google.type.ITimeOfDay|null|undefined} timeValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.timeValue = null;
    
                        /**
                         * Value dateValue.
                         * @member {google.type.IDate|null|undefined} dateValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.dateValue = null;
    
                        /**
                         * Value dayOfWeekValue.
                         * @member {google.type.DayOfWeek} dayOfWeekValue
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Value.prototype.dayOfWeekValue = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Value type.
                         * @member {"integerValue"|"floatValue"|"stringValue"|"booleanValue"|"timestampValue"|"timeValue"|"dateValue"|"dayOfWeekValue"|undefined} type
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         */
                        Object.defineProperty(Value.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["integerValue", "floatValue", "stringValue", "booleanValue", "timestampValue", "timeValue", "dateValue", "dayOfWeekValue"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Value instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {google.privacy.dlp.v2.IValue=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Value} Value instance
                         */
                        Value.create = function create(properties) {
                            return new Value(properties);
                        };
    
                        /**
                         * Encodes the specified Value message. Does not implicitly {@link google.privacy.dlp.v2.Value.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {google.privacy.dlp.v2.IValue} message Value message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Value.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.integerValue != null && Object.hasOwnProperty.call(message, "integerValue"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.integerValue);
                            if (message.floatValue != null && Object.hasOwnProperty.call(message, "floatValue"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.floatValue);
                            if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.stringValue);
                            if (message.booleanValue != null && Object.hasOwnProperty.call(message, "booleanValue"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.booleanValue);
                            if (message.timestampValue != null && Object.hasOwnProperty.call(message, "timestampValue"))
                                $root.google.protobuf.Timestamp.encode(message.timestampValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.timeValue != null && Object.hasOwnProperty.call(message, "timeValue"))
                                $root.google.type.TimeOfDay.encode(message.timeValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.dateValue != null && Object.hasOwnProperty.call(message, "dateValue"))
                                $root.google.type.Date.encode(message.dateValue, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.dayOfWeekValue != null && Object.hasOwnProperty.call(message, "dayOfWeekValue"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.dayOfWeekValue);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Value message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Value.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {google.privacy.dlp.v2.IValue} message Value message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Value.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Value message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Value} Value
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Value.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Value();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.integerValue = reader.int64();
                                    break;
                                case 2:
                                    message.floatValue = reader.double();
                                    break;
                                case 3:
                                    message.stringValue = reader.string();
                                    break;
                                case 4:
                                    message.booleanValue = reader.bool();
                                    break;
                                case 5:
                                    message.timestampValue = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.timeValue = $root.google.type.TimeOfDay.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.dateValue = $root.google.type.Date.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.dayOfWeekValue = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Value message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Value} Value
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Value.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Value message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Value.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.integerValue != null && message.hasOwnProperty("integerValue")) {
                                properties.type = 1;
                                if (!$util.isInteger(message.integerValue) && !(message.integerValue && $util.isInteger(message.integerValue.low) && $util.isInteger(message.integerValue.high)))
                                    return "integerValue: integer|Long expected";
                            }
                            if (message.floatValue != null && message.hasOwnProperty("floatValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                if (typeof message.floatValue !== "number")
                                    return "floatValue: number expected";
                            }
                            if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                if (!$util.isString(message.stringValue))
                                    return "stringValue: string expected";
                            }
                            if (message.booleanValue != null && message.hasOwnProperty("booleanValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                if (typeof message.booleanValue !== "boolean")
                                    return "booleanValue: boolean expected";
                            }
                            if (message.timestampValue != null && message.hasOwnProperty("timestampValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.protobuf.Timestamp.verify(message.timestampValue);
                                    if (error)
                                        return "timestampValue." + error;
                                }
                            }
                            if (message.timeValue != null && message.hasOwnProperty("timeValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.type.TimeOfDay.verify(message.timeValue);
                                    if (error)
                                        return "timeValue." + error;
                                }
                            }
                            if (message.dateValue != null && message.hasOwnProperty("dateValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.type.Date.verify(message.dateValue);
                                    if (error)
                                        return "dateValue." + error;
                                }
                            }
                            if (message.dayOfWeekValue != null && message.hasOwnProperty("dayOfWeekValue")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                switch (message.dayOfWeekValue) {
                                default:
                                    return "dayOfWeekValue: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    break;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Value message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Value} Value
                         */
                        Value.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Value)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Value();
                            if (object.integerValue != null)
                                if ($util.Long)
                                    (message.integerValue = $util.Long.fromValue(object.integerValue)).unsigned = false;
                                else if (typeof object.integerValue === "string")
                                    message.integerValue = parseInt(object.integerValue, 10);
                                else if (typeof object.integerValue === "number")
                                    message.integerValue = object.integerValue;
                                else if (typeof object.integerValue === "object")
                                    message.integerValue = new $util.LongBits(object.integerValue.low >>> 0, object.integerValue.high >>> 0).toNumber();
                            if (object.floatValue != null)
                                message.floatValue = Number(object.floatValue);
                            if (object.stringValue != null)
                                message.stringValue = String(object.stringValue);
                            if (object.booleanValue != null)
                                message.booleanValue = Boolean(object.booleanValue);
                            if (object.timestampValue != null) {
                                if (typeof object.timestampValue !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Value.timestampValue: object expected");
                                message.timestampValue = $root.google.protobuf.Timestamp.fromObject(object.timestampValue);
                            }
                            if (object.timeValue != null) {
                                if (typeof object.timeValue !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Value.timeValue: object expected");
                                message.timeValue = $root.google.type.TimeOfDay.fromObject(object.timeValue);
                            }
                            if (object.dateValue != null) {
                                if (typeof object.dateValue !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Value.dateValue: object expected");
                                message.dateValue = $root.google.type.Date.fromObject(object.dateValue);
                            }
                            switch (object.dayOfWeekValue) {
                            case "DAY_OF_WEEK_UNSPECIFIED":
                            case 0:
                                message.dayOfWeekValue = 0;
                                break;
                            case "MONDAY":
                            case 1:
                                message.dayOfWeekValue = 1;
                                break;
                            case "TUESDAY":
                            case 2:
                                message.dayOfWeekValue = 2;
                                break;
                            case "WEDNESDAY":
                            case 3:
                                message.dayOfWeekValue = 3;
                                break;
                            case "THURSDAY":
                            case 4:
                                message.dayOfWeekValue = 4;
                                break;
                            case "FRIDAY":
                            case 5:
                                message.dayOfWeekValue = 5;
                                break;
                            case "SATURDAY":
                            case 6:
                                message.dayOfWeekValue = 6;
                                break;
                            case "SUNDAY":
                            case 7:
                                message.dayOfWeekValue = 7;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Value message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Value
                         * @static
                         * @param {google.privacy.dlp.v2.Value} message Value
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Value.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.integerValue != null && message.hasOwnProperty("integerValue")) {
                                if (typeof message.integerValue === "number")
                                    object.integerValue = options.longs === String ? String(message.integerValue) : message.integerValue;
                                else
                                    object.integerValue = options.longs === String ? $util.Long.prototype.toString.call(message.integerValue) : options.longs === Number ? new $util.LongBits(message.integerValue.low >>> 0, message.integerValue.high >>> 0).toNumber() : message.integerValue;
                                if (options.oneofs)
                                    object.type = "integerValue";
                            }
                            if (message.floatValue != null && message.hasOwnProperty("floatValue")) {
                                object.floatValue = options.json && !isFinite(message.floatValue) ? String(message.floatValue) : message.floatValue;
                                if (options.oneofs)
                                    object.type = "floatValue";
                            }
                            if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                                object.stringValue = message.stringValue;
                                if (options.oneofs)
                                    object.type = "stringValue";
                            }
                            if (message.booleanValue != null && message.hasOwnProperty("booleanValue")) {
                                object.booleanValue = message.booleanValue;
                                if (options.oneofs)
                                    object.type = "booleanValue";
                            }
                            if (message.timestampValue != null && message.hasOwnProperty("timestampValue")) {
                                object.timestampValue = $root.google.protobuf.Timestamp.toObject(message.timestampValue, options);
                                if (options.oneofs)
                                    object.type = "timestampValue";
                            }
                            if (message.timeValue != null && message.hasOwnProperty("timeValue")) {
                                object.timeValue = $root.google.type.TimeOfDay.toObject(message.timeValue, options);
                                if (options.oneofs)
                                    object.type = "timeValue";
                            }
                            if (message.dateValue != null && message.hasOwnProperty("dateValue")) {
                                object.dateValue = $root.google.type.Date.toObject(message.dateValue, options);
                                if (options.oneofs)
                                    object.type = "dateValue";
                            }
                            if (message.dayOfWeekValue != null && message.hasOwnProperty("dayOfWeekValue")) {
                                object.dayOfWeekValue = options.enums === String ? $root.google.type.DayOfWeek[message.dayOfWeekValue] : message.dayOfWeekValue;
                                if (options.oneofs)
                                    object.type = "dayOfWeekValue";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Value to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Value
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Value.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Value;
                    })();
    
                    v2.QuoteInfo = (function() {
    
                        /**
                         * Properties of a QuoteInfo.
                         * @memberof google.privacy.dlp.v2
                         * @interface IQuoteInfo
                         * @property {google.privacy.dlp.v2.IDateTime|null} [dateTime] QuoteInfo dateTime
                         */
    
                        /**
                         * Constructs a new QuoteInfo.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a QuoteInfo.
                         * @implements IQuoteInfo
                         * @constructor
                         * @param {google.privacy.dlp.v2.IQuoteInfo=} [properties] Properties to set
                         */
                        function QuoteInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QuoteInfo dateTime.
                         * @member {google.privacy.dlp.v2.IDateTime|null|undefined} dateTime
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @instance
                         */
                        QuoteInfo.prototype.dateTime = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * QuoteInfo parsedQuote.
                         * @member {"dateTime"|undefined} parsedQuote
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @instance
                         */
                        Object.defineProperty(QuoteInfo.prototype, "parsedQuote", {
                            get: $util.oneOfGetter($oneOfFields = ["dateTime"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new QuoteInfo instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {google.privacy.dlp.v2.IQuoteInfo=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.QuoteInfo} QuoteInfo instance
                         */
                        QuoteInfo.create = function create(properties) {
                            return new QuoteInfo(properties);
                        };
    
                        /**
                         * Encodes the specified QuoteInfo message. Does not implicitly {@link google.privacy.dlp.v2.QuoteInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {google.privacy.dlp.v2.IQuoteInfo} message QuoteInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuoteInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.dateTime != null && Object.hasOwnProperty.call(message, "dateTime"))
                                $root.google.privacy.dlp.v2.DateTime.encode(message.dateTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QuoteInfo message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.QuoteInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {google.privacy.dlp.v2.IQuoteInfo} message QuoteInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuoteInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QuoteInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.QuoteInfo} QuoteInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuoteInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.QuoteInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.dateTime = $root.google.privacy.dlp.v2.DateTime.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QuoteInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.QuoteInfo} QuoteInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuoteInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QuoteInfo message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QuoteInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.dateTime != null && message.hasOwnProperty("dateTime")) {
                                properties.parsedQuote = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.DateTime.verify(message.dateTime);
                                    if (error)
                                        return "dateTime." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QuoteInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.QuoteInfo} QuoteInfo
                         */
                        QuoteInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.QuoteInfo)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.QuoteInfo();
                            if (object.dateTime != null) {
                                if (typeof object.dateTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.QuoteInfo.dateTime: object expected");
                                message.dateTime = $root.google.privacy.dlp.v2.DateTime.fromObject(object.dateTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QuoteInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @static
                         * @param {google.privacy.dlp.v2.QuoteInfo} message QuoteInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QuoteInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.dateTime != null && message.hasOwnProperty("dateTime")) {
                                object.dateTime = $root.google.privacy.dlp.v2.DateTime.toObject(message.dateTime, options);
                                if (options.oneofs)
                                    object.parsedQuote = "dateTime";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this QuoteInfo to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.QuoteInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QuoteInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QuoteInfo;
                    })();
    
                    v2.DateTime = (function() {
    
                        /**
                         * Properties of a DateTime.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDateTime
                         * @property {google.type.IDate|null} [date] DateTime date
                         * @property {google.type.DayOfWeek|null} [dayOfWeek] DateTime dayOfWeek
                         * @property {google.type.ITimeOfDay|null} [time] DateTime time
                         * @property {google.privacy.dlp.v2.DateTime.ITimeZone|null} [timeZone] DateTime timeZone
                         */
    
                        /**
                         * Constructs a new DateTime.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DateTime.
                         * @implements IDateTime
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDateTime=} [properties] Properties to set
                         */
                        function DateTime(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DateTime date.
                         * @member {google.type.IDate|null|undefined} date
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @instance
                         */
                        DateTime.prototype.date = null;
    
                        /**
                         * DateTime dayOfWeek.
                         * @member {google.type.DayOfWeek} dayOfWeek
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @instance
                         */
                        DateTime.prototype.dayOfWeek = 0;
    
                        /**
                         * DateTime time.
                         * @member {google.type.ITimeOfDay|null|undefined} time
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @instance
                         */
                        DateTime.prototype.time = null;
    
                        /**
                         * DateTime timeZone.
                         * @member {google.privacy.dlp.v2.DateTime.ITimeZone|null|undefined} timeZone
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @instance
                         */
                        DateTime.prototype.timeZone = null;
    
                        /**
                         * Creates a new DateTime instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {google.privacy.dlp.v2.IDateTime=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DateTime} DateTime instance
                         */
                        DateTime.create = function create(properties) {
                            return new DateTime(properties);
                        };
    
                        /**
                         * Encodes the specified DateTime message. Does not implicitly {@link google.privacy.dlp.v2.DateTime.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {google.privacy.dlp.v2.IDateTime} message DateTime message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DateTime.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.date != null && Object.hasOwnProperty.call(message, "date"))
                                $root.google.type.Date.encode(message.date, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.dayOfWeek != null && Object.hasOwnProperty.call(message, "dayOfWeek"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dayOfWeek);
                            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                                $root.google.type.TimeOfDay.encode(message.time, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.timeZone != null && Object.hasOwnProperty.call(message, "timeZone"))
                                $root.google.privacy.dlp.v2.DateTime.TimeZone.encode(message.timeZone, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DateTime message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DateTime.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {google.privacy.dlp.v2.IDateTime} message DateTime message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DateTime.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DateTime message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DateTime} DateTime
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DateTime.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DateTime();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.date = $root.google.type.Date.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.dayOfWeek = reader.int32();
                                    break;
                                case 3:
                                    message.time = $root.google.type.TimeOfDay.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.timeZone = $root.google.privacy.dlp.v2.DateTime.TimeZone.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DateTime message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DateTime} DateTime
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DateTime.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DateTime message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DateTime.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.date != null && message.hasOwnProperty("date")) {
                                var error = $root.google.type.Date.verify(message.date);
                                if (error)
                                    return "date." + error;
                            }
                            if (message.dayOfWeek != null && message.hasOwnProperty("dayOfWeek"))
                                switch (message.dayOfWeek) {
                                default:
                                    return "dayOfWeek: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    break;
                                }
                            if (message.time != null && message.hasOwnProperty("time")) {
                                var error = $root.google.type.TimeOfDay.verify(message.time);
                                if (error)
                                    return "time." + error;
                            }
                            if (message.timeZone != null && message.hasOwnProperty("timeZone")) {
                                var error = $root.google.privacy.dlp.v2.DateTime.TimeZone.verify(message.timeZone);
                                if (error)
                                    return "timeZone." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DateTime message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DateTime} DateTime
                         */
                        DateTime.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DateTime)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DateTime();
                            if (object.date != null) {
                                if (typeof object.date !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DateTime.date: object expected");
                                message.date = $root.google.type.Date.fromObject(object.date);
                            }
                            switch (object.dayOfWeek) {
                            case "DAY_OF_WEEK_UNSPECIFIED":
                            case 0:
                                message.dayOfWeek = 0;
                                break;
                            case "MONDAY":
                            case 1:
                                message.dayOfWeek = 1;
                                break;
                            case "TUESDAY":
                            case 2:
                                message.dayOfWeek = 2;
                                break;
                            case "WEDNESDAY":
                            case 3:
                                message.dayOfWeek = 3;
                                break;
                            case "THURSDAY":
                            case 4:
                                message.dayOfWeek = 4;
                                break;
                            case "FRIDAY":
                            case 5:
                                message.dayOfWeek = 5;
                                break;
                            case "SATURDAY":
                            case 6:
                                message.dayOfWeek = 6;
                                break;
                            case "SUNDAY":
                            case 7:
                                message.dayOfWeek = 7;
                                break;
                            }
                            if (object.time != null) {
                                if (typeof object.time !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DateTime.time: object expected");
                                message.time = $root.google.type.TimeOfDay.fromObject(object.time);
                            }
                            if (object.timeZone != null) {
                                if (typeof object.timeZone !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DateTime.timeZone: object expected");
                                message.timeZone = $root.google.privacy.dlp.v2.DateTime.TimeZone.fromObject(object.timeZone);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DateTime message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @static
                         * @param {google.privacy.dlp.v2.DateTime} message DateTime
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DateTime.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.date = null;
                                object.dayOfWeek = options.enums === String ? "DAY_OF_WEEK_UNSPECIFIED" : 0;
                                object.time = null;
                                object.timeZone = null;
                            }
                            if (message.date != null && message.hasOwnProperty("date"))
                                object.date = $root.google.type.Date.toObject(message.date, options);
                            if (message.dayOfWeek != null && message.hasOwnProperty("dayOfWeek"))
                                object.dayOfWeek = options.enums === String ? $root.google.type.DayOfWeek[message.dayOfWeek] : message.dayOfWeek;
                            if (message.time != null && message.hasOwnProperty("time"))
                                object.time = $root.google.type.TimeOfDay.toObject(message.time, options);
                            if (message.timeZone != null && message.hasOwnProperty("timeZone"))
                                object.timeZone = $root.google.privacy.dlp.v2.DateTime.TimeZone.toObject(message.timeZone, options);
                            return object;
                        };
    
                        /**
                         * Converts this DateTime to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DateTime
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DateTime.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        DateTime.TimeZone = (function() {
    
                            /**
                             * Properties of a TimeZone.
                             * @memberof google.privacy.dlp.v2.DateTime
                             * @interface ITimeZone
                             * @property {number|null} [offsetMinutes] TimeZone offsetMinutes
                             */
    
                            /**
                             * Constructs a new TimeZone.
                             * @memberof google.privacy.dlp.v2.DateTime
                             * @classdesc Represents a TimeZone.
                             * @implements ITimeZone
                             * @constructor
                             * @param {google.privacy.dlp.v2.DateTime.ITimeZone=} [properties] Properties to set
                             */
                            function TimeZone(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TimeZone offsetMinutes.
                             * @member {number} offsetMinutes
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @instance
                             */
                            TimeZone.prototype.offsetMinutes = 0;
    
                            /**
                             * Creates a new TimeZone instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {google.privacy.dlp.v2.DateTime.ITimeZone=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.DateTime.TimeZone} TimeZone instance
                             */
                            TimeZone.create = function create(properties) {
                                return new TimeZone(properties);
                            };
    
                            /**
                             * Encodes the specified TimeZone message. Does not implicitly {@link google.privacy.dlp.v2.DateTime.TimeZone.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {google.privacy.dlp.v2.DateTime.ITimeZone} message TimeZone message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TimeZone.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.offsetMinutes != null && Object.hasOwnProperty.call(message, "offsetMinutes"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.offsetMinutes);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TimeZone message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DateTime.TimeZone.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {google.privacy.dlp.v2.DateTime.ITimeZone} message TimeZone message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TimeZone.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TimeZone message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.DateTime.TimeZone} TimeZone
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TimeZone.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DateTime.TimeZone();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.offsetMinutes = reader.int32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TimeZone message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.DateTime.TimeZone} TimeZone
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TimeZone.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TimeZone message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TimeZone.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.offsetMinutes != null && message.hasOwnProperty("offsetMinutes"))
                                    if (!$util.isInteger(message.offsetMinutes))
                                        return "offsetMinutes: integer expected";
                                return null;
                            };
    
                            /**
                             * Creates a TimeZone message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.DateTime.TimeZone} TimeZone
                             */
                            TimeZone.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.DateTime.TimeZone)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.DateTime.TimeZone();
                                if (object.offsetMinutes != null)
                                    message.offsetMinutes = object.offsetMinutes | 0;
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TimeZone message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @static
                             * @param {google.privacy.dlp.v2.DateTime.TimeZone} message TimeZone
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TimeZone.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.offsetMinutes = 0;
                                if (message.offsetMinutes != null && message.hasOwnProperty("offsetMinutes"))
                                    object.offsetMinutes = message.offsetMinutes;
                                return object;
                            };
    
                            /**
                             * Converts this TimeZone to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.DateTime.TimeZone
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TimeZone.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return TimeZone;
                        })();
    
                        return DateTime;
                    })();
    
                    v2.DeidentifyConfig = (function() {
    
                        /**
                         * Properties of a DeidentifyConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeidentifyConfig
                         * @property {google.privacy.dlp.v2.IInfoTypeTransformations|null} [infoTypeTransformations] DeidentifyConfig infoTypeTransformations
                         * @property {google.privacy.dlp.v2.IRecordTransformations|null} [recordTransformations] DeidentifyConfig recordTransformations
                         * @property {google.privacy.dlp.v2.ITransformationErrorHandling|null} [transformationErrorHandling] DeidentifyConfig transformationErrorHandling
                         */
    
                        /**
                         * Constructs a new DeidentifyConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeidentifyConfig.
                         * @implements IDeidentifyConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeidentifyConfig=} [properties] Properties to set
                         */
                        function DeidentifyConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeidentifyConfig infoTypeTransformations.
                         * @member {google.privacy.dlp.v2.IInfoTypeTransformations|null|undefined} infoTypeTransformations
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @instance
                         */
                        DeidentifyConfig.prototype.infoTypeTransformations = null;
    
                        /**
                         * DeidentifyConfig recordTransformations.
                         * @member {google.privacy.dlp.v2.IRecordTransformations|null|undefined} recordTransformations
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @instance
                         */
                        DeidentifyConfig.prototype.recordTransformations = null;
    
                        /**
                         * DeidentifyConfig transformationErrorHandling.
                         * @member {google.privacy.dlp.v2.ITransformationErrorHandling|null|undefined} transformationErrorHandling
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @instance
                         */
                        DeidentifyConfig.prototype.transformationErrorHandling = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * DeidentifyConfig transformation.
                         * @member {"infoTypeTransformations"|"recordTransformations"|undefined} transformation
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @instance
                         */
                        Object.defineProperty(DeidentifyConfig.prototype, "transformation", {
                            get: $util.oneOfGetter($oneOfFields = ["infoTypeTransformations", "recordTransformations"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new DeidentifyConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeidentifyConfig} DeidentifyConfig instance
                         */
                        DeidentifyConfig.create = function create(properties) {
                            return new DeidentifyConfig(properties);
                        };
    
                        /**
                         * Encodes the specified DeidentifyConfig message. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyConfig} message DeidentifyConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoTypeTransformations != null && Object.hasOwnProperty.call(message, "infoTypeTransformations"))
                                $root.google.privacy.dlp.v2.InfoTypeTransformations.encode(message.infoTypeTransformations, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.recordTransformations != null && Object.hasOwnProperty.call(message, "recordTransformations"))
                                $root.google.privacy.dlp.v2.RecordTransformations.encode(message.recordTransformations, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.transformationErrorHandling != null && Object.hasOwnProperty.call(message, "transformationErrorHandling"))
                                $root.google.privacy.dlp.v2.TransformationErrorHandling.encode(message.transformationErrorHandling, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeidentifyConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyConfig} message DeidentifyConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeidentifyConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeidentifyConfig} DeidentifyConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeidentifyConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.infoTypeTransformations = $root.google.privacy.dlp.v2.InfoTypeTransformations.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.recordTransformations = $root.google.privacy.dlp.v2.RecordTransformations.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.transformationErrorHandling = $root.google.privacy.dlp.v2.TransformationErrorHandling.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeidentifyConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeidentifyConfig} DeidentifyConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeidentifyConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeidentifyConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.infoTypeTransformations != null && message.hasOwnProperty("infoTypeTransformations")) {
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.InfoTypeTransformations.verify(message.infoTypeTransformations);
                                    if (error)
                                        return "infoTypeTransformations." + error;
                                }
                            }
                            if (message.recordTransformations != null && message.hasOwnProperty("recordTransformations")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.RecordTransformations.verify(message.recordTransformations);
                                    if (error)
                                        return "recordTransformations." + error;
                                }
                            }
                            if (message.transformationErrorHandling != null && message.hasOwnProperty("transformationErrorHandling")) {
                                var error = $root.google.privacy.dlp.v2.TransformationErrorHandling.verify(message.transformationErrorHandling);
                                if (error)
                                    return "transformationErrorHandling." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DeidentifyConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeidentifyConfig} DeidentifyConfig
                         */
                        DeidentifyConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeidentifyConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeidentifyConfig();
                            if (object.infoTypeTransformations != null) {
                                if (typeof object.infoTypeTransformations !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyConfig.infoTypeTransformations: object expected");
                                message.infoTypeTransformations = $root.google.privacy.dlp.v2.InfoTypeTransformations.fromObject(object.infoTypeTransformations);
                            }
                            if (object.recordTransformations != null) {
                                if (typeof object.recordTransformations !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyConfig.recordTransformations: object expected");
                                message.recordTransformations = $root.google.privacy.dlp.v2.RecordTransformations.fromObject(object.recordTransformations);
                            }
                            if (object.transformationErrorHandling != null) {
                                if (typeof object.transformationErrorHandling !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyConfig.transformationErrorHandling: object expected");
                                message.transformationErrorHandling = $root.google.privacy.dlp.v2.TransformationErrorHandling.fromObject(object.transformationErrorHandling);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeidentifyConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @static
                         * @param {google.privacy.dlp.v2.DeidentifyConfig} message DeidentifyConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeidentifyConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.transformationErrorHandling = null;
                            if (message.infoTypeTransformations != null && message.hasOwnProperty("infoTypeTransformations")) {
                                object.infoTypeTransformations = $root.google.privacy.dlp.v2.InfoTypeTransformations.toObject(message.infoTypeTransformations, options);
                                if (options.oneofs)
                                    object.transformation = "infoTypeTransformations";
                            }
                            if (message.recordTransformations != null && message.hasOwnProperty("recordTransformations")) {
                                object.recordTransformations = $root.google.privacy.dlp.v2.RecordTransformations.toObject(message.recordTransformations, options);
                                if (options.oneofs)
                                    object.transformation = "recordTransformations";
                            }
                            if (message.transformationErrorHandling != null && message.hasOwnProperty("transformationErrorHandling"))
                                object.transformationErrorHandling = $root.google.privacy.dlp.v2.TransformationErrorHandling.toObject(message.transformationErrorHandling, options);
                            return object;
                        };
    
                        /**
                         * Converts this DeidentifyConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeidentifyConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeidentifyConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeidentifyConfig;
                    })();
    
                    v2.TransformationErrorHandling = (function() {
    
                        /**
                         * Properties of a TransformationErrorHandling.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITransformationErrorHandling
                         * @property {google.privacy.dlp.v2.TransformationErrorHandling.IThrowError|null} [throwError] TransformationErrorHandling throwError
                         * @property {google.privacy.dlp.v2.TransformationErrorHandling.ILeaveUntransformed|null} [leaveUntransformed] TransformationErrorHandling leaveUntransformed
                         */
    
                        /**
                         * Constructs a new TransformationErrorHandling.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TransformationErrorHandling.
                         * @implements ITransformationErrorHandling
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITransformationErrorHandling=} [properties] Properties to set
                         */
                        function TransformationErrorHandling(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransformationErrorHandling throwError.
                         * @member {google.privacy.dlp.v2.TransformationErrorHandling.IThrowError|null|undefined} throwError
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @instance
                         */
                        TransformationErrorHandling.prototype.throwError = null;
    
                        /**
                         * TransformationErrorHandling leaveUntransformed.
                         * @member {google.privacy.dlp.v2.TransformationErrorHandling.ILeaveUntransformed|null|undefined} leaveUntransformed
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @instance
                         */
                        TransformationErrorHandling.prototype.leaveUntransformed = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * TransformationErrorHandling mode.
                         * @member {"throwError"|"leaveUntransformed"|undefined} mode
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @instance
                         */
                        Object.defineProperty(TransformationErrorHandling.prototype, "mode", {
                            get: $util.oneOfGetter($oneOfFields = ["throwError", "leaveUntransformed"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new TransformationErrorHandling instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationErrorHandling=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TransformationErrorHandling} TransformationErrorHandling instance
                         */
                        TransformationErrorHandling.create = function create(properties) {
                            return new TransformationErrorHandling(properties);
                        };
    
                        /**
                         * Encodes the specified TransformationErrorHandling message. Does not implicitly {@link google.privacy.dlp.v2.TransformationErrorHandling.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationErrorHandling} message TransformationErrorHandling message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransformationErrorHandling.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.throwError != null && Object.hasOwnProperty.call(message, "throwError"))
                                $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.encode(message.throwError, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.leaveUntransformed != null && Object.hasOwnProperty.call(message, "leaveUntransformed"))
                                $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.encode(message.leaveUntransformed, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransformationErrorHandling message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransformationErrorHandling.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationErrorHandling} message TransformationErrorHandling message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransformationErrorHandling.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransformationErrorHandling message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TransformationErrorHandling} TransformationErrorHandling
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransformationErrorHandling.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransformationErrorHandling();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.throwError = $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.leaveUntransformed = $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransformationErrorHandling message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TransformationErrorHandling} TransformationErrorHandling
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransformationErrorHandling.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransformationErrorHandling message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransformationErrorHandling.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.throwError != null && message.hasOwnProperty("throwError")) {
                                properties.mode = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.verify(message.throwError);
                                    if (error)
                                        return "throwError." + error;
                                }
                            }
                            if (message.leaveUntransformed != null && message.hasOwnProperty("leaveUntransformed")) {
                                if (properties.mode === 1)
                                    return "mode: multiple values";
                                properties.mode = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.verify(message.leaveUntransformed);
                                    if (error)
                                        return "leaveUntransformed." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TransformationErrorHandling message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TransformationErrorHandling} TransformationErrorHandling
                         */
                        TransformationErrorHandling.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TransformationErrorHandling)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TransformationErrorHandling();
                            if (object.throwError != null) {
                                if (typeof object.throwError !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.TransformationErrorHandling.throwError: object expected");
                                message.throwError = $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.fromObject(object.throwError);
                            }
                            if (object.leaveUntransformed != null) {
                                if (typeof object.leaveUntransformed !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.TransformationErrorHandling.leaveUntransformed: object expected");
                                message.leaveUntransformed = $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.fromObject(object.leaveUntransformed);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransformationErrorHandling message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @static
                         * @param {google.privacy.dlp.v2.TransformationErrorHandling} message TransformationErrorHandling
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransformationErrorHandling.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.throwError != null && message.hasOwnProperty("throwError")) {
                                object.throwError = $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.toObject(message.throwError, options);
                                if (options.oneofs)
                                    object.mode = "throwError";
                            }
                            if (message.leaveUntransformed != null && message.hasOwnProperty("leaveUntransformed")) {
                                object.leaveUntransformed = $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.toObject(message.leaveUntransformed, options);
                                if (options.oneofs)
                                    object.mode = "leaveUntransformed";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TransformationErrorHandling to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransformationErrorHandling.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        TransformationErrorHandling.ThrowError = (function() {
    
                            /**
                             * Properties of a ThrowError.
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                             * @interface IThrowError
                             */
    
                            /**
                             * Constructs a new ThrowError.
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                             * @classdesc Represents a ThrowError.
                             * @implements IThrowError
                             * @constructor
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.IThrowError=} [properties] Properties to set
                             */
                            function ThrowError(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new ThrowError instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.IThrowError=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.ThrowError} ThrowError instance
                             */
                            ThrowError.create = function create(properties) {
                                return new ThrowError(properties);
                            };
    
                            /**
                             * Encodes the specified ThrowError message. Does not implicitly {@link google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.IThrowError} message ThrowError message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ThrowError.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ThrowError message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.IThrowError} message ThrowError message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ThrowError.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ThrowError message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.ThrowError} ThrowError
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ThrowError.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ThrowError message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.ThrowError} ThrowError
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ThrowError.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ThrowError message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ThrowError.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a ThrowError message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.ThrowError} ThrowError
                             */
                            ThrowError.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
                                    return object;
                                return new $root.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError();
                            };
    
                            /**
                             * Creates a plain object from a ThrowError message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.ThrowError} message ThrowError
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ThrowError.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this ThrowError to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ThrowError.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ThrowError;
                        })();
    
                        TransformationErrorHandling.LeaveUntransformed = (function() {
    
                            /**
                             * Properties of a LeaveUntransformed.
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                             * @interface ILeaveUntransformed
                             */
    
                            /**
                             * Constructs a new LeaveUntransformed.
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling
                             * @classdesc Represents a LeaveUntransformed.
                             * @implements ILeaveUntransformed
                             * @constructor
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.ILeaveUntransformed=} [properties] Properties to set
                             */
                            function LeaveUntransformed(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new LeaveUntransformed instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.ILeaveUntransformed=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed} LeaveUntransformed instance
                             */
                            LeaveUntransformed.create = function create(properties) {
                                return new LeaveUntransformed(properties);
                            };
    
                            /**
                             * Encodes the specified LeaveUntransformed message. Does not implicitly {@link google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.ILeaveUntransformed} message LeaveUntransformed message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LeaveUntransformed.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LeaveUntransformed message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.ILeaveUntransformed} message LeaveUntransformed message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LeaveUntransformed.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LeaveUntransformed message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed} LeaveUntransformed
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LeaveUntransformed.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LeaveUntransformed message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed} LeaveUntransformed
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LeaveUntransformed.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LeaveUntransformed message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LeaveUntransformed.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a LeaveUntransformed message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed} LeaveUntransformed
                             */
                            LeaveUntransformed.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
                                    return object;
                                return new $root.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed();
                            };
    
                            /**
                             * Creates a plain object from a LeaveUntransformed message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed} message LeaveUntransformed
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LeaveUntransformed.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this LeaveUntransformed to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LeaveUntransformed.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return LeaveUntransformed;
                        })();
    
                        return TransformationErrorHandling;
                    })();
    
                    v2.PrimitiveTransformation = (function() {
    
                        /**
                         * Properties of a PrimitiveTransformation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IPrimitiveTransformation
                         * @property {google.privacy.dlp.v2.IReplaceValueConfig|null} [replaceConfig] PrimitiveTransformation replaceConfig
                         * @property {google.privacy.dlp.v2.IRedactConfig|null} [redactConfig] PrimitiveTransformation redactConfig
                         * @property {google.privacy.dlp.v2.ICharacterMaskConfig|null} [characterMaskConfig] PrimitiveTransformation characterMaskConfig
                         * @property {google.privacy.dlp.v2.ICryptoReplaceFfxFpeConfig|null} [cryptoReplaceFfxFpeConfig] PrimitiveTransformation cryptoReplaceFfxFpeConfig
                         * @property {google.privacy.dlp.v2.IFixedSizeBucketingConfig|null} [fixedSizeBucketingConfig] PrimitiveTransformation fixedSizeBucketingConfig
                         * @property {google.privacy.dlp.v2.IBucketingConfig|null} [bucketingConfig] PrimitiveTransformation bucketingConfig
                         * @property {google.privacy.dlp.v2.IReplaceWithInfoTypeConfig|null} [replaceWithInfoTypeConfig] PrimitiveTransformation replaceWithInfoTypeConfig
                         * @property {google.privacy.dlp.v2.ITimePartConfig|null} [timePartConfig] PrimitiveTransformation timePartConfig
                         * @property {google.privacy.dlp.v2.ICryptoHashConfig|null} [cryptoHashConfig] PrimitiveTransformation cryptoHashConfig
                         * @property {google.privacy.dlp.v2.IDateShiftConfig|null} [dateShiftConfig] PrimitiveTransformation dateShiftConfig
                         * @property {google.privacy.dlp.v2.ICryptoDeterministicConfig|null} [cryptoDeterministicConfig] PrimitiveTransformation cryptoDeterministicConfig
                         */
    
                        /**
                         * Constructs a new PrimitiveTransformation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a PrimitiveTransformation.
                         * @implements IPrimitiveTransformation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IPrimitiveTransformation=} [properties] Properties to set
                         */
                        function PrimitiveTransformation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PrimitiveTransformation replaceConfig.
                         * @member {google.privacy.dlp.v2.IReplaceValueConfig|null|undefined} replaceConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.replaceConfig = null;
    
                        /**
                         * PrimitiveTransformation redactConfig.
                         * @member {google.privacy.dlp.v2.IRedactConfig|null|undefined} redactConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.redactConfig = null;
    
                        /**
                         * PrimitiveTransformation characterMaskConfig.
                         * @member {google.privacy.dlp.v2.ICharacterMaskConfig|null|undefined} characterMaskConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.characterMaskConfig = null;
    
                        /**
                         * PrimitiveTransformation cryptoReplaceFfxFpeConfig.
                         * @member {google.privacy.dlp.v2.ICryptoReplaceFfxFpeConfig|null|undefined} cryptoReplaceFfxFpeConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.cryptoReplaceFfxFpeConfig = null;
    
                        /**
                         * PrimitiveTransformation fixedSizeBucketingConfig.
                         * @member {google.privacy.dlp.v2.IFixedSizeBucketingConfig|null|undefined} fixedSizeBucketingConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.fixedSizeBucketingConfig = null;
    
                        /**
                         * PrimitiveTransformation bucketingConfig.
                         * @member {google.privacy.dlp.v2.IBucketingConfig|null|undefined} bucketingConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.bucketingConfig = null;
    
                        /**
                         * PrimitiveTransformation replaceWithInfoTypeConfig.
                         * @member {google.privacy.dlp.v2.IReplaceWithInfoTypeConfig|null|undefined} replaceWithInfoTypeConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.replaceWithInfoTypeConfig = null;
    
                        /**
                         * PrimitiveTransformation timePartConfig.
                         * @member {google.privacy.dlp.v2.ITimePartConfig|null|undefined} timePartConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.timePartConfig = null;
    
                        /**
                         * PrimitiveTransformation cryptoHashConfig.
                         * @member {google.privacy.dlp.v2.ICryptoHashConfig|null|undefined} cryptoHashConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.cryptoHashConfig = null;
    
                        /**
                         * PrimitiveTransformation dateShiftConfig.
                         * @member {google.privacy.dlp.v2.IDateShiftConfig|null|undefined} dateShiftConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.dateShiftConfig = null;
    
                        /**
                         * PrimitiveTransformation cryptoDeterministicConfig.
                         * @member {google.privacy.dlp.v2.ICryptoDeterministicConfig|null|undefined} cryptoDeterministicConfig
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        PrimitiveTransformation.prototype.cryptoDeterministicConfig = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * PrimitiveTransformation transformation.
                         * @member {"replaceConfig"|"redactConfig"|"characterMaskConfig"|"cryptoReplaceFfxFpeConfig"|"fixedSizeBucketingConfig"|"bucketingConfig"|"replaceWithInfoTypeConfig"|"timePartConfig"|"cryptoHashConfig"|"dateShiftConfig"|"cryptoDeterministicConfig"|undefined} transformation
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         */
                        Object.defineProperty(PrimitiveTransformation.prototype, "transformation", {
                            get: $util.oneOfGetter($oneOfFields = ["replaceConfig", "redactConfig", "characterMaskConfig", "cryptoReplaceFfxFpeConfig", "fixedSizeBucketingConfig", "bucketingConfig", "replaceWithInfoTypeConfig", "timePartConfig", "cryptoHashConfig", "dateShiftConfig", "cryptoDeterministicConfig"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new PrimitiveTransformation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.IPrimitiveTransformation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.PrimitiveTransformation} PrimitiveTransformation instance
                         */
                        PrimitiveTransformation.create = function create(properties) {
                            return new PrimitiveTransformation(properties);
                        };
    
                        /**
                         * Encodes the specified PrimitiveTransformation message. Does not implicitly {@link google.privacy.dlp.v2.PrimitiveTransformation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.IPrimitiveTransformation} message PrimitiveTransformation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PrimitiveTransformation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.replaceConfig != null && Object.hasOwnProperty.call(message, "replaceConfig"))
                                $root.google.privacy.dlp.v2.ReplaceValueConfig.encode(message.replaceConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.redactConfig != null && Object.hasOwnProperty.call(message, "redactConfig"))
                                $root.google.privacy.dlp.v2.RedactConfig.encode(message.redactConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.characterMaskConfig != null && Object.hasOwnProperty.call(message, "characterMaskConfig"))
                                $root.google.privacy.dlp.v2.CharacterMaskConfig.encode(message.characterMaskConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.cryptoReplaceFfxFpeConfig != null && Object.hasOwnProperty.call(message, "cryptoReplaceFfxFpeConfig"))
                                $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.encode(message.cryptoReplaceFfxFpeConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.fixedSizeBucketingConfig != null && Object.hasOwnProperty.call(message, "fixedSizeBucketingConfig"))
                                $root.google.privacy.dlp.v2.FixedSizeBucketingConfig.encode(message.fixedSizeBucketingConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.bucketingConfig != null && Object.hasOwnProperty.call(message, "bucketingConfig"))
                                $root.google.privacy.dlp.v2.BucketingConfig.encode(message.bucketingConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.replaceWithInfoTypeConfig != null && Object.hasOwnProperty.call(message, "replaceWithInfoTypeConfig"))
                                $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.encode(message.replaceWithInfoTypeConfig, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.timePartConfig != null && Object.hasOwnProperty.call(message, "timePartConfig"))
                                $root.google.privacy.dlp.v2.TimePartConfig.encode(message.timePartConfig, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.cryptoHashConfig != null && Object.hasOwnProperty.call(message, "cryptoHashConfig"))
                                $root.google.privacy.dlp.v2.CryptoHashConfig.encode(message.cryptoHashConfig, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.dateShiftConfig != null && Object.hasOwnProperty.call(message, "dateShiftConfig"))
                                $root.google.privacy.dlp.v2.DateShiftConfig.encode(message.dateShiftConfig, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.cryptoDeterministicConfig != null && Object.hasOwnProperty.call(message, "cryptoDeterministicConfig"))
                                $root.google.privacy.dlp.v2.CryptoDeterministicConfig.encode(message.cryptoDeterministicConfig, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PrimitiveTransformation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PrimitiveTransformation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.IPrimitiveTransformation} message PrimitiveTransformation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PrimitiveTransformation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PrimitiveTransformation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.PrimitiveTransformation} PrimitiveTransformation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PrimitiveTransformation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PrimitiveTransformation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.replaceConfig = $root.google.privacy.dlp.v2.ReplaceValueConfig.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.redactConfig = $root.google.privacy.dlp.v2.RedactConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.characterMaskConfig = $root.google.privacy.dlp.v2.CharacterMaskConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.cryptoReplaceFfxFpeConfig = $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.fixedSizeBucketingConfig = $root.google.privacy.dlp.v2.FixedSizeBucketingConfig.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.bucketingConfig = $root.google.privacy.dlp.v2.BucketingConfig.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.replaceWithInfoTypeConfig = $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.timePartConfig = $root.google.privacy.dlp.v2.TimePartConfig.decode(reader, reader.uint32());
                                    break;
                                case 9:
                                    message.cryptoHashConfig = $root.google.privacy.dlp.v2.CryptoHashConfig.decode(reader, reader.uint32());
                                    break;
                                case 11:
                                    message.dateShiftConfig = $root.google.privacy.dlp.v2.DateShiftConfig.decode(reader, reader.uint32());
                                    break;
                                case 12:
                                    message.cryptoDeterministicConfig = $root.google.privacy.dlp.v2.CryptoDeterministicConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PrimitiveTransformation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.PrimitiveTransformation} PrimitiveTransformation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PrimitiveTransformation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PrimitiveTransformation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PrimitiveTransformation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.replaceConfig != null && message.hasOwnProperty("replaceConfig")) {
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.ReplaceValueConfig.verify(message.replaceConfig);
                                    if (error)
                                        return "replaceConfig." + error;
                                }
                            }
                            if (message.redactConfig != null && message.hasOwnProperty("redactConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.RedactConfig.verify(message.redactConfig);
                                    if (error)
                                        return "redactConfig." + error;
                                }
                            }
                            if (message.characterMaskConfig != null && message.hasOwnProperty("characterMaskConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CharacterMaskConfig.verify(message.characterMaskConfig);
                                    if (error)
                                        return "characterMaskConfig." + error;
                                }
                            }
                            if (message.cryptoReplaceFfxFpeConfig != null && message.hasOwnProperty("cryptoReplaceFfxFpeConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.verify(message.cryptoReplaceFfxFpeConfig);
                                    if (error)
                                        return "cryptoReplaceFfxFpeConfig." + error;
                                }
                            }
                            if (message.fixedSizeBucketingConfig != null && message.hasOwnProperty("fixedSizeBucketingConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.FixedSizeBucketingConfig.verify(message.fixedSizeBucketingConfig);
                                    if (error)
                                        return "fixedSizeBucketingConfig." + error;
                                }
                            }
                            if (message.bucketingConfig != null && message.hasOwnProperty("bucketingConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.BucketingConfig.verify(message.bucketingConfig);
                                    if (error)
                                        return "bucketingConfig." + error;
                                }
                            }
                            if (message.replaceWithInfoTypeConfig != null && message.hasOwnProperty("replaceWithInfoTypeConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.verify(message.replaceWithInfoTypeConfig);
                                    if (error)
                                        return "replaceWithInfoTypeConfig." + error;
                                }
                            }
                            if (message.timePartConfig != null && message.hasOwnProperty("timePartConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.TimePartConfig.verify(message.timePartConfig);
                                    if (error)
                                        return "timePartConfig." + error;
                                }
                            }
                            if (message.cryptoHashConfig != null && message.hasOwnProperty("cryptoHashConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CryptoHashConfig.verify(message.cryptoHashConfig);
                                    if (error)
                                        return "cryptoHashConfig." + error;
                                }
                            }
                            if (message.dateShiftConfig != null && message.hasOwnProperty("dateShiftConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.DateShiftConfig.verify(message.dateShiftConfig);
                                    if (error)
                                        return "dateShiftConfig." + error;
                                }
                            }
                            if (message.cryptoDeterministicConfig != null && message.hasOwnProperty("cryptoDeterministicConfig")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CryptoDeterministicConfig.verify(message.cryptoDeterministicConfig);
                                    if (error)
                                        return "cryptoDeterministicConfig." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a PrimitiveTransformation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.PrimitiveTransformation} PrimitiveTransformation
                         */
                        PrimitiveTransformation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.PrimitiveTransformation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.PrimitiveTransformation();
                            if (object.replaceConfig != null) {
                                if (typeof object.replaceConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.replaceConfig: object expected");
                                message.replaceConfig = $root.google.privacy.dlp.v2.ReplaceValueConfig.fromObject(object.replaceConfig);
                            }
                            if (object.redactConfig != null) {
                                if (typeof object.redactConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.redactConfig: object expected");
                                message.redactConfig = $root.google.privacy.dlp.v2.RedactConfig.fromObject(object.redactConfig);
                            }
                            if (object.characterMaskConfig != null) {
                                if (typeof object.characterMaskConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.characterMaskConfig: object expected");
                                message.characterMaskConfig = $root.google.privacy.dlp.v2.CharacterMaskConfig.fromObject(object.characterMaskConfig);
                            }
                            if (object.cryptoReplaceFfxFpeConfig != null) {
                                if (typeof object.cryptoReplaceFfxFpeConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.cryptoReplaceFfxFpeConfig: object expected");
                                message.cryptoReplaceFfxFpeConfig = $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.fromObject(object.cryptoReplaceFfxFpeConfig);
                            }
                            if (object.fixedSizeBucketingConfig != null) {
                                if (typeof object.fixedSizeBucketingConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.fixedSizeBucketingConfig: object expected");
                                message.fixedSizeBucketingConfig = $root.google.privacy.dlp.v2.FixedSizeBucketingConfig.fromObject(object.fixedSizeBucketingConfig);
                            }
                            if (object.bucketingConfig != null) {
                                if (typeof object.bucketingConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.bucketingConfig: object expected");
                                message.bucketingConfig = $root.google.privacy.dlp.v2.BucketingConfig.fromObject(object.bucketingConfig);
                            }
                            if (object.replaceWithInfoTypeConfig != null) {
                                if (typeof object.replaceWithInfoTypeConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.replaceWithInfoTypeConfig: object expected");
                                message.replaceWithInfoTypeConfig = $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.fromObject(object.replaceWithInfoTypeConfig);
                            }
                            if (object.timePartConfig != null) {
                                if (typeof object.timePartConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.timePartConfig: object expected");
                                message.timePartConfig = $root.google.privacy.dlp.v2.TimePartConfig.fromObject(object.timePartConfig);
                            }
                            if (object.cryptoHashConfig != null) {
                                if (typeof object.cryptoHashConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.cryptoHashConfig: object expected");
                                message.cryptoHashConfig = $root.google.privacy.dlp.v2.CryptoHashConfig.fromObject(object.cryptoHashConfig);
                            }
                            if (object.dateShiftConfig != null) {
                                if (typeof object.dateShiftConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.dateShiftConfig: object expected");
                                message.dateShiftConfig = $root.google.privacy.dlp.v2.DateShiftConfig.fromObject(object.dateShiftConfig);
                            }
                            if (object.cryptoDeterministicConfig != null) {
                                if (typeof object.cryptoDeterministicConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.PrimitiveTransformation.cryptoDeterministicConfig: object expected");
                                message.cryptoDeterministicConfig = $root.google.privacy.dlp.v2.CryptoDeterministicConfig.fromObject(object.cryptoDeterministicConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PrimitiveTransformation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.PrimitiveTransformation} message PrimitiveTransformation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PrimitiveTransformation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.replaceConfig != null && message.hasOwnProperty("replaceConfig")) {
                                object.replaceConfig = $root.google.privacy.dlp.v2.ReplaceValueConfig.toObject(message.replaceConfig, options);
                                if (options.oneofs)
                                    object.transformation = "replaceConfig";
                            }
                            if (message.redactConfig != null && message.hasOwnProperty("redactConfig")) {
                                object.redactConfig = $root.google.privacy.dlp.v2.RedactConfig.toObject(message.redactConfig, options);
                                if (options.oneofs)
                                    object.transformation = "redactConfig";
                            }
                            if (message.characterMaskConfig != null && message.hasOwnProperty("characterMaskConfig")) {
                                object.characterMaskConfig = $root.google.privacy.dlp.v2.CharacterMaskConfig.toObject(message.characterMaskConfig, options);
                                if (options.oneofs)
                                    object.transformation = "characterMaskConfig";
                            }
                            if (message.cryptoReplaceFfxFpeConfig != null && message.hasOwnProperty("cryptoReplaceFfxFpeConfig")) {
                                object.cryptoReplaceFfxFpeConfig = $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.toObject(message.cryptoReplaceFfxFpeConfig, options);
                                if (options.oneofs)
                                    object.transformation = "cryptoReplaceFfxFpeConfig";
                            }
                            if (message.fixedSizeBucketingConfig != null && message.hasOwnProperty("fixedSizeBucketingConfig")) {
                                object.fixedSizeBucketingConfig = $root.google.privacy.dlp.v2.FixedSizeBucketingConfig.toObject(message.fixedSizeBucketingConfig, options);
                                if (options.oneofs)
                                    object.transformation = "fixedSizeBucketingConfig";
                            }
                            if (message.bucketingConfig != null && message.hasOwnProperty("bucketingConfig")) {
                                object.bucketingConfig = $root.google.privacy.dlp.v2.BucketingConfig.toObject(message.bucketingConfig, options);
                                if (options.oneofs)
                                    object.transformation = "bucketingConfig";
                            }
                            if (message.replaceWithInfoTypeConfig != null && message.hasOwnProperty("replaceWithInfoTypeConfig")) {
                                object.replaceWithInfoTypeConfig = $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.toObject(message.replaceWithInfoTypeConfig, options);
                                if (options.oneofs)
                                    object.transformation = "replaceWithInfoTypeConfig";
                            }
                            if (message.timePartConfig != null && message.hasOwnProperty("timePartConfig")) {
                                object.timePartConfig = $root.google.privacy.dlp.v2.TimePartConfig.toObject(message.timePartConfig, options);
                                if (options.oneofs)
                                    object.transformation = "timePartConfig";
                            }
                            if (message.cryptoHashConfig != null && message.hasOwnProperty("cryptoHashConfig")) {
                                object.cryptoHashConfig = $root.google.privacy.dlp.v2.CryptoHashConfig.toObject(message.cryptoHashConfig, options);
                                if (options.oneofs)
                                    object.transformation = "cryptoHashConfig";
                            }
                            if (message.dateShiftConfig != null && message.hasOwnProperty("dateShiftConfig")) {
                                object.dateShiftConfig = $root.google.privacy.dlp.v2.DateShiftConfig.toObject(message.dateShiftConfig, options);
                                if (options.oneofs)
                                    object.transformation = "dateShiftConfig";
                            }
                            if (message.cryptoDeterministicConfig != null && message.hasOwnProperty("cryptoDeterministicConfig")) {
                                object.cryptoDeterministicConfig = $root.google.privacy.dlp.v2.CryptoDeterministicConfig.toObject(message.cryptoDeterministicConfig, options);
                                if (options.oneofs)
                                    object.transformation = "cryptoDeterministicConfig";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this PrimitiveTransformation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.PrimitiveTransformation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PrimitiveTransformation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PrimitiveTransformation;
                    })();
    
                    v2.TimePartConfig = (function() {
    
                        /**
                         * Properties of a TimePartConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITimePartConfig
                         * @property {google.privacy.dlp.v2.TimePartConfig.TimePart|null} [partToExtract] TimePartConfig partToExtract
                         */
    
                        /**
                         * Constructs a new TimePartConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TimePartConfig.
                         * @implements ITimePartConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITimePartConfig=} [properties] Properties to set
                         */
                        function TimePartConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TimePartConfig partToExtract.
                         * @member {google.privacy.dlp.v2.TimePartConfig.TimePart} partToExtract
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @instance
                         */
                        TimePartConfig.prototype.partToExtract = 0;
    
                        /**
                         * Creates a new TimePartConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ITimePartConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TimePartConfig} TimePartConfig instance
                         */
                        TimePartConfig.create = function create(properties) {
                            return new TimePartConfig(properties);
                        };
    
                        /**
                         * Encodes the specified TimePartConfig message. Does not implicitly {@link google.privacy.dlp.v2.TimePartConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ITimePartConfig} message TimePartConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TimePartConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.partToExtract != null && Object.hasOwnProperty.call(message, "partToExtract"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.partToExtract);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TimePartConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TimePartConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ITimePartConfig} message TimePartConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TimePartConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TimePartConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TimePartConfig} TimePartConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TimePartConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TimePartConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.partToExtract = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TimePartConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TimePartConfig} TimePartConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TimePartConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TimePartConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TimePartConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.partToExtract != null && message.hasOwnProperty("partToExtract"))
                                switch (message.partToExtract) {
                                default:
                                    return "partToExtract: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a TimePartConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TimePartConfig} TimePartConfig
                         */
                        TimePartConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TimePartConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TimePartConfig();
                            switch (object.partToExtract) {
                            case "TIME_PART_UNSPECIFIED":
                            case 0:
                                message.partToExtract = 0;
                                break;
                            case "YEAR":
                            case 1:
                                message.partToExtract = 1;
                                break;
                            case "MONTH":
                            case 2:
                                message.partToExtract = 2;
                                break;
                            case "DAY_OF_MONTH":
                            case 3:
                                message.partToExtract = 3;
                                break;
                            case "DAY_OF_WEEK":
                            case 4:
                                message.partToExtract = 4;
                                break;
                            case "WEEK_OF_YEAR":
                            case 5:
                                message.partToExtract = 5;
                                break;
                            case "HOUR_OF_DAY":
                            case 6:
                                message.partToExtract = 6;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TimePartConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @static
                         * @param {google.privacy.dlp.v2.TimePartConfig} message TimePartConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TimePartConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.partToExtract = options.enums === String ? "TIME_PART_UNSPECIFIED" : 0;
                            if (message.partToExtract != null && message.hasOwnProperty("partToExtract"))
                                object.partToExtract = options.enums === String ? $root.google.privacy.dlp.v2.TimePartConfig.TimePart[message.partToExtract] : message.partToExtract;
                            return object;
                        };
    
                        /**
                         * Converts this TimePartConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TimePartConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TimePartConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * TimePart enum.
                         * @name google.privacy.dlp.v2.TimePartConfig.TimePart
                         * @enum {number}
                         * @property {number} TIME_PART_UNSPECIFIED=0 TIME_PART_UNSPECIFIED value
                         * @property {number} YEAR=1 YEAR value
                         * @property {number} MONTH=2 MONTH value
                         * @property {number} DAY_OF_MONTH=3 DAY_OF_MONTH value
                         * @property {number} DAY_OF_WEEK=4 DAY_OF_WEEK value
                         * @property {number} WEEK_OF_YEAR=5 WEEK_OF_YEAR value
                         * @property {number} HOUR_OF_DAY=6 HOUR_OF_DAY value
                         */
                        TimePartConfig.TimePart = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TIME_PART_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "YEAR"] = 1;
                            values[valuesById[2] = "MONTH"] = 2;
                            values[valuesById[3] = "DAY_OF_MONTH"] = 3;
                            values[valuesById[4] = "DAY_OF_WEEK"] = 4;
                            values[valuesById[5] = "WEEK_OF_YEAR"] = 5;
                            values[valuesById[6] = "HOUR_OF_DAY"] = 6;
                            return values;
                        })();
    
                        return TimePartConfig;
                    })();
    
                    v2.CryptoHashConfig = (function() {
    
                        /**
                         * Properties of a CryptoHashConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICryptoHashConfig
                         * @property {google.privacy.dlp.v2.ICryptoKey|null} [cryptoKey] CryptoHashConfig cryptoKey
                         */
    
                        /**
                         * Constructs a new CryptoHashConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CryptoHashConfig.
                         * @implements ICryptoHashConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICryptoHashConfig=} [properties] Properties to set
                         */
                        function CryptoHashConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CryptoHashConfig cryptoKey.
                         * @member {google.privacy.dlp.v2.ICryptoKey|null|undefined} cryptoKey
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @instance
                         */
                        CryptoHashConfig.prototype.cryptoKey = null;
    
                        /**
                         * Creates a new CryptoHashConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoHashConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CryptoHashConfig} CryptoHashConfig instance
                         */
                        CryptoHashConfig.create = function create(properties) {
                            return new CryptoHashConfig(properties);
                        };
    
                        /**
                         * Encodes the specified CryptoHashConfig message. Does not implicitly {@link google.privacy.dlp.v2.CryptoHashConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoHashConfig} message CryptoHashConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoHashConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cryptoKey != null && Object.hasOwnProperty.call(message, "cryptoKey"))
                                $root.google.privacy.dlp.v2.CryptoKey.encode(message.cryptoKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CryptoHashConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CryptoHashConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoHashConfig} message CryptoHashConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoHashConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CryptoHashConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CryptoHashConfig} CryptoHashConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoHashConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CryptoHashConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CryptoHashConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CryptoHashConfig} CryptoHashConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoHashConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CryptoHashConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CryptoHashConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey")) {
                                var error = $root.google.privacy.dlp.v2.CryptoKey.verify(message.cryptoKey);
                                if (error)
                                    return "cryptoKey." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CryptoHashConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CryptoHashConfig} CryptoHashConfig
                         */
                        CryptoHashConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CryptoHashConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CryptoHashConfig();
                            if (object.cryptoKey != null) {
                                if (typeof object.cryptoKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoHashConfig.cryptoKey: object expected");
                                message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.fromObject(object.cryptoKey);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CryptoHashConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @static
                         * @param {google.privacy.dlp.v2.CryptoHashConfig} message CryptoHashConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CryptoHashConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.cryptoKey = null;
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey"))
                                object.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.toObject(message.cryptoKey, options);
                            return object;
                        };
    
                        /**
                         * Converts this CryptoHashConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CryptoHashConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CryptoHashConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CryptoHashConfig;
                    })();
    
                    v2.CryptoDeterministicConfig = (function() {
    
                        /**
                         * Properties of a CryptoDeterministicConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICryptoDeterministicConfig
                         * @property {google.privacy.dlp.v2.ICryptoKey|null} [cryptoKey] CryptoDeterministicConfig cryptoKey
                         * @property {google.privacy.dlp.v2.IInfoType|null} [surrogateInfoType] CryptoDeterministicConfig surrogateInfoType
                         * @property {google.privacy.dlp.v2.IFieldId|null} [context] CryptoDeterministicConfig context
                         */
    
                        /**
                         * Constructs a new CryptoDeterministicConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CryptoDeterministicConfig.
                         * @implements ICryptoDeterministicConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICryptoDeterministicConfig=} [properties] Properties to set
                         */
                        function CryptoDeterministicConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CryptoDeterministicConfig cryptoKey.
                         * @member {google.privacy.dlp.v2.ICryptoKey|null|undefined} cryptoKey
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @instance
                         */
                        CryptoDeterministicConfig.prototype.cryptoKey = null;
    
                        /**
                         * CryptoDeterministicConfig surrogateInfoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} surrogateInfoType
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @instance
                         */
                        CryptoDeterministicConfig.prototype.surrogateInfoType = null;
    
                        /**
                         * CryptoDeterministicConfig context.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} context
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @instance
                         */
                        CryptoDeterministicConfig.prototype.context = null;
    
                        /**
                         * Creates a new CryptoDeterministicConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoDeterministicConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CryptoDeterministicConfig} CryptoDeterministicConfig instance
                         */
                        CryptoDeterministicConfig.create = function create(properties) {
                            return new CryptoDeterministicConfig(properties);
                        };
    
                        /**
                         * Encodes the specified CryptoDeterministicConfig message. Does not implicitly {@link google.privacy.dlp.v2.CryptoDeterministicConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoDeterministicConfig} message CryptoDeterministicConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoDeterministicConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cryptoKey != null && Object.hasOwnProperty.call(message, "cryptoKey"))
                                $root.google.privacy.dlp.v2.CryptoKey.encode(message.cryptoKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.surrogateInfoType != null && Object.hasOwnProperty.call(message, "surrogateInfoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.surrogateInfoType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.context != null && Object.hasOwnProperty.call(message, "context"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.context, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CryptoDeterministicConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CryptoDeterministicConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoDeterministicConfig} message CryptoDeterministicConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoDeterministicConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CryptoDeterministicConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CryptoDeterministicConfig} CryptoDeterministicConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoDeterministicConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CryptoDeterministicConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.surrogateInfoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.context = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CryptoDeterministicConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CryptoDeterministicConfig} CryptoDeterministicConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoDeterministicConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CryptoDeterministicConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CryptoDeterministicConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey")) {
                                var error = $root.google.privacy.dlp.v2.CryptoKey.verify(message.cryptoKey);
                                if (error)
                                    return "cryptoKey." + error;
                            }
                            if (message.surrogateInfoType != null && message.hasOwnProperty("surrogateInfoType")) {
                                var error = $root.google.privacy.dlp.v2.InfoType.verify(message.surrogateInfoType);
                                if (error)
                                    return "surrogateInfoType." + error;
                            }
                            if (message.context != null && message.hasOwnProperty("context")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.context);
                                if (error)
                                    return "context." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CryptoDeterministicConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CryptoDeterministicConfig} CryptoDeterministicConfig
                         */
                        CryptoDeterministicConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CryptoDeterministicConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CryptoDeterministicConfig();
                            if (object.cryptoKey != null) {
                                if (typeof object.cryptoKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoDeterministicConfig.cryptoKey: object expected");
                                message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.fromObject(object.cryptoKey);
                            }
                            if (object.surrogateInfoType != null) {
                                if (typeof object.surrogateInfoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoDeterministicConfig.surrogateInfoType: object expected");
                                message.surrogateInfoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.surrogateInfoType);
                            }
                            if (object.context != null) {
                                if (typeof object.context !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoDeterministicConfig.context: object expected");
                                message.context = $root.google.privacy.dlp.v2.FieldId.fromObject(object.context);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CryptoDeterministicConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @static
                         * @param {google.privacy.dlp.v2.CryptoDeterministicConfig} message CryptoDeterministicConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CryptoDeterministicConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.cryptoKey = null;
                                object.surrogateInfoType = null;
                                object.context = null;
                            }
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey"))
                                object.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.toObject(message.cryptoKey, options);
                            if (message.surrogateInfoType != null && message.hasOwnProperty("surrogateInfoType"))
                                object.surrogateInfoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.surrogateInfoType, options);
                            if (message.context != null && message.hasOwnProperty("context"))
                                object.context = $root.google.privacy.dlp.v2.FieldId.toObject(message.context, options);
                            return object;
                        };
    
                        /**
                         * Converts this CryptoDeterministicConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CryptoDeterministicConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CryptoDeterministicConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CryptoDeterministicConfig;
                    })();
    
                    v2.ReplaceValueConfig = (function() {
    
                        /**
                         * Properties of a ReplaceValueConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IReplaceValueConfig
                         * @property {google.privacy.dlp.v2.IValue|null} [newValue] ReplaceValueConfig newValue
                         */
    
                        /**
                         * Constructs a new ReplaceValueConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ReplaceValueConfig.
                         * @implements IReplaceValueConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IReplaceValueConfig=} [properties] Properties to set
                         */
                        function ReplaceValueConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReplaceValueConfig newValue.
                         * @member {google.privacy.dlp.v2.IValue|null|undefined} newValue
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @instance
                         */
                        ReplaceValueConfig.prototype.newValue = null;
    
                        /**
                         * Creates a new ReplaceValueConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IReplaceValueConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ReplaceValueConfig} ReplaceValueConfig instance
                         */
                        ReplaceValueConfig.create = function create(properties) {
                            return new ReplaceValueConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ReplaceValueConfig message. Does not implicitly {@link google.privacy.dlp.v2.ReplaceValueConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IReplaceValueConfig} message ReplaceValueConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReplaceValueConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.newValue != null && Object.hasOwnProperty.call(message, "newValue"))
                                $root.google.privacy.dlp.v2.Value.encode(message.newValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReplaceValueConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ReplaceValueConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IReplaceValueConfig} message ReplaceValueConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReplaceValueConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReplaceValueConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ReplaceValueConfig} ReplaceValueConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReplaceValueConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ReplaceValueConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.newValue = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReplaceValueConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ReplaceValueConfig} ReplaceValueConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReplaceValueConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReplaceValueConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReplaceValueConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.newValue != null && message.hasOwnProperty("newValue")) {
                                var error = $root.google.privacy.dlp.v2.Value.verify(message.newValue);
                                if (error)
                                    return "newValue." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ReplaceValueConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ReplaceValueConfig} ReplaceValueConfig
                         */
                        ReplaceValueConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ReplaceValueConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ReplaceValueConfig();
                            if (object.newValue != null) {
                                if (typeof object.newValue !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.ReplaceValueConfig.newValue: object expected");
                                message.newValue = $root.google.privacy.dlp.v2.Value.fromObject(object.newValue);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReplaceValueConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ReplaceValueConfig} message ReplaceValueConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReplaceValueConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.newValue = null;
                            if (message.newValue != null && message.hasOwnProperty("newValue"))
                                object.newValue = $root.google.privacy.dlp.v2.Value.toObject(message.newValue, options);
                            return object;
                        };
    
                        /**
                         * Converts this ReplaceValueConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ReplaceValueConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReplaceValueConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReplaceValueConfig;
                    })();
    
                    v2.ReplaceWithInfoTypeConfig = (function() {
    
                        /**
                         * Properties of a ReplaceWithInfoTypeConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IReplaceWithInfoTypeConfig
                         */
    
                        /**
                         * Constructs a new ReplaceWithInfoTypeConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ReplaceWithInfoTypeConfig.
                         * @implements IReplaceWithInfoTypeConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IReplaceWithInfoTypeConfig=} [properties] Properties to set
                         */
                        function ReplaceWithInfoTypeConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new ReplaceWithInfoTypeConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IReplaceWithInfoTypeConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ReplaceWithInfoTypeConfig} ReplaceWithInfoTypeConfig instance
                         */
                        ReplaceWithInfoTypeConfig.create = function create(properties) {
                            return new ReplaceWithInfoTypeConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ReplaceWithInfoTypeConfig message. Does not implicitly {@link google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IReplaceWithInfoTypeConfig} message ReplaceWithInfoTypeConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReplaceWithInfoTypeConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReplaceWithInfoTypeConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IReplaceWithInfoTypeConfig} message ReplaceWithInfoTypeConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReplaceWithInfoTypeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReplaceWithInfoTypeConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ReplaceWithInfoTypeConfig} ReplaceWithInfoTypeConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReplaceWithInfoTypeConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReplaceWithInfoTypeConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ReplaceWithInfoTypeConfig} ReplaceWithInfoTypeConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReplaceWithInfoTypeConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReplaceWithInfoTypeConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReplaceWithInfoTypeConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReplaceWithInfoTypeConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ReplaceWithInfoTypeConfig} ReplaceWithInfoTypeConfig
                         */
                        ReplaceWithInfoTypeConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
                                return object;
                            return new $root.google.privacy.dlp.v2.ReplaceWithInfoTypeConfig();
                        };
    
                        /**
                         * Creates a plain object from a ReplaceWithInfoTypeConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ReplaceWithInfoTypeConfig} message ReplaceWithInfoTypeConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReplaceWithInfoTypeConfig.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this ReplaceWithInfoTypeConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReplaceWithInfoTypeConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReplaceWithInfoTypeConfig;
                    })();
    
                    v2.RedactConfig = (function() {
    
                        /**
                         * Properties of a RedactConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRedactConfig
                         */
    
                        /**
                         * Constructs a new RedactConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RedactConfig.
                         * @implements IRedactConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRedactConfig=} [properties] Properties to set
                         */
                        function RedactConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new RedactConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RedactConfig} RedactConfig instance
                         */
                        RedactConfig.create = function create(properties) {
                            return new RedactConfig(properties);
                        };
    
                        /**
                         * Encodes the specified RedactConfig message. Does not implicitly {@link google.privacy.dlp.v2.RedactConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactConfig} message RedactConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RedactConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RedactConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RedactConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IRedactConfig} message RedactConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RedactConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RedactConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RedactConfig} RedactConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RedactConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RedactConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RedactConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RedactConfig} RedactConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RedactConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RedactConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RedactConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a RedactConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RedactConfig} RedactConfig
                         */
                        RedactConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RedactConfig)
                                return object;
                            return new $root.google.privacy.dlp.v2.RedactConfig();
                        };
    
                        /**
                         * Creates a plain object from a RedactConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @static
                         * @param {google.privacy.dlp.v2.RedactConfig} message RedactConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RedactConfig.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this RedactConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RedactConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RedactConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RedactConfig;
                    })();
    
                    v2.CharsToIgnore = (function() {
    
                        /**
                         * Properties of a CharsToIgnore.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICharsToIgnore
                         * @property {string|null} [charactersToSkip] CharsToIgnore charactersToSkip
                         * @property {google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore|null} [commonCharactersToIgnore] CharsToIgnore commonCharactersToIgnore
                         */
    
                        /**
                         * Constructs a new CharsToIgnore.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CharsToIgnore.
                         * @implements ICharsToIgnore
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICharsToIgnore=} [properties] Properties to set
                         */
                        function CharsToIgnore(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CharsToIgnore charactersToSkip.
                         * @member {string} charactersToSkip
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @instance
                         */
                        CharsToIgnore.prototype.charactersToSkip = "";
    
                        /**
                         * CharsToIgnore commonCharactersToIgnore.
                         * @member {google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore} commonCharactersToIgnore
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @instance
                         */
                        CharsToIgnore.prototype.commonCharactersToIgnore = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * CharsToIgnore characters.
                         * @member {"charactersToSkip"|"commonCharactersToIgnore"|undefined} characters
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @instance
                         */
                        Object.defineProperty(CharsToIgnore.prototype, "characters", {
                            get: $util.oneOfGetter($oneOfFields = ["charactersToSkip", "commonCharactersToIgnore"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new CharsToIgnore instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {google.privacy.dlp.v2.ICharsToIgnore=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CharsToIgnore} CharsToIgnore instance
                         */
                        CharsToIgnore.create = function create(properties) {
                            return new CharsToIgnore(properties);
                        };
    
                        /**
                         * Encodes the specified CharsToIgnore message. Does not implicitly {@link google.privacy.dlp.v2.CharsToIgnore.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {google.privacy.dlp.v2.ICharsToIgnore} message CharsToIgnore message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CharsToIgnore.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.charactersToSkip != null && Object.hasOwnProperty.call(message, "charactersToSkip"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.charactersToSkip);
                            if (message.commonCharactersToIgnore != null && Object.hasOwnProperty.call(message, "commonCharactersToIgnore"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.commonCharactersToIgnore);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CharsToIgnore message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CharsToIgnore.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {google.privacy.dlp.v2.ICharsToIgnore} message CharsToIgnore message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CharsToIgnore.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CharsToIgnore message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CharsToIgnore} CharsToIgnore
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CharsToIgnore.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CharsToIgnore();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.charactersToSkip = reader.string();
                                    break;
                                case 2:
                                    message.commonCharactersToIgnore = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CharsToIgnore message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CharsToIgnore} CharsToIgnore
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CharsToIgnore.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CharsToIgnore message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CharsToIgnore.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.charactersToSkip != null && message.hasOwnProperty("charactersToSkip")) {
                                properties.characters = 1;
                                if (!$util.isString(message.charactersToSkip))
                                    return "charactersToSkip: string expected";
                            }
                            if (message.commonCharactersToIgnore != null && message.hasOwnProperty("commonCharactersToIgnore")) {
                                if (properties.characters === 1)
                                    return "characters: multiple values";
                                properties.characters = 1;
                                switch (message.commonCharactersToIgnore) {
                                default:
                                    return "commonCharactersToIgnore: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CharsToIgnore message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CharsToIgnore} CharsToIgnore
                         */
                        CharsToIgnore.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CharsToIgnore)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CharsToIgnore();
                            if (object.charactersToSkip != null)
                                message.charactersToSkip = String(object.charactersToSkip);
                            switch (object.commonCharactersToIgnore) {
                            case "COMMON_CHARS_TO_IGNORE_UNSPECIFIED":
                            case 0:
                                message.commonCharactersToIgnore = 0;
                                break;
                            case "NUMERIC":
                            case 1:
                                message.commonCharactersToIgnore = 1;
                                break;
                            case "ALPHA_UPPER_CASE":
                            case 2:
                                message.commonCharactersToIgnore = 2;
                                break;
                            case "ALPHA_LOWER_CASE":
                            case 3:
                                message.commonCharactersToIgnore = 3;
                                break;
                            case "PUNCTUATION":
                            case 4:
                                message.commonCharactersToIgnore = 4;
                                break;
                            case "WHITESPACE":
                            case 5:
                                message.commonCharactersToIgnore = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CharsToIgnore message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @static
                         * @param {google.privacy.dlp.v2.CharsToIgnore} message CharsToIgnore
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CharsToIgnore.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.charactersToSkip != null && message.hasOwnProperty("charactersToSkip")) {
                                object.charactersToSkip = message.charactersToSkip;
                                if (options.oneofs)
                                    object.characters = "charactersToSkip";
                            }
                            if (message.commonCharactersToIgnore != null && message.hasOwnProperty("commonCharactersToIgnore")) {
                                object.commonCharactersToIgnore = options.enums === String ? $root.google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore[message.commonCharactersToIgnore] : message.commonCharactersToIgnore;
                                if (options.oneofs)
                                    object.characters = "commonCharactersToIgnore";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CharsToIgnore to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CharsToIgnore
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CharsToIgnore.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * CommonCharsToIgnore enum.
                         * @name google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore
                         * @enum {number}
                         * @property {number} COMMON_CHARS_TO_IGNORE_UNSPECIFIED=0 COMMON_CHARS_TO_IGNORE_UNSPECIFIED value
                         * @property {number} NUMERIC=1 NUMERIC value
                         * @property {number} ALPHA_UPPER_CASE=2 ALPHA_UPPER_CASE value
                         * @property {number} ALPHA_LOWER_CASE=3 ALPHA_LOWER_CASE value
                         * @property {number} PUNCTUATION=4 PUNCTUATION value
                         * @property {number} WHITESPACE=5 WHITESPACE value
                         */
                        CharsToIgnore.CommonCharsToIgnore = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "COMMON_CHARS_TO_IGNORE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "NUMERIC"] = 1;
                            values[valuesById[2] = "ALPHA_UPPER_CASE"] = 2;
                            values[valuesById[3] = "ALPHA_LOWER_CASE"] = 3;
                            values[valuesById[4] = "PUNCTUATION"] = 4;
                            values[valuesById[5] = "WHITESPACE"] = 5;
                            return values;
                        })();
    
                        return CharsToIgnore;
                    })();
    
                    v2.CharacterMaskConfig = (function() {
    
                        /**
                         * Properties of a CharacterMaskConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICharacterMaskConfig
                         * @property {string|null} [maskingCharacter] CharacterMaskConfig maskingCharacter
                         * @property {number|null} [numberToMask] CharacterMaskConfig numberToMask
                         * @property {boolean|null} [reverseOrder] CharacterMaskConfig reverseOrder
                         * @property {Array.<google.privacy.dlp.v2.ICharsToIgnore>|null} [charactersToIgnore] CharacterMaskConfig charactersToIgnore
                         */
    
                        /**
                         * Constructs a new CharacterMaskConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CharacterMaskConfig.
                         * @implements ICharacterMaskConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICharacterMaskConfig=} [properties] Properties to set
                         */
                        function CharacterMaskConfig(properties) {
                            this.charactersToIgnore = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CharacterMaskConfig maskingCharacter.
                         * @member {string} maskingCharacter
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @instance
                         */
                        CharacterMaskConfig.prototype.maskingCharacter = "";
    
                        /**
                         * CharacterMaskConfig numberToMask.
                         * @member {number} numberToMask
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @instance
                         */
                        CharacterMaskConfig.prototype.numberToMask = 0;
    
                        /**
                         * CharacterMaskConfig reverseOrder.
                         * @member {boolean} reverseOrder
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @instance
                         */
                        CharacterMaskConfig.prototype.reverseOrder = false;
    
                        /**
                         * CharacterMaskConfig charactersToIgnore.
                         * @member {Array.<google.privacy.dlp.v2.ICharsToIgnore>} charactersToIgnore
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @instance
                         */
                        CharacterMaskConfig.prototype.charactersToIgnore = $util.emptyArray;
    
                        /**
                         * Creates a new CharacterMaskConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICharacterMaskConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CharacterMaskConfig} CharacterMaskConfig instance
                         */
                        CharacterMaskConfig.create = function create(properties) {
                            return new CharacterMaskConfig(properties);
                        };
    
                        /**
                         * Encodes the specified CharacterMaskConfig message. Does not implicitly {@link google.privacy.dlp.v2.CharacterMaskConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICharacterMaskConfig} message CharacterMaskConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CharacterMaskConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.maskingCharacter != null && Object.hasOwnProperty.call(message, "maskingCharacter"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.maskingCharacter);
                            if (message.numberToMask != null && Object.hasOwnProperty.call(message, "numberToMask"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numberToMask);
                            if (message.reverseOrder != null && Object.hasOwnProperty.call(message, "reverseOrder"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.reverseOrder);
                            if (message.charactersToIgnore != null && message.charactersToIgnore.length)
                                for (var i = 0; i < message.charactersToIgnore.length; ++i)
                                    $root.google.privacy.dlp.v2.CharsToIgnore.encode(message.charactersToIgnore[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CharacterMaskConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CharacterMaskConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICharacterMaskConfig} message CharacterMaskConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CharacterMaskConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CharacterMaskConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CharacterMaskConfig} CharacterMaskConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CharacterMaskConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CharacterMaskConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.maskingCharacter = reader.string();
                                    break;
                                case 2:
                                    message.numberToMask = reader.int32();
                                    break;
                                case 3:
                                    message.reverseOrder = reader.bool();
                                    break;
                                case 4:
                                    if (!(message.charactersToIgnore && message.charactersToIgnore.length))
                                        message.charactersToIgnore = [];
                                    message.charactersToIgnore.push($root.google.privacy.dlp.v2.CharsToIgnore.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CharacterMaskConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CharacterMaskConfig} CharacterMaskConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CharacterMaskConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CharacterMaskConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CharacterMaskConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.maskingCharacter != null && message.hasOwnProperty("maskingCharacter"))
                                if (!$util.isString(message.maskingCharacter))
                                    return "maskingCharacter: string expected";
                            if (message.numberToMask != null && message.hasOwnProperty("numberToMask"))
                                if (!$util.isInteger(message.numberToMask))
                                    return "numberToMask: integer expected";
                            if (message.reverseOrder != null && message.hasOwnProperty("reverseOrder"))
                                if (typeof message.reverseOrder !== "boolean")
                                    return "reverseOrder: boolean expected";
                            if (message.charactersToIgnore != null && message.hasOwnProperty("charactersToIgnore")) {
                                if (!Array.isArray(message.charactersToIgnore))
                                    return "charactersToIgnore: array expected";
                                for (var i = 0; i < message.charactersToIgnore.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.CharsToIgnore.verify(message.charactersToIgnore[i]);
                                    if (error)
                                        return "charactersToIgnore." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CharacterMaskConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CharacterMaskConfig} CharacterMaskConfig
                         */
                        CharacterMaskConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CharacterMaskConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CharacterMaskConfig();
                            if (object.maskingCharacter != null)
                                message.maskingCharacter = String(object.maskingCharacter);
                            if (object.numberToMask != null)
                                message.numberToMask = object.numberToMask | 0;
                            if (object.reverseOrder != null)
                                message.reverseOrder = Boolean(object.reverseOrder);
                            if (object.charactersToIgnore) {
                                if (!Array.isArray(object.charactersToIgnore))
                                    throw TypeError(".google.privacy.dlp.v2.CharacterMaskConfig.charactersToIgnore: array expected");
                                message.charactersToIgnore = [];
                                for (var i = 0; i < object.charactersToIgnore.length; ++i) {
                                    if (typeof object.charactersToIgnore[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.CharacterMaskConfig.charactersToIgnore: object expected");
                                    message.charactersToIgnore[i] = $root.google.privacy.dlp.v2.CharsToIgnore.fromObject(object.charactersToIgnore[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CharacterMaskConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @static
                         * @param {google.privacy.dlp.v2.CharacterMaskConfig} message CharacterMaskConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CharacterMaskConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.charactersToIgnore = [];
                            if (options.defaults) {
                                object.maskingCharacter = "";
                                object.numberToMask = 0;
                                object.reverseOrder = false;
                            }
                            if (message.maskingCharacter != null && message.hasOwnProperty("maskingCharacter"))
                                object.maskingCharacter = message.maskingCharacter;
                            if (message.numberToMask != null && message.hasOwnProperty("numberToMask"))
                                object.numberToMask = message.numberToMask;
                            if (message.reverseOrder != null && message.hasOwnProperty("reverseOrder"))
                                object.reverseOrder = message.reverseOrder;
                            if (message.charactersToIgnore && message.charactersToIgnore.length) {
                                object.charactersToIgnore = [];
                                for (var j = 0; j < message.charactersToIgnore.length; ++j)
                                    object.charactersToIgnore[j] = $root.google.privacy.dlp.v2.CharsToIgnore.toObject(message.charactersToIgnore[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CharacterMaskConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CharacterMaskConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CharacterMaskConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CharacterMaskConfig;
                    })();
    
                    v2.FixedSizeBucketingConfig = (function() {
    
                        /**
                         * Properties of a FixedSizeBucketingConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IFixedSizeBucketingConfig
                         * @property {google.privacy.dlp.v2.IValue|null} [lowerBound] FixedSizeBucketingConfig lowerBound
                         * @property {google.privacy.dlp.v2.IValue|null} [upperBound] FixedSizeBucketingConfig upperBound
                         * @property {number|null} [bucketSize] FixedSizeBucketingConfig bucketSize
                         */
    
                        /**
                         * Constructs a new FixedSizeBucketingConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a FixedSizeBucketingConfig.
                         * @implements IFixedSizeBucketingConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IFixedSizeBucketingConfig=} [properties] Properties to set
                         */
                        function FixedSizeBucketingConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FixedSizeBucketingConfig lowerBound.
                         * @member {google.privacy.dlp.v2.IValue|null|undefined} lowerBound
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @instance
                         */
                        FixedSizeBucketingConfig.prototype.lowerBound = null;
    
                        /**
                         * FixedSizeBucketingConfig upperBound.
                         * @member {google.privacy.dlp.v2.IValue|null|undefined} upperBound
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @instance
                         */
                        FixedSizeBucketingConfig.prototype.upperBound = null;
    
                        /**
                         * FixedSizeBucketingConfig bucketSize.
                         * @member {number} bucketSize
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @instance
                         */
                        FixedSizeBucketingConfig.prototype.bucketSize = 0;
    
                        /**
                         * Creates a new FixedSizeBucketingConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IFixedSizeBucketingConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.FixedSizeBucketingConfig} FixedSizeBucketingConfig instance
                         */
                        FixedSizeBucketingConfig.create = function create(properties) {
                            return new FixedSizeBucketingConfig(properties);
                        };
    
                        /**
                         * Encodes the specified FixedSizeBucketingConfig message. Does not implicitly {@link google.privacy.dlp.v2.FixedSizeBucketingConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IFixedSizeBucketingConfig} message FixedSizeBucketingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FixedSizeBucketingConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.lowerBound != null && Object.hasOwnProperty.call(message, "lowerBound"))
                                $root.google.privacy.dlp.v2.Value.encode(message.lowerBound, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.upperBound != null && Object.hasOwnProperty.call(message, "upperBound"))
                                $root.google.privacy.dlp.v2.Value.encode(message.upperBound, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.bucketSize != null && Object.hasOwnProperty.call(message, "bucketSize"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.bucketSize);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FixedSizeBucketingConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.FixedSizeBucketingConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IFixedSizeBucketingConfig} message FixedSizeBucketingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FixedSizeBucketingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FixedSizeBucketingConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.FixedSizeBucketingConfig} FixedSizeBucketingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FixedSizeBucketingConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.FixedSizeBucketingConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.lowerBound = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.upperBound = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.bucketSize = reader.double();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FixedSizeBucketingConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.FixedSizeBucketingConfig} FixedSizeBucketingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FixedSizeBucketingConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FixedSizeBucketingConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FixedSizeBucketingConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.lowerBound != null && message.hasOwnProperty("lowerBound")) {
                                var error = $root.google.privacy.dlp.v2.Value.verify(message.lowerBound);
                                if (error)
                                    return "lowerBound." + error;
                            }
                            if (message.upperBound != null && message.hasOwnProperty("upperBound")) {
                                var error = $root.google.privacy.dlp.v2.Value.verify(message.upperBound);
                                if (error)
                                    return "upperBound." + error;
                            }
                            if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                if (typeof message.bucketSize !== "number")
                                    return "bucketSize: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a FixedSizeBucketingConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.FixedSizeBucketingConfig} FixedSizeBucketingConfig
                         */
                        FixedSizeBucketingConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.FixedSizeBucketingConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.FixedSizeBucketingConfig();
                            if (object.lowerBound != null) {
                                if (typeof object.lowerBound !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.FixedSizeBucketingConfig.lowerBound: object expected");
                                message.lowerBound = $root.google.privacy.dlp.v2.Value.fromObject(object.lowerBound);
                            }
                            if (object.upperBound != null) {
                                if (typeof object.upperBound !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.FixedSizeBucketingConfig.upperBound: object expected");
                                message.upperBound = $root.google.privacy.dlp.v2.Value.fromObject(object.upperBound);
                            }
                            if (object.bucketSize != null)
                                message.bucketSize = Number(object.bucketSize);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FixedSizeBucketingConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.FixedSizeBucketingConfig} message FixedSizeBucketingConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FixedSizeBucketingConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.lowerBound = null;
                                object.upperBound = null;
                                object.bucketSize = 0;
                            }
                            if (message.lowerBound != null && message.hasOwnProperty("lowerBound"))
                                object.lowerBound = $root.google.privacy.dlp.v2.Value.toObject(message.lowerBound, options);
                            if (message.upperBound != null && message.hasOwnProperty("upperBound"))
                                object.upperBound = $root.google.privacy.dlp.v2.Value.toObject(message.upperBound, options);
                            if (message.bucketSize != null && message.hasOwnProperty("bucketSize"))
                                object.bucketSize = options.json && !isFinite(message.bucketSize) ? String(message.bucketSize) : message.bucketSize;
                            return object;
                        };
    
                        /**
                         * Converts this FixedSizeBucketingConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.FixedSizeBucketingConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FixedSizeBucketingConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return FixedSizeBucketingConfig;
                    })();
    
                    v2.BucketingConfig = (function() {
    
                        /**
                         * Properties of a BucketingConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IBucketingConfig
                         * @property {Array.<google.privacy.dlp.v2.BucketingConfig.IBucket>|null} [buckets] BucketingConfig buckets
                         */
    
                        /**
                         * Constructs a new BucketingConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a BucketingConfig.
                         * @implements IBucketingConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IBucketingConfig=} [properties] Properties to set
                         */
                        function BucketingConfig(properties) {
                            this.buckets = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BucketingConfig buckets.
                         * @member {Array.<google.privacy.dlp.v2.BucketingConfig.IBucket>} buckets
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @instance
                         */
                        BucketingConfig.prototype.buckets = $util.emptyArray;
    
                        /**
                         * Creates a new BucketingConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IBucketingConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.BucketingConfig} BucketingConfig instance
                         */
                        BucketingConfig.create = function create(properties) {
                            return new BucketingConfig(properties);
                        };
    
                        /**
                         * Encodes the specified BucketingConfig message. Does not implicitly {@link google.privacy.dlp.v2.BucketingConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IBucketingConfig} message BucketingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BucketingConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.buckets != null && message.buckets.length)
                                for (var i = 0; i < message.buckets.length; ++i)
                                    $root.google.privacy.dlp.v2.BucketingConfig.Bucket.encode(message.buckets[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BucketingConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BucketingConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IBucketingConfig} message BucketingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BucketingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BucketingConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.BucketingConfig} BucketingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BucketingConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BucketingConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.buckets && message.buckets.length))
                                        message.buckets = [];
                                    message.buckets.push($root.google.privacy.dlp.v2.BucketingConfig.Bucket.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BucketingConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.BucketingConfig} BucketingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BucketingConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BucketingConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BucketingConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                if (!Array.isArray(message.buckets))
                                    return "buckets: array expected";
                                for (var i = 0; i < message.buckets.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.BucketingConfig.Bucket.verify(message.buckets[i]);
                                    if (error)
                                        return "buckets." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a BucketingConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.BucketingConfig} BucketingConfig
                         */
                        BucketingConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.BucketingConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.BucketingConfig();
                            if (object.buckets) {
                                if (!Array.isArray(object.buckets))
                                    throw TypeError(".google.privacy.dlp.v2.BucketingConfig.buckets: array expected");
                                message.buckets = [];
                                for (var i = 0; i < object.buckets.length; ++i) {
                                    if (typeof object.buckets[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.BucketingConfig.buckets: object expected");
                                    message.buckets[i] = $root.google.privacy.dlp.v2.BucketingConfig.Bucket.fromObject(object.buckets[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BucketingConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @static
                         * @param {google.privacy.dlp.v2.BucketingConfig} message BucketingConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BucketingConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.buckets = [];
                            if (message.buckets && message.buckets.length) {
                                object.buckets = [];
                                for (var j = 0; j < message.buckets.length; ++j)
                                    object.buckets[j] = $root.google.privacy.dlp.v2.BucketingConfig.Bucket.toObject(message.buckets[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this BucketingConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.BucketingConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BucketingConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        BucketingConfig.Bucket = (function() {
    
                            /**
                             * Properties of a Bucket.
                             * @memberof google.privacy.dlp.v2.BucketingConfig
                             * @interface IBucket
                             * @property {google.privacy.dlp.v2.IValue|null} [min] Bucket min
                             * @property {google.privacy.dlp.v2.IValue|null} [max] Bucket max
                             * @property {google.privacy.dlp.v2.IValue|null} [replacementValue] Bucket replacementValue
                             */
    
                            /**
                             * Constructs a new Bucket.
                             * @memberof google.privacy.dlp.v2.BucketingConfig
                             * @classdesc Represents a Bucket.
                             * @implements IBucket
                             * @constructor
                             * @param {google.privacy.dlp.v2.BucketingConfig.IBucket=} [properties] Properties to set
                             */
                            function Bucket(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Bucket min.
                             * @member {google.privacy.dlp.v2.IValue|null|undefined} min
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @instance
                             */
                            Bucket.prototype.min = null;
    
                            /**
                             * Bucket max.
                             * @member {google.privacy.dlp.v2.IValue|null|undefined} max
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @instance
                             */
                            Bucket.prototype.max = null;
    
                            /**
                             * Bucket replacementValue.
                             * @member {google.privacy.dlp.v2.IValue|null|undefined} replacementValue
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @instance
                             */
                            Bucket.prototype.replacementValue = null;
    
                            /**
                             * Creates a new Bucket instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {google.privacy.dlp.v2.BucketingConfig.IBucket=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.BucketingConfig.Bucket} Bucket instance
                             */
                            Bucket.create = function create(properties) {
                                return new Bucket(properties);
                            };
    
                            /**
                             * Encodes the specified Bucket message. Does not implicitly {@link google.privacy.dlp.v2.BucketingConfig.Bucket.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {google.privacy.dlp.v2.BucketingConfig.IBucket} message Bucket message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Bucket.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.min != null && Object.hasOwnProperty.call(message, "min"))
                                    $root.google.privacy.dlp.v2.Value.encode(message.min, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.max != null && Object.hasOwnProperty.call(message, "max"))
                                    $root.google.privacy.dlp.v2.Value.encode(message.max, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.replacementValue != null && Object.hasOwnProperty.call(message, "replacementValue"))
                                    $root.google.privacy.dlp.v2.Value.encode(message.replacementValue, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Bucket message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BucketingConfig.Bucket.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {google.privacy.dlp.v2.BucketingConfig.IBucket} message Bucket message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Bucket.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Bucket message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.BucketingConfig.Bucket} Bucket
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Bucket.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BucketingConfig.Bucket();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.min = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.max = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.replacementValue = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Bucket message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.BucketingConfig.Bucket} Bucket
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Bucket.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Bucket message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Bucket.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.min != null && message.hasOwnProperty("min")) {
                                    var error = $root.google.privacy.dlp.v2.Value.verify(message.min);
                                    if (error)
                                        return "min." + error;
                                }
                                if (message.max != null && message.hasOwnProperty("max")) {
                                    var error = $root.google.privacy.dlp.v2.Value.verify(message.max);
                                    if (error)
                                        return "max." + error;
                                }
                                if (message.replacementValue != null && message.hasOwnProperty("replacementValue")) {
                                    var error = $root.google.privacy.dlp.v2.Value.verify(message.replacementValue);
                                    if (error)
                                        return "replacementValue." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Bucket message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.BucketingConfig.Bucket} Bucket
                             */
                            Bucket.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.BucketingConfig.Bucket)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.BucketingConfig.Bucket();
                                if (object.min != null) {
                                    if (typeof object.min !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.BucketingConfig.Bucket.min: object expected");
                                    message.min = $root.google.privacy.dlp.v2.Value.fromObject(object.min);
                                }
                                if (object.max != null) {
                                    if (typeof object.max !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.BucketingConfig.Bucket.max: object expected");
                                    message.max = $root.google.privacy.dlp.v2.Value.fromObject(object.max);
                                }
                                if (object.replacementValue != null) {
                                    if (typeof object.replacementValue !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.BucketingConfig.Bucket.replacementValue: object expected");
                                    message.replacementValue = $root.google.privacy.dlp.v2.Value.fromObject(object.replacementValue);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Bucket message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @static
                             * @param {google.privacy.dlp.v2.BucketingConfig.Bucket} message Bucket
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Bucket.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.min = null;
                                    object.max = null;
                                    object.replacementValue = null;
                                }
                                if (message.min != null && message.hasOwnProperty("min"))
                                    object.min = $root.google.privacy.dlp.v2.Value.toObject(message.min, options);
                                if (message.max != null && message.hasOwnProperty("max"))
                                    object.max = $root.google.privacy.dlp.v2.Value.toObject(message.max, options);
                                if (message.replacementValue != null && message.hasOwnProperty("replacementValue"))
                                    object.replacementValue = $root.google.privacy.dlp.v2.Value.toObject(message.replacementValue, options);
                                return object;
                            };
    
                            /**
                             * Converts this Bucket to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.BucketingConfig.Bucket
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Bucket.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Bucket;
                        })();
    
                        return BucketingConfig;
                    })();
    
                    v2.CryptoReplaceFfxFpeConfig = (function() {
    
                        /**
                         * Properties of a CryptoReplaceFfxFpeConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICryptoReplaceFfxFpeConfig
                         * @property {google.privacy.dlp.v2.ICryptoKey|null} [cryptoKey] CryptoReplaceFfxFpeConfig cryptoKey
                         * @property {google.privacy.dlp.v2.IFieldId|null} [context] CryptoReplaceFfxFpeConfig context
                         * @property {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet|null} [commonAlphabet] CryptoReplaceFfxFpeConfig commonAlphabet
                         * @property {string|null} [customAlphabet] CryptoReplaceFfxFpeConfig customAlphabet
                         * @property {number|null} [radix] CryptoReplaceFfxFpeConfig radix
                         * @property {google.privacy.dlp.v2.IInfoType|null} [surrogateInfoType] CryptoReplaceFfxFpeConfig surrogateInfoType
                         */
    
                        /**
                         * Constructs a new CryptoReplaceFfxFpeConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CryptoReplaceFfxFpeConfig.
                         * @implements ICryptoReplaceFfxFpeConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICryptoReplaceFfxFpeConfig=} [properties] Properties to set
                         */
                        function CryptoReplaceFfxFpeConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CryptoReplaceFfxFpeConfig cryptoKey.
                         * @member {google.privacy.dlp.v2.ICryptoKey|null|undefined} cryptoKey
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        CryptoReplaceFfxFpeConfig.prototype.cryptoKey = null;
    
                        /**
                         * CryptoReplaceFfxFpeConfig context.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} context
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        CryptoReplaceFfxFpeConfig.prototype.context = null;
    
                        /**
                         * CryptoReplaceFfxFpeConfig commonAlphabet.
                         * @member {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet} commonAlphabet
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        CryptoReplaceFfxFpeConfig.prototype.commonAlphabet = 0;
    
                        /**
                         * CryptoReplaceFfxFpeConfig customAlphabet.
                         * @member {string} customAlphabet
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        CryptoReplaceFfxFpeConfig.prototype.customAlphabet = "";
    
                        /**
                         * CryptoReplaceFfxFpeConfig radix.
                         * @member {number} radix
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        CryptoReplaceFfxFpeConfig.prototype.radix = 0;
    
                        /**
                         * CryptoReplaceFfxFpeConfig surrogateInfoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} surrogateInfoType
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        CryptoReplaceFfxFpeConfig.prototype.surrogateInfoType = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * CryptoReplaceFfxFpeConfig alphabet.
                         * @member {"commonAlphabet"|"customAlphabet"|"radix"|undefined} alphabet
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         */
                        Object.defineProperty(CryptoReplaceFfxFpeConfig.prototype, "alphabet", {
                            get: $util.oneOfGetter($oneOfFields = ["commonAlphabet", "customAlphabet", "radix"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new CryptoReplaceFfxFpeConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoReplaceFfxFpeConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig} CryptoReplaceFfxFpeConfig instance
                         */
                        CryptoReplaceFfxFpeConfig.create = function create(properties) {
                            return new CryptoReplaceFfxFpeConfig(properties);
                        };
    
                        /**
                         * Encodes the specified CryptoReplaceFfxFpeConfig message. Does not implicitly {@link google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoReplaceFfxFpeConfig} message CryptoReplaceFfxFpeConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoReplaceFfxFpeConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cryptoKey != null && Object.hasOwnProperty.call(message, "cryptoKey"))
                                $root.google.privacy.dlp.v2.CryptoKey.encode(message.cryptoKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.context != null && Object.hasOwnProperty.call(message, "context"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.commonAlphabet != null && Object.hasOwnProperty.call(message, "commonAlphabet"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.commonAlphabet);
                            if (message.customAlphabet != null && Object.hasOwnProperty.call(message, "customAlphabet"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.customAlphabet);
                            if (message.radix != null && Object.hasOwnProperty.call(message, "radix"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.radix);
                            if (message.surrogateInfoType != null && Object.hasOwnProperty.call(message, "surrogateInfoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.surrogateInfoType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CryptoReplaceFfxFpeConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoReplaceFfxFpeConfig} message CryptoReplaceFfxFpeConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoReplaceFfxFpeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CryptoReplaceFfxFpeConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig} CryptoReplaceFfxFpeConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoReplaceFfxFpeConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.context = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.commonAlphabet = reader.int32();
                                    break;
                                case 5:
                                    message.customAlphabet = reader.string();
                                    break;
                                case 6:
                                    message.radix = reader.int32();
                                    break;
                                case 8:
                                    message.surrogateInfoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CryptoReplaceFfxFpeConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig} CryptoReplaceFfxFpeConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoReplaceFfxFpeConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CryptoReplaceFfxFpeConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CryptoReplaceFfxFpeConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey")) {
                                var error = $root.google.privacy.dlp.v2.CryptoKey.verify(message.cryptoKey);
                                if (error)
                                    return "cryptoKey." + error;
                            }
                            if (message.context != null && message.hasOwnProperty("context")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.context);
                                if (error)
                                    return "context." + error;
                            }
                            if (message.commonAlphabet != null && message.hasOwnProperty("commonAlphabet")) {
                                properties.alphabet = 1;
                                switch (message.commonAlphabet) {
                                default:
                                    return "commonAlphabet: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            }
                            if (message.customAlphabet != null && message.hasOwnProperty("customAlphabet")) {
                                if (properties.alphabet === 1)
                                    return "alphabet: multiple values";
                                properties.alphabet = 1;
                                if (!$util.isString(message.customAlphabet))
                                    return "customAlphabet: string expected";
                            }
                            if (message.radix != null && message.hasOwnProperty("radix")) {
                                if (properties.alphabet === 1)
                                    return "alphabet: multiple values";
                                properties.alphabet = 1;
                                if (!$util.isInteger(message.radix))
                                    return "radix: integer expected";
                            }
                            if (message.surrogateInfoType != null && message.hasOwnProperty("surrogateInfoType")) {
                                var error = $root.google.privacy.dlp.v2.InfoType.verify(message.surrogateInfoType);
                                if (error)
                                    return "surrogateInfoType." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CryptoReplaceFfxFpeConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig} CryptoReplaceFfxFpeConfig
                         */
                        CryptoReplaceFfxFpeConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig();
                            if (object.cryptoKey != null) {
                                if (typeof object.cryptoKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.cryptoKey: object expected");
                                message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.fromObject(object.cryptoKey);
                            }
                            if (object.context != null) {
                                if (typeof object.context !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.context: object expected");
                                message.context = $root.google.privacy.dlp.v2.FieldId.fromObject(object.context);
                            }
                            switch (object.commonAlphabet) {
                            case "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED":
                            case 0:
                                message.commonAlphabet = 0;
                                break;
                            case "NUMERIC":
                            case 1:
                                message.commonAlphabet = 1;
                                break;
                            case "HEXADECIMAL":
                            case 2:
                                message.commonAlphabet = 2;
                                break;
                            case "UPPER_CASE_ALPHA_NUMERIC":
                            case 3:
                                message.commonAlphabet = 3;
                                break;
                            case "ALPHA_NUMERIC":
                            case 4:
                                message.commonAlphabet = 4;
                                break;
                            }
                            if (object.customAlphabet != null)
                                message.customAlphabet = String(object.customAlphabet);
                            if (object.radix != null)
                                message.radix = object.radix | 0;
                            if (object.surrogateInfoType != null) {
                                if (typeof object.surrogateInfoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.surrogateInfoType: object expected");
                                message.surrogateInfoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.surrogateInfoType);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CryptoReplaceFfxFpeConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig} message CryptoReplaceFfxFpeConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CryptoReplaceFfxFpeConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.cryptoKey = null;
                                object.context = null;
                                object.surrogateInfoType = null;
                            }
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey"))
                                object.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.toObject(message.cryptoKey, options);
                            if (message.context != null && message.hasOwnProperty("context"))
                                object.context = $root.google.privacy.dlp.v2.FieldId.toObject(message.context, options);
                            if (message.commonAlphabet != null && message.hasOwnProperty("commonAlphabet")) {
                                object.commonAlphabet = options.enums === String ? $root.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet[message.commonAlphabet] : message.commonAlphabet;
                                if (options.oneofs)
                                    object.alphabet = "commonAlphabet";
                            }
                            if (message.customAlphabet != null && message.hasOwnProperty("customAlphabet")) {
                                object.customAlphabet = message.customAlphabet;
                                if (options.oneofs)
                                    object.alphabet = "customAlphabet";
                            }
                            if (message.radix != null && message.hasOwnProperty("radix")) {
                                object.radix = message.radix;
                                if (options.oneofs)
                                    object.alphabet = "radix";
                            }
                            if (message.surrogateInfoType != null && message.hasOwnProperty("surrogateInfoType"))
                                object.surrogateInfoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.surrogateInfoType, options);
                            return object;
                        };
    
                        /**
                         * Converts this CryptoReplaceFfxFpeConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CryptoReplaceFfxFpeConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * FfxCommonNativeAlphabet enum.
                         * @name google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet
                         * @enum {number}
                         * @property {number} FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED=0 FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED value
                         * @property {number} NUMERIC=1 NUMERIC value
                         * @property {number} HEXADECIMAL=2 HEXADECIMAL value
                         * @property {number} UPPER_CASE_ALPHA_NUMERIC=3 UPPER_CASE_ALPHA_NUMERIC value
                         * @property {number} ALPHA_NUMERIC=4 ALPHA_NUMERIC value
                         */
                        CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "NUMERIC"] = 1;
                            values[valuesById[2] = "HEXADECIMAL"] = 2;
                            values[valuesById[3] = "UPPER_CASE_ALPHA_NUMERIC"] = 3;
                            values[valuesById[4] = "ALPHA_NUMERIC"] = 4;
                            return values;
                        })();
    
                        return CryptoReplaceFfxFpeConfig;
                    })();
    
                    v2.CryptoKey = (function() {
    
                        /**
                         * Properties of a CryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICryptoKey
                         * @property {google.privacy.dlp.v2.ITransientCryptoKey|null} [transient] CryptoKey transient
                         * @property {google.privacy.dlp.v2.IUnwrappedCryptoKey|null} [unwrapped] CryptoKey unwrapped
                         * @property {google.privacy.dlp.v2.IKmsWrappedCryptoKey|null} [kmsWrapped] CryptoKey kmsWrapped
                         */
    
                        /**
                         * Constructs a new CryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CryptoKey.
                         * @implements ICryptoKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICryptoKey=} [properties] Properties to set
                         */
                        function CryptoKey(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CryptoKey transient.
                         * @member {google.privacy.dlp.v2.ITransientCryptoKey|null|undefined} transient
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @instance
                         */
                        CryptoKey.prototype.transient = null;
    
                        /**
                         * CryptoKey unwrapped.
                         * @member {google.privacy.dlp.v2.IUnwrappedCryptoKey|null|undefined} unwrapped
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @instance
                         */
                        CryptoKey.prototype.unwrapped = null;
    
                        /**
                         * CryptoKey kmsWrapped.
                         * @member {google.privacy.dlp.v2.IKmsWrappedCryptoKey|null|undefined} kmsWrapped
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @instance
                         */
                        CryptoKey.prototype.kmsWrapped = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * CryptoKey source.
                         * @member {"transient"|"unwrapped"|"kmsWrapped"|undefined} source
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @instance
                         */
                        Object.defineProperty(CryptoKey.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["transient", "unwrapped", "kmsWrapped"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new CryptoKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CryptoKey} CryptoKey instance
                         */
                        CryptoKey.create = function create(properties) {
                            return new CryptoKey(properties);
                        };
    
                        /**
                         * Encodes the specified CryptoKey message. Does not implicitly {@link google.privacy.dlp.v2.CryptoKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoKey} message CryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transient != null && Object.hasOwnProperty.call(message, "transient"))
                                $root.google.privacy.dlp.v2.TransientCryptoKey.encode(message.transient, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.unwrapped != null && Object.hasOwnProperty.call(message, "unwrapped"))
                                $root.google.privacy.dlp.v2.UnwrappedCryptoKey.encode(message.unwrapped, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.kmsWrapped != null && Object.hasOwnProperty.call(message, "kmsWrapped"))
                                $root.google.privacy.dlp.v2.KmsWrappedCryptoKey.encode(message.kmsWrapped, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CryptoKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CryptoKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.ICryptoKey} message CryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CryptoKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CryptoKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CryptoKey} CryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CryptoKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.transient = $root.google.privacy.dlp.v2.TransientCryptoKey.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.unwrapped = $root.google.privacy.dlp.v2.UnwrappedCryptoKey.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.kmsWrapped = $root.google.privacy.dlp.v2.KmsWrappedCryptoKey.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CryptoKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CryptoKey} CryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CryptoKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CryptoKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CryptoKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.transient != null && message.hasOwnProperty("transient")) {
                                properties.source = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.TransientCryptoKey.verify(message.transient);
                                    if (error)
                                        return "transient." + error;
                                }
                            }
                            if (message.unwrapped != null && message.hasOwnProperty("unwrapped")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.UnwrappedCryptoKey.verify(message.unwrapped);
                                    if (error)
                                        return "unwrapped." + error;
                                }
                            }
                            if (message.kmsWrapped != null && message.hasOwnProperty("kmsWrapped")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.KmsWrappedCryptoKey.verify(message.kmsWrapped);
                                    if (error)
                                        return "kmsWrapped." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CryptoKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CryptoKey} CryptoKey
                         */
                        CryptoKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CryptoKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CryptoKey();
                            if (object.transient != null) {
                                if (typeof object.transient !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoKey.transient: object expected");
                                message.transient = $root.google.privacy.dlp.v2.TransientCryptoKey.fromObject(object.transient);
                            }
                            if (object.unwrapped != null) {
                                if (typeof object.unwrapped !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoKey.unwrapped: object expected");
                                message.unwrapped = $root.google.privacy.dlp.v2.UnwrappedCryptoKey.fromObject(object.unwrapped);
                            }
                            if (object.kmsWrapped != null) {
                                if (typeof object.kmsWrapped !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CryptoKey.kmsWrapped: object expected");
                                message.kmsWrapped = $root.google.privacy.dlp.v2.KmsWrappedCryptoKey.fromObject(object.kmsWrapped);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CryptoKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.CryptoKey} message CryptoKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CryptoKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.transient != null && message.hasOwnProperty("transient")) {
                                object.transient = $root.google.privacy.dlp.v2.TransientCryptoKey.toObject(message.transient, options);
                                if (options.oneofs)
                                    object.source = "transient";
                            }
                            if (message.unwrapped != null && message.hasOwnProperty("unwrapped")) {
                                object.unwrapped = $root.google.privacy.dlp.v2.UnwrappedCryptoKey.toObject(message.unwrapped, options);
                                if (options.oneofs)
                                    object.source = "unwrapped";
                            }
                            if (message.kmsWrapped != null && message.hasOwnProperty("kmsWrapped")) {
                                object.kmsWrapped = $root.google.privacy.dlp.v2.KmsWrappedCryptoKey.toObject(message.kmsWrapped, options);
                                if (options.oneofs)
                                    object.source = "kmsWrapped";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CryptoKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CryptoKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CryptoKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CryptoKey;
                    })();
    
                    v2.TransientCryptoKey = (function() {
    
                        /**
                         * Properties of a TransientCryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITransientCryptoKey
                         * @property {string|null} [name] TransientCryptoKey name
                         */
    
                        /**
                         * Constructs a new TransientCryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TransientCryptoKey.
                         * @implements ITransientCryptoKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITransientCryptoKey=} [properties] Properties to set
                         */
                        function TransientCryptoKey(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransientCryptoKey name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @instance
                         */
                        TransientCryptoKey.prototype.name = "";
    
                        /**
                         * Creates a new TransientCryptoKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.ITransientCryptoKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TransientCryptoKey} TransientCryptoKey instance
                         */
                        TransientCryptoKey.create = function create(properties) {
                            return new TransientCryptoKey(properties);
                        };
    
                        /**
                         * Encodes the specified TransientCryptoKey message. Does not implicitly {@link google.privacy.dlp.v2.TransientCryptoKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.ITransientCryptoKey} message TransientCryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransientCryptoKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransientCryptoKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransientCryptoKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.ITransientCryptoKey} message TransientCryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransientCryptoKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransientCryptoKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TransientCryptoKey} TransientCryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransientCryptoKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransientCryptoKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransientCryptoKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TransientCryptoKey} TransientCryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransientCryptoKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransientCryptoKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransientCryptoKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TransientCryptoKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TransientCryptoKey} TransientCryptoKey
                         */
                        TransientCryptoKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TransientCryptoKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TransientCryptoKey();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransientCryptoKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.TransientCryptoKey} message TransientCryptoKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransientCryptoKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this TransientCryptoKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TransientCryptoKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransientCryptoKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return TransientCryptoKey;
                    })();
    
                    v2.UnwrappedCryptoKey = (function() {
    
                        /**
                         * Properties of an UnwrappedCryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface IUnwrappedCryptoKey
                         * @property {Uint8Array|null} [key] UnwrappedCryptoKey key
                         */
    
                        /**
                         * Constructs a new UnwrappedCryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an UnwrappedCryptoKey.
                         * @implements IUnwrappedCryptoKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.IUnwrappedCryptoKey=} [properties] Properties to set
                         */
                        function UnwrappedCryptoKey(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UnwrappedCryptoKey key.
                         * @member {Uint8Array} key
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @instance
                         */
                        UnwrappedCryptoKey.prototype.key = $util.newBuffer([]);
    
                        /**
                         * Creates a new UnwrappedCryptoKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.IUnwrappedCryptoKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.UnwrappedCryptoKey} UnwrappedCryptoKey instance
                         */
                        UnwrappedCryptoKey.create = function create(properties) {
                            return new UnwrappedCryptoKey(properties);
                        };
    
                        /**
                         * Encodes the specified UnwrappedCryptoKey message. Does not implicitly {@link google.privacy.dlp.v2.UnwrappedCryptoKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.IUnwrappedCryptoKey} message UnwrappedCryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UnwrappedCryptoKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UnwrappedCryptoKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.UnwrappedCryptoKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.IUnwrappedCryptoKey} message UnwrappedCryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UnwrappedCryptoKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UnwrappedCryptoKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.UnwrappedCryptoKey} UnwrappedCryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UnwrappedCryptoKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.UnwrappedCryptoKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = reader.bytes();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UnwrappedCryptoKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.UnwrappedCryptoKey} UnwrappedCryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UnwrappedCryptoKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UnwrappedCryptoKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UnwrappedCryptoKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                    return "key: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates an UnwrappedCryptoKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.UnwrappedCryptoKey} UnwrappedCryptoKey
                         */
                        UnwrappedCryptoKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.UnwrappedCryptoKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.UnwrappedCryptoKey();
                            if (object.key != null)
                                if (typeof object.key === "string")
                                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                                else if (object.key.length)
                                    message.key = object.key;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UnwrappedCryptoKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.UnwrappedCryptoKey} message UnwrappedCryptoKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UnwrappedCryptoKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                if (options.bytes === String)
                                    object.key = "";
                                else {
                                    object.key = [];
                                    if (options.bytes !== Array)
                                        object.key = $util.newBuffer(object.key);
                                }
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                            return object;
                        };
    
                        /**
                         * Converts this UnwrappedCryptoKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.UnwrappedCryptoKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UnwrappedCryptoKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UnwrappedCryptoKey;
                    })();
    
                    v2.KmsWrappedCryptoKey = (function() {
    
                        /**
                         * Properties of a KmsWrappedCryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface IKmsWrappedCryptoKey
                         * @property {Uint8Array|null} [wrappedKey] KmsWrappedCryptoKey wrappedKey
                         * @property {string|null} [cryptoKeyName] KmsWrappedCryptoKey cryptoKeyName
                         */
    
                        /**
                         * Constructs a new KmsWrappedCryptoKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a KmsWrappedCryptoKey.
                         * @implements IKmsWrappedCryptoKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.IKmsWrappedCryptoKey=} [properties] Properties to set
                         */
                        function KmsWrappedCryptoKey(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * KmsWrappedCryptoKey wrappedKey.
                         * @member {Uint8Array} wrappedKey
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @instance
                         */
                        KmsWrappedCryptoKey.prototype.wrappedKey = $util.newBuffer([]);
    
                        /**
                         * KmsWrappedCryptoKey cryptoKeyName.
                         * @member {string} cryptoKeyName
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @instance
                         */
                        KmsWrappedCryptoKey.prototype.cryptoKeyName = "";
    
                        /**
                         * Creates a new KmsWrappedCryptoKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.IKmsWrappedCryptoKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.KmsWrappedCryptoKey} KmsWrappedCryptoKey instance
                         */
                        KmsWrappedCryptoKey.create = function create(properties) {
                            return new KmsWrappedCryptoKey(properties);
                        };
    
                        /**
                         * Encodes the specified KmsWrappedCryptoKey message. Does not implicitly {@link google.privacy.dlp.v2.KmsWrappedCryptoKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.IKmsWrappedCryptoKey} message KmsWrappedCryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KmsWrappedCryptoKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.wrappedKey != null && Object.hasOwnProperty.call(message, "wrappedKey"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.wrappedKey);
                            if (message.cryptoKeyName != null && Object.hasOwnProperty.call(message, "cryptoKeyName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.cryptoKeyName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified KmsWrappedCryptoKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.KmsWrappedCryptoKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.IKmsWrappedCryptoKey} message KmsWrappedCryptoKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KmsWrappedCryptoKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a KmsWrappedCryptoKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.KmsWrappedCryptoKey} KmsWrappedCryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KmsWrappedCryptoKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.KmsWrappedCryptoKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.wrappedKey = reader.bytes();
                                    break;
                                case 2:
                                    message.cryptoKeyName = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a KmsWrappedCryptoKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.KmsWrappedCryptoKey} KmsWrappedCryptoKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KmsWrappedCryptoKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a KmsWrappedCryptoKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        KmsWrappedCryptoKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.wrappedKey != null && message.hasOwnProperty("wrappedKey"))
                                if (!(message.wrappedKey && typeof message.wrappedKey.length === "number" || $util.isString(message.wrappedKey)))
                                    return "wrappedKey: buffer expected";
                            if (message.cryptoKeyName != null && message.hasOwnProperty("cryptoKeyName"))
                                if (!$util.isString(message.cryptoKeyName))
                                    return "cryptoKeyName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a KmsWrappedCryptoKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.KmsWrappedCryptoKey} KmsWrappedCryptoKey
                         */
                        KmsWrappedCryptoKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.KmsWrappedCryptoKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.KmsWrappedCryptoKey();
                            if (object.wrappedKey != null)
                                if (typeof object.wrappedKey === "string")
                                    $util.base64.decode(object.wrappedKey, message.wrappedKey = $util.newBuffer($util.base64.length(object.wrappedKey)), 0);
                                else if (object.wrappedKey.length)
                                    message.wrappedKey = object.wrappedKey;
                            if (object.cryptoKeyName != null)
                                message.cryptoKeyName = String(object.cryptoKeyName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a KmsWrappedCryptoKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @static
                         * @param {google.privacy.dlp.v2.KmsWrappedCryptoKey} message KmsWrappedCryptoKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        KmsWrappedCryptoKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.wrappedKey = "";
                                else {
                                    object.wrappedKey = [];
                                    if (options.bytes !== Array)
                                        object.wrappedKey = $util.newBuffer(object.wrappedKey);
                                }
                                object.cryptoKeyName = "";
                            }
                            if (message.wrappedKey != null && message.hasOwnProperty("wrappedKey"))
                                object.wrappedKey = options.bytes === String ? $util.base64.encode(message.wrappedKey, 0, message.wrappedKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.wrappedKey) : message.wrappedKey;
                            if (message.cryptoKeyName != null && message.hasOwnProperty("cryptoKeyName"))
                                object.cryptoKeyName = message.cryptoKeyName;
                            return object;
                        };
    
                        /**
                         * Converts this KmsWrappedCryptoKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.KmsWrappedCryptoKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        KmsWrappedCryptoKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return KmsWrappedCryptoKey;
                    })();
    
                    v2.DateShiftConfig = (function() {
    
                        /**
                         * Properties of a DateShiftConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDateShiftConfig
                         * @property {number|null} [upperBoundDays] DateShiftConfig upperBoundDays
                         * @property {number|null} [lowerBoundDays] DateShiftConfig lowerBoundDays
                         * @property {google.privacy.dlp.v2.IFieldId|null} [context] DateShiftConfig context
                         * @property {google.privacy.dlp.v2.ICryptoKey|null} [cryptoKey] DateShiftConfig cryptoKey
                         */
    
                        /**
                         * Constructs a new DateShiftConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DateShiftConfig.
                         * @implements IDateShiftConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDateShiftConfig=} [properties] Properties to set
                         */
                        function DateShiftConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DateShiftConfig upperBoundDays.
                         * @member {number} upperBoundDays
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @instance
                         */
                        DateShiftConfig.prototype.upperBoundDays = 0;
    
                        /**
                         * DateShiftConfig lowerBoundDays.
                         * @member {number} lowerBoundDays
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @instance
                         */
                        DateShiftConfig.prototype.lowerBoundDays = 0;
    
                        /**
                         * DateShiftConfig context.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} context
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @instance
                         */
                        DateShiftConfig.prototype.context = null;
    
                        /**
                         * DateShiftConfig cryptoKey.
                         * @member {google.privacy.dlp.v2.ICryptoKey|null|undefined} cryptoKey
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @instance
                         */
                        DateShiftConfig.prototype.cryptoKey = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * DateShiftConfig method.
                         * @member {"cryptoKey"|undefined} method
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @instance
                         */
                        Object.defineProperty(DateShiftConfig.prototype, "method", {
                            get: $util.oneOfGetter($oneOfFields = ["cryptoKey"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new DateShiftConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IDateShiftConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DateShiftConfig} DateShiftConfig instance
                         */
                        DateShiftConfig.create = function create(properties) {
                            return new DateShiftConfig(properties);
                        };
    
                        /**
                         * Encodes the specified DateShiftConfig message. Does not implicitly {@link google.privacy.dlp.v2.DateShiftConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IDateShiftConfig} message DateShiftConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DateShiftConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.upperBoundDays != null && Object.hasOwnProperty.call(message, "upperBoundDays"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.upperBoundDays);
                            if (message.lowerBoundDays != null && Object.hasOwnProperty.call(message, "lowerBoundDays"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.lowerBoundDays);
                            if (message.context != null && Object.hasOwnProperty.call(message, "context"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.context, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.cryptoKey != null && Object.hasOwnProperty.call(message, "cryptoKey"))
                                $root.google.privacy.dlp.v2.CryptoKey.encode(message.cryptoKey, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DateShiftConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DateShiftConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IDateShiftConfig} message DateShiftConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DateShiftConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DateShiftConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DateShiftConfig} DateShiftConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DateShiftConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DateShiftConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.upperBoundDays = reader.int32();
                                    break;
                                case 2:
                                    message.lowerBoundDays = reader.int32();
                                    break;
                                case 3:
                                    message.context = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DateShiftConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DateShiftConfig} DateShiftConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DateShiftConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DateShiftConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DateShiftConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.upperBoundDays != null && message.hasOwnProperty("upperBoundDays"))
                                if (!$util.isInteger(message.upperBoundDays))
                                    return "upperBoundDays: integer expected";
                            if (message.lowerBoundDays != null && message.hasOwnProperty("lowerBoundDays"))
                                if (!$util.isInteger(message.lowerBoundDays))
                                    return "lowerBoundDays: integer expected";
                            if (message.context != null && message.hasOwnProperty("context")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.context);
                                if (error)
                                    return "context." + error;
                            }
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey")) {
                                properties.method = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CryptoKey.verify(message.cryptoKey);
                                    if (error)
                                        return "cryptoKey." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DateShiftConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DateShiftConfig} DateShiftConfig
                         */
                        DateShiftConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DateShiftConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DateShiftConfig();
                            if (object.upperBoundDays != null)
                                message.upperBoundDays = object.upperBoundDays | 0;
                            if (object.lowerBoundDays != null)
                                message.lowerBoundDays = object.lowerBoundDays | 0;
                            if (object.context != null) {
                                if (typeof object.context !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DateShiftConfig.context: object expected");
                                message.context = $root.google.privacy.dlp.v2.FieldId.fromObject(object.context);
                            }
                            if (object.cryptoKey != null) {
                                if (typeof object.cryptoKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DateShiftConfig.cryptoKey: object expected");
                                message.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.fromObject(object.cryptoKey);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DateShiftConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @static
                         * @param {google.privacy.dlp.v2.DateShiftConfig} message DateShiftConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DateShiftConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.upperBoundDays = 0;
                                object.lowerBoundDays = 0;
                                object.context = null;
                            }
                            if (message.upperBoundDays != null && message.hasOwnProperty("upperBoundDays"))
                                object.upperBoundDays = message.upperBoundDays;
                            if (message.lowerBoundDays != null && message.hasOwnProperty("lowerBoundDays"))
                                object.lowerBoundDays = message.lowerBoundDays;
                            if (message.context != null && message.hasOwnProperty("context"))
                                object.context = $root.google.privacy.dlp.v2.FieldId.toObject(message.context, options);
                            if (message.cryptoKey != null && message.hasOwnProperty("cryptoKey")) {
                                object.cryptoKey = $root.google.privacy.dlp.v2.CryptoKey.toObject(message.cryptoKey, options);
                                if (options.oneofs)
                                    object.method = "cryptoKey";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this DateShiftConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DateShiftConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DateShiftConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DateShiftConfig;
                    })();
    
                    v2.InfoTypeTransformations = (function() {
    
                        /**
                         * Properties of an InfoTypeTransformations.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInfoTypeTransformations
                         * @property {Array.<google.privacy.dlp.v2.InfoTypeTransformations.IInfoTypeTransformation>|null} [transformations] InfoTypeTransformations transformations
                         */
    
                        /**
                         * Constructs a new InfoTypeTransformations.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InfoTypeTransformations.
                         * @implements IInfoTypeTransformations
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInfoTypeTransformations=} [properties] Properties to set
                         */
                        function InfoTypeTransformations(properties) {
                            this.transformations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InfoTypeTransformations transformations.
                         * @member {Array.<google.privacy.dlp.v2.InfoTypeTransformations.IInfoTypeTransformation>} transformations
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @instance
                         */
                        InfoTypeTransformations.prototype.transformations = $util.emptyArray;
    
                        /**
                         * Creates a new InfoTypeTransformations instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeTransformations=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InfoTypeTransformations} InfoTypeTransformations instance
                         */
                        InfoTypeTransformations.create = function create(properties) {
                            return new InfoTypeTransformations(properties);
                        };
    
                        /**
                         * Encodes the specified InfoTypeTransformations message. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeTransformations.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeTransformations} message InfoTypeTransformations message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoTypeTransformations.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transformations != null && message.transformations.length)
                                for (var i = 0; i < message.transformations.length; ++i)
                                    $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.encode(message.transformations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InfoTypeTransformations message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeTransformations.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoTypeTransformations} message InfoTypeTransformations message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoTypeTransformations.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InfoTypeTransformations message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InfoTypeTransformations} InfoTypeTransformations
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoTypeTransformations.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InfoTypeTransformations();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.transformations && message.transformations.length))
                                        message.transformations = [];
                                    message.transformations.push($root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InfoTypeTransformations message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InfoTypeTransformations} InfoTypeTransformations
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoTypeTransformations.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InfoTypeTransformations message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InfoTypeTransformations.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transformations != null && message.hasOwnProperty("transformations")) {
                                if (!Array.isArray(message.transformations))
                                    return "transformations: array expected";
                                for (var i = 0; i < message.transformations.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.verify(message.transformations[i]);
                                    if (error)
                                        return "transformations." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InfoTypeTransformations message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InfoTypeTransformations} InfoTypeTransformations
                         */
                        InfoTypeTransformations.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InfoTypeTransformations)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InfoTypeTransformations();
                            if (object.transformations) {
                                if (!Array.isArray(object.transformations))
                                    throw TypeError(".google.privacy.dlp.v2.InfoTypeTransformations.transformations: array expected");
                                message.transformations = [];
                                for (var i = 0; i < object.transformations.length; ++i) {
                                    if (typeof object.transformations[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InfoTypeTransformations.transformations: object expected");
                                    message.transformations[i] = $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.fromObject(object.transformations[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InfoTypeTransformations message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.InfoTypeTransformations} message InfoTypeTransformations
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InfoTypeTransformations.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.transformations = [];
                            if (message.transformations && message.transformations.length) {
                                object.transformations = [];
                                for (var j = 0; j < message.transformations.length; ++j)
                                    object.transformations[j] = $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.toObject(message.transformations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this InfoTypeTransformations to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InfoTypeTransformations.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        InfoTypeTransformations.InfoTypeTransformation = (function() {
    
                            /**
                             * Properties of an InfoTypeTransformation.
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                             * @interface IInfoTypeTransformation
                             * @property {Array.<google.privacy.dlp.v2.IInfoType>|null} [infoTypes] InfoTypeTransformation infoTypes
                             * @property {google.privacy.dlp.v2.IPrimitiveTransformation|null} [primitiveTransformation] InfoTypeTransformation primitiveTransformation
                             */
    
                            /**
                             * Constructs a new InfoTypeTransformation.
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations
                             * @classdesc Represents an InfoTypeTransformation.
                             * @implements IInfoTypeTransformation
                             * @constructor
                             * @param {google.privacy.dlp.v2.InfoTypeTransformations.IInfoTypeTransformation=} [properties] Properties to set
                             */
                            function InfoTypeTransformation(properties) {
                                this.infoTypes = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InfoTypeTransformation infoTypes.
                             * @member {Array.<google.privacy.dlp.v2.IInfoType>} infoTypes
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @instance
                             */
                            InfoTypeTransformation.prototype.infoTypes = $util.emptyArray;
    
                            /**
                             * InfoTypeTransformation primitiveTransformation.
                             * @member {google.privacy.dlp.v2.IPrimitiveTransformation|null|undefined} primitiveTransformation
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @instance
                             */
                            InfoTypeTransformation.prototype.primitiveTransformation = null;
    
                            /**
                             * Creates a new InfoTypeTransformation instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {google.privacy.dlp.v2.InfoTypeTransformations.IInfoTypeTransformation=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation} InfoTypeTransformation instance
                             */
                            InfoTypeTransformation.create = function create(properties) {
                                return new InfoTypeTransformation(properties);
                            };
    
                            /**
                             * Encodes the specified InfoTypeTransformation message. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {google.privacy.dlp.v2.InfoTypeTransformations.IInfoTypeTransformation} message InfoTypeTransformation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InfoTypeTransformation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.infoTypes != null && message.infoTypes.length)
                                    for (var i = 0; i < message.infoTypes.length; ++i)
                                        $root.google.privacy.dlp.v2.InfoType.encode(message.infoTypes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.primitiveTransformation != null && Object.hasOwnProperty.call(message, "primitiveTransformation"))
                                    $root.google.privacy.dlp.v2.PrimitiveTransformation.encode(message.primitiveTransformation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InfoTypeTransformation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {google.privacy.dlp.v2.InfoTypeTransformations.IInfoTypeTransformation} message InfoTypeTransformation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InfoTypeTransformation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InfoTypeTransformation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation} InfoTypeTransformation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InfoTypeTransformation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.infoTypes && message.infoTypes.length))
                                            message.infoTypes = [];
                                        message.infoTypes.push($root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.primitiveTransformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InfoTypeTransformation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation} InfoTypeTransformation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InfoTypeTransformation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InfoTypeTransformation message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InfoTypeTransformation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.infoTypes != null && message.hasOwnProperty("infoTypes")) {
                                    if (!Array.isArray(message.infoTypes))
                                        return "infoTypes: array expected";
                                    for (var i = 0; i < message.infoTypes.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoTypes[i]);
                                        if (error)
                                            return "infoTypes." + error;
                                    }
                                }
                                if (message.primitiveTransformation != null && message.hasOwnProperty("primitiveTransformation")) {
                                    var error = $root.google.privacy.dlp.v2.PrimitiveTransformation.verify(message.primitiveTransformation);
                                    if (error)
                                        return "primitiveTransformation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an InfoTypeTransformation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation} InfoTypeTransformation
                             */
                            InfoTypeTransformation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation();
                                if (object.infoTypes) {
                                    if (!Array.isArray(object.infoTypes))
                                        throw TypeError(".google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.infoTypes: array expected");
                                    message.infoTypes = [];
                                    for (var i = 0; i < object.infoTypes.length; ++i) {
                                        if (typeof object.infoTypes[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.infoTypes: object expected");
                                        message.infoTypes[i] = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoTypes[i]);
                                    }
                                }
                                if (object.primitiveTransformation != null) {
                                    if (typeof object.primitiveTransformation !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.primitiveTransformation: object expected");
                                    message.primitiveTransformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.fromObject(object.primitiveTransformation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InfoTypeTransformation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @static
                             * @param {google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation} message InfoTypeTransformation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InfoTypeTransformation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.infoTypes = [];
                                if (options.defaults)
                                    object.primitiveTransformation = null;
                                if (message.infoTypes && message.infoTypes.length) {
                                    object.infoTypes = [];
                                    for (var j = 0; j < message.infoTypes.length; ++j)
                                        object.infoTypes[j] = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoTypes[j], options);
                                }
                                if (message.primitiveTransformation != null && message.hasOwnProperty("primitiveTransformation"))
                                    object.primitiveTransformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.toObject(message.primitiveTransformation, options);
                                return object;
                            };
    
                            /**
                             * Converts this InfoTypeTransformation to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InfoTypeTransformation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return InfoTypeTransformation;
                        })();
    
                        return InfoTypeTransformations;
                    })();
    
                    v2.FieldTransformation = (function() {
    
                        /**
                         * Properties of a FieldTransformation.
                         * @memberof google.privacy.dlp.v2
                         * @interface IFieldTransformation
                         * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [fields] FieldTransformation fields
                         * @property {google.privacy.dlp.v2.IRecordCondition|null} [condition] FieldTransformation condition
                         * @property {google.privacy.dlp.v2.IPrimitiveTransformation|null} [primitiveTransformation] FieldTransformation primitiveTransformation
                         * @property {google.privacy.dlp.v2.IInfoTypeTransformations|null} [infoTypeTransformations] FieldTransformation infoTypeTransformations
                         */
    
                        /**
                         * Constructs a new FieldTransformation.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a FieldTransformation.
                         * @implements IFieldTransformation
                         * @constructor
                         * @param {google.privacy.dlp.v2.IFieldTransformation=} [properties] Properties to set
                         */
                        function FieldTransformation(properties) {
                            this.fields = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FieldTransformation fields.
                         * @member {Array.<google.privacy.dlp.v2.IFieldId>} fields
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @instance
                         */
                        FieldTransformation.prototype.fields = $util.emptyArray;
    
                        /**
                         * FieldTransformation condition.
                         * @member {google.privacy.dlp.v2.IRecordCondition|null|undefined} condition
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @instance
                         */
                        FieldTransformation.prototype.condition = null;
    
                        /**
                         * FieldTransformation primitiveTransformation.
                         * @member {google.privacy.dlp.v2.IPrimitiveTransformation|null|undefined} primitiveTransformation
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @instance
                         */
                        FieldTransformation.prototype.primitiveTransformation = null;
    
                        /**
                         * FieldTransformation infoTypeTransformations.
                         * @member {google.privacy.dlp.v2.IInfoTypeTransformations|null|undefined} infoTypeTransformations
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @instance
                         */
                        FieldTransformation.prototype.infoTypeTransformations = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * FieldTransformation transformation.
                         * @member {"primitiveTransformation"|"infoTypeTransformations"|undefined} transformation
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @instance
                         */
                        Object.defineProperty(FieldTransformation.prototype, "transformation", {
                            get: $util.oneOfGetter($oneOfFields = ["primitiveTransformation", "infoTypeTransformations"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new FieldTransformation instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.IFieldTransformation=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.FieldTransformation} FieldTransformation instance
                         */
                        FieldTransformation.create = function create(properties) {
                            return new FieldTransformation(properties);
                        };
    
                        /**
                         * Encodes the specified FieldTransformation message. Does not implicitly {@link google.privacy.dlp.v2.FieldTransformation.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.IFieldTransformation} message FieldTransformation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FieldTransformation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.fields != null && message.fields.length)
                                for (var i = 0; i < message.fields.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.fields[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                                $root.google.privacy.dlp.v2.RecordCondition.encode(message.condition, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.primitiveTransformation != null && Object.hasOwnProperty.call(message, "primitiveTransformation"))
                                $root.google.privacy.dlp.v2.PrimitiveTransformation.encode(message.primitiveTransformation, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.infoTypeTransformations != null && Object.hasOwnProperty.call(message, "infoTypeTransformations"))
                                $root.google.privacy.dlp.v2.InfoTypeTransformations.encode(message.infoTypeTransformations, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FieldTransformation message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.FieldTransformation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.IFieldTransformation} message FieldTransformation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FieldTransformation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FieldTransformation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.FieldTransformation} FieldTransformation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FieldTransformation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.FieldTransformation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.fields && message.fields.length))
                                        message.fields = [];
                                    message.fields.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                    break;
                                case 3:
                                    message.condition = $root.google.privacy.dlp.v2.RecordCondition.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.primitiveTransformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.infoTypeTransformations = $root.google.privacy.dlp.v2.InfoTypeTransformations.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FieldTransformation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.FieldTransformation} FieldTransformation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FieldTransformation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FieldTransformation message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FieldTransformation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.fields != null && message.hasOwnProperty("fields")) {
                                if (!Array.isArray(message.fields))
                                    return "fields: array expected";
                                for (var i = 0; i < message.fields.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.fields[i]);
                                    if (error)
                                        return "fields." + error;
                                }
                            }
                            if (message.condition != null && message.hasOwnProperty("condition")) {
                                var error = $root.google.privacy.dlp.v2.RecordCondition.verify(message.condition);
                                if (error)
                                    return "condition." + error;
                            }
                            if (message.primitiveTransformation != null && message.hasOwnProperty("primitiveTransformation")) {
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.PrimitiveTransformation.verify(message.primitiveTransformation);
                                    if (error)
                                        return "primitiveTransformation." + error;
                                }
                            }
                            if (message.infoTypeTransformations != null && message.hasOwnProperty("infoTypeTransformations")) {
                                if (properties.transformation === 1)
                                    return "transformation: multiple values";
                                properties.transformation = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.InfoTypeTransformations.verify(message.infoTypeTransformations);
                                    if (error)
                                        return "infoTypeTransformations." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FieldTransformation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.FieldTransformation} FieldTransformation
                         */
                        FieldTransformation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.FieldTransformation)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.FieldTransformation();
                            if (object.fields) {
                                if (!Array.isArray(object.fields))
                                    throw TypeError(".google.privacy.dlp.v2.FieldTransformation.fields: array expected");
                                message.fields = [];
                                for (var i = 0; i < object.fields.length; ++i) {
                                    if (typeof object.fields[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.FieldTransformation.fields: object expected");
                                    message.fields[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.fields[i]);
                                }
                            }
                            if (object.condition != null) {
                                if (typeof object.condition !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.FieldTransformation.condition: object expected");
                                message.condition = $root.google.privacy.dlp.v2.RecordCondition.fromObject(object.condition);
                            }
                            if (object.primitiveTransformation != null) {
                                if (typeof object.primitiveTransformation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.FieldTransformation.primitiveTransformation: object expected");
                                message.primitiveTransformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.fromObject(object.primitiveTransformation);
                            }
                            if (object.infoTypeTransformations != null) {
                                if (typeof object.infoTypeTransformations !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.FieldTransformation.infoTypeTransformations: object expected");
                                message.infoTypeTransformations = $root.google.privacy.dlp.v2.InfoTypeTransformations.fromObject(object.infoTypeTransformations);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FieldTransformation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @static
                         * @param {google.privacy.dlp.v2.FieldTransformation} message FieldTransformation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FieldTransformation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.fields = [];
                            if (options.defaults)
                                object.condition = null;
                            if (message.fields && message.fields.length) {
                                object.fields = [];
                                for (var j = 0; j < message.fields.length; ++j)
                                    object.fields[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.fields[j], options);
                            }
                            if (message.condition != null && message.hasOwnProperty("condition"))
                                object.condition = $root.google.privacy.dlp.v2.RecordCondition.toObject(message.condition, options);
                            if (message.primitiveTransformation != null && message.hasOwnProperty("primitiveTransformation")) {
                                object.primitiveTransformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.toObject(message.primitiveTransformation, options);
                                if (options.oneofs)
                                    object.transformation = "primitiveTransformation";
                            }
                            if (message.infoTypeTransformations != null && message.hasOwnProperty("infoTypeTransformations")) {
                                object.infoTypeTransformations = $root.google.privacy.dlp.v2.InfoTypeTransformations.toObject(message.infoTypeTransformations, options);
                                if (options.oneofs)
                                    object.transformation = "infoTypeTransformations";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this FieldTransformation to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.FieldTransformation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FieldTransformation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return FieldTransformation;
                    })();
    
                    v2.RecordTransformations = (function() {
    
                        /**
                         * Properties of a RecordTransformations.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRecordTransformations
                         * @property {Array.<google.privacy.dlp.v2.IFieldTransformation>|null} [fieldTransformations] RecordTransformations fieldTransformations
                         * @property {Array.<google.privacy.dlp.v2.IRecordSuppression>|null} [recordSuppressions] RecordTransformations recordSuppressions
                         */
    
                        /**
                         * Constructs a new RecordTransformations.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RecordTransformations.
                         * @implements IRecordTransformations
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRecordTransformations=} [properties] Properties to set
                         */
                        function RecordTransformations(properties) {
                            this.fieldTransformations = [];
                            this.recordSuppressions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RecordTransformations fieldTransformations.
                         * @member {Array.<google.privacy.dlp.v2.IFieldTransformation>} fieldTransformations
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @instance
                         */
                        RecordTransformations.prototype.fieldTransformations = $util.emptyArray;
    
                        /**
                         * RecordTransformations recordSuppressions.
                         * @member {Array.<google.privacy.dlp.v2.IRecordSuppression>} recordSuppressions
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @instance
                         */
                        RecordTransformations.prototype.recordSuppressions = $util.emptyArray;
    
                        /**
                         * Creates a new RecordTransformations instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordTransformations=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RecordTransformations} RecordTransformations instance
                         */
                        RecordTransformations.create = function create(properties) {
                            return new RecordTransformations(properties);
                        };
    
                        /**
                         * Encodes the specified RecordTransformations message. Does not implicitly {@link google.privacy.dlp.v2.RecordTransformations.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordTransformations} message RecordTransformations message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordTransformations.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.fieldTransformations != null && message.fieldTransformations.length)
                                for (var i = 0; i < message.fieldTransformations.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldTransformation.encode(message.fieldTransformations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.recordSuppressions != null && message.recordSuppressions.length)
                                for (var i = 0; i < message.recordSuppressions.length; ++i)
                                    $root.google.privacy.dlp.v2.RecordSuppression.encode(message.recordSuppressions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RecordTransformations message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordTransformations.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordTransformations} message RecordTransformations message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordTransformations.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RecordTransformations message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RecordTransformations} RecordTransformations
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordTransformations.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordTransformations();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.fieldTransformations && message.fieldTransformations.length))
                                        message.fieldTransformations = [];
                                    message.fieldTransformations.push($root.google.privacy.dlp.v2.FieldTransformation.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    if (!(message.recordSuppressions && message.recordSuppressions.length))
                                        message.recordSuppressions = [];
                                    message.recordSuppressions.push($root.google.privacy.dlp.v2.RecordSuppression.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RecordTransformations message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RecordTransformations} RecordTransformations
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordTransformations.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RecordTransformations message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RecordTransformations.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.fieldTransformations != null && message.hasOwnProperty("fieldTransformations")) {
                                if (!Array.isArray(message.fieldTransformations))
                                    return "fieldTransformations: array expected";
                                for (var i = 0; i < message.fieldTransformations.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldTransformation.verify(message.fieldTransformations[i]);
                                    if (error)
                                        return "fieldTransformations." + error;
                                }
                            }
                            if (message.recordSuppressions != null && message.hasOwnProperty("recordSuppressions")) {
                                if (!Array.isArray(message.recordSuppressions))
                                    return "recordSuppressions: array expected";
                                for (var i = 0; i < message.recordSuppressions.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.RecordSuppression.verify(message.recordSuppressions[i]);
                                    if (error)
                                        return "recordSuppressions." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RecordTransformations message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RecordTransformations} RecordTransformations
                         */
                        RecordTransformations.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RecordTransformations)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RecordTransformations();
                            if (object.fieldTransformations) {
                                if (!Array.isArray(object.fieldTransformations))
                                    throw TypeError(".google.privacy.dlp.v2.RecordTransformations.fieldTransformations: array expected");
                                message.fieldTransformations = [];
                                for (var i = 0; i < object.fieldTransformations.length; ++i) {
                                    if (typeof object.fieldTransformations[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RecordTransformations.fieldTransformations: object expected");
                                    message.fieldTransformations[i] = $root.google.privacy.dlp.v2.FieldTransformation.fromObject(object.fieldTransformations[i]);
                                }
                            }
                            if (object.recordSuppressions) {
                                if (!Array.isArray(object.recordSuppressions))
                                    throw TypeError(".google.privacy.dlp.v2.RecordTransformations.recordSuppressions: array expected");
                                message.recordSuppressions = [];
                                for (var i = 0; i < object.recordSuppressions.length; ++i) {
                                    if (typeof object.recordSuppressions[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RecordTransformations.recordSuppressions: object expected");
                                    message.recordSuppressions[i] = $root.google.privacy.dlp.v2.RecordSuppression.fromObject(object.recordSuppressions[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RecordTransformations message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @static
                         * @param {google.privacy.dlp.v2.RecordTransformations} message RecordTransformations
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RecordTransformations.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.fieldTransformations = [];
                                object.recordSuppressions = [];
                            }
                            if (message.fieldTransformations && message.fieldTransformations.length) {
                                object.fieldTransformations = [];
                                for (var j = 0; j < message.fieldTransformations.length; ++j)
                                    object.fieldTransformations[j] = $root.google.privacy.dlp.v2.FieldTransformation.toObject(message.fieldTransformations[j], options);
                            }
                            if (message.recordSuppressions && message.recordSuppressions.length) {
                                object.recordSuppressions = [];
                                for (var j = 0; j < message.recordSuppressions.length; ++j)
                                    object.recordSuppressions[j] = $root.google.privacy.dlp.v2.RecordSuppression.toObject(message.recordSuppressions[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this RecordTransformations to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RecordTransformations
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RecordTransformations.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RecordTransformations;
                    })();
    
                    v2.RecordSuppression = (function() {
    
                        /**
                         * Properties of a RecordSuppression.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRecordSuppression
                         * @property {google.privacy.dlp.v2.IRecordCondition|null} [condition] RecordSuppression condition
                         */
    
                        /**
                         * Constructs a new RecordSuppression.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RecordSuppression.
                         * @implements IRecordSuppression
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRecordSuppression=} [properties] Properties to set
                         */
                        function RecordSuppression(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RecordSuppression condition.
                         * @member {google.privacy.dlp.v2.IRecordCondition|null|undefined} condition
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @instance
                         */
                        RecordSuppression.prototype.condition = null;
    
                        /**
                         * Creates a new RecordSuppression instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordSuppression=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RecordSuppression} RecordSuppression instance
                         */
                        RecordSuppression.create = function create(properties) {
                            return new RecordSuppression(properties);
                        };
    
                        /**
                         * Encodes the specified RecordSuppression message. Does not implicitly {@link google.privacy.dlp.v2.RecordSuppression.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordSuppression} message RecordSuppression message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordSuppression.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                                $root.google.privacy.dlp.v2.RecordCondition.encode(message.condition, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RecordSuppression message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordSuppression.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordSuppression} message RecordSuppression message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordSuppression.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RecordSuppression message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RecordSuppression} RecordSuppression
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordSuppression.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordSuppression();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.condition = $root.google.privacy.dlp.v2.RecordCondition.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RecordSuppression message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RecordSuppression} RecordSuppression
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordSuppression.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RecordSuppression message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RecordSuppression.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.condition != null && message.hasOwnProperty("condition")) {
                                var error = $root.google.privacy.dlp.v2.RecordCondition.verify(message.condition);
                                if (error)
                                    return "condition." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RecordSuppression message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RecordSuppression} RecordSuppression
                         */
                        RecordSuppression.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RecordSuppression)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RecordSuppression();
                            if (object.condition != null) {
                                if (typeof object.condition !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordSuppression.condition: object expected");
                                message.condition = $root.google.privacy.dlp.v2.RecordCondition.fromObject(object.condition);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RecordSuppression message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @static
                         * @param {google.privacy.dlp.v2.RecordSuppression} message RecordSuppression
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RecordSuppression.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.condition = null;
                            if (message.condition != null && message.hasOwnProperty("condition"))
                                object.condition = $root.google.privacy.dlp.v2.RecordCondition.toObject(message.condition, options);
                            return object;
                        };
    
                        /**
                         * Converts this RecordSuppression to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RecordSuppression
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RecordSuppression.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RecordSuppression;
                    })();
    
                    v2.RecordCondition = (function() {
    
                        /**
                         * Properties of a RecordCondition.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRecordCondition
                         * @property {google.privacy.dlp.v2.RecordCondition.IExpressions|null} [expressions] RecordCondition expressions
                         */
    
                        /**
                         * Constructs a new RecordCondition.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RecordCondition.
                         * @implements IRecordCondition
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRecordCondition=} [properties] Properties to set
                         */
                        function RecordCondition(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RecordCondition expressions.
                         * @member {google.privacy.dlp.v2.RecordCondition.IExpressions|null|undefined} expressions
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @instance
                         */
                        RecordCondition.prototype.expressions = null;
    
                        /**
                         * Creates a new RecordCondition instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordCondition=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RecordCondition} RecordCondition instance
                         */
                        RecordCondition.create = function create(properties) {
                            return new RecordCondition(properties);
                        };
    
                        /**
                         * Encodes the specified RecordCondition message. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordCondition} message RecordCondition message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordCondition.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.expressions != null && Object.hasOwnProperty.call(message, "expressions"))
                                $root.google.privacy.dlp.v2.RecordCondition.Expressions.encode(message.expressions, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RecordCondition message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordCondition} message RecordCondition message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordCondition.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RecordCondition message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RecordCondition} RecordCondition
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordCondition.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordCondition();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3:
                                    message.expressions = $root.google.privacy.dlp.v2.RecordCondition.Expressions.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RecordCondition message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RecordCondition} RecordCondition
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordCondition.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RecordCondition message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RecordCondition.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.expressions != null && message.hasOwnProperty("expressions")) {
                                var error = $root.google.privacy.dlp.v2.RecordCondition.Expressions.verify(message.expressions);
                                if (error)
                                    return "expressions." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RecordCondition message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RecordCondition} RecordCondition
                         */
                        RecordCondition.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RecordCondition)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RecordCondition();
                            if (object.expressions != null) {
                                if (typeof object.expressions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordCondition.expressions: object expected");
                                message.expressions = $root.google.privacy.dlp.v2.RecordCondition.Expressions.fromObject(object.expressions);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RecordCondition message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @static
                         * @param {google.privacy.dlp.v2.RecordCondition} message RecordCondition
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RecordCondition.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.expressions = null;
                            if (message.expressions != null && message.hasOwnProperty("expressions"))
                                object.expressions = $root.google.privacy.dlp.v2.RecordCondition.Expressions.toObject(message.expressions, options);
                            return object;
                        };
    
                        /**
                         * Converts this RecordCondition to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RecordCondition
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RecordCondition.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        RecordCondition.Condition = (function() {
    
                            /**
                             * Properties of a Condition.
                             * @memberof google.privacy.dlp.v2.RecordCondition
                             * @interface ICondition
                             * @property {google.privacy.dlp.v2.IFieldId|null} [field] Condition field
                             * @property {google.privacy.dlp.v2.RelationalOperator|null} [operator] Condition operator
                             * @property {google.privacy.dlp.v2.IValue|null} [value] Condition value
                             */
    
                            /**
                             * Constructs a new Condition.
                             * @memberof google.privacy.dlp.v2.RecordCondition
                             * @classdesc Represents a Condition.
                             * @implements ICondition
                             * @constructor
                             * @param {google.privacy.dlp.v2.RecordCondition.ICondition=} [properties] Properties to set
                             */
                            function Condition(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Condition field.
                             * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @instance
                             */
                            Condition.prototype.field = null;
    
                            /**
                             * Condition operator.
                             * @member {google.privacy.dlp.v2.RelationalOperator} operator
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @instance
                             */
                            Condition.prototype.operator = 0;
    
                            /**
                             * Condition value.
                             * @member {google.privacy.dlp.v2.IValue|null|undefined} value
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @instance
                             */
                            Condition.prototype.value = null;
    
                            /**
                             * Creates a new Condition instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.ICondition=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.RecordCondition.Condition} Condition instance
                             */
                            Condition.create = function create(properties) {
                                return new Condition(properties);
                            };
    
                            /**
                             * Encodes the specified Condition message. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.Condition.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.ICondition} message Condition message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Condition.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.operator != null && Object.hasOwnProperty.call(message, "operator"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.operator);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    $root.google.privacy.dlp.v2.Value.encode(message.value, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Condition message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.Condition.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.ICondition} message Condition message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Condition.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Condition message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.RecordCondition.Condition} Condition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Condition.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordCondition.Condition();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.operator = reader.int32();
                                        break;
                                    case 4:
                                        message.value = $root.google.privacy.dlp.v2.Value.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Condition message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.RecordCondition.Condition} Condition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Condition.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Condition message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Condition.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.field != null && message.hasOwnProperty("field")) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                    if (error)
                                        return "field." + error;
                                }
                                if (message.operator != null && message.hasOwnProperty("operator"))
                                    switch (message.operator) {
                                    default:
                                        return "operator: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 7:
                                        break;
                                    }
                                if (message.value != null && message.hasOwnProperty("value")) {
                                    var error = $root.google.privacy.dlp.v2.Value.verify(message.value);
                                    if (error)
                                        return "value." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Condition message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.RecordCondition.Condition} Condition
                             */
                            Condition.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.RecordCondition.Condition)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.RecordCondition.Condition();
                                if (object.field != null) {
                                    if (typeof object.field !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RecordCondition.Condition.field: object expected");
                                    message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                                }
                                switch (object.operator) {
                                case "RELATIONAL_OPERATOR_UNSPECIFIED":
                                case 0:
                                    message.operator = 0;
                                    break;
                                case "EQUAL_TO":
                                case 1:
                                    message.operator = 1;
                                    break;
                                case "NOT_EQUAL_TO":
                                case 2:
                                    message.operator = 2;
                                    break;
                                case "GREATER_THAN":
                                case 3:
                                    message.operator = 3;
                                    break;
                                case "LESS_THAN":
                                case 4:
                                    message.operator = 4;
                                    break;
                                case "GREATER_THAN_OR_EQUALS":
                                case 5:
                                    message.operator = 5;
                                    break;
                                case "LESS_THAN_OR_EQUALS":
                                case 6:
                                    message.operator = 6;
                                    break;
                                case "EXISTS":
                                case 7:
                                    message.operator = 7;
                                    break;
                                }
                                if (object.value != null) {
                                    if (typeof object.value !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RecordCondition.Condition.value: object expected");
                                    message.value = $root.google.privacy.dlp.v2.Value.fromObject(object.value);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Condition message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.Condition} message Condition
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Condition.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.field = null;
                                    object.operator = options.enums === String ? "RELATIONAL_OPERATOR_UNSPECIFIED" : 0;
                                    object.value = null;
                                }
                                if (message.field != null && message.hasOwnProperty("field"))
                                    object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                                if (message.operator != null && message.hasOwnProperty("operator"))
                                    object.operator = options.enums === String ? $root.google.privacy.dlp.v2.RelationalOperator[message.operator] : message.operator;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = $root.google.privacy.dlp.v2.Value.toObject(message.value, options);
                                return object;
                            };
    
                            /**
                             * Converts this Condition to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.RecordCondition.Condition
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Condition.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Condition;
                        })();
    
                        RecordCondition.Conditions = (function() {
    
                            /**
                             * Properties of a Conditions.
                             * @memberof google.privacy.dlp.v2.RecordCondition
                             * @interface IConditions
                             * @property {Array.<google.privacy.dlp.v2.RecordCondition.ICondition>|null} [conditions] Conditions conditions
                             */
    
                            /**
                             * Constructs a new Conditions.
                             * @memberof google.privacy.dlp.v2.RecordCondition
                             * @classdesc Represents a Conditions.
                             * @implements IConditions
                             * @constructor
                             * @param {google.privacy.dlp.v2.RecordCondition.IConditions=} [properties] Properties to set
                             */
                            function Conditions(properties) {
                                this.conditions = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Conditions conditions.
                             * @member {Array.<google.privacy.dlp.v2.RecordCondition.ICondition>} conditions
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @instance
                             */
                            Conditions.prototype.conditions = $util.emptyArray;
    
                            /**
                             * Creates a new Conditions instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.IConditions=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.RecordCondition.Conditions} Conditions instance
                             */
                            Conditions.create = function create(properties) {
                                return new Conditions(properties);
                            };
    
                            /**
                             * Encodes the specified Conditions message. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.Conditions.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.IConditions} message Conditions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Conditions.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.conditions != null && message.conditions.length)
                                    for (var i = 0; i < message.conditions.length; ++i)
                                        $root.google.privacy.dlp.v2.RecordCondition.Condition.encode(message.conditions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Conditions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.Conditions.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.IConditions} message Conditions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Conditions.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Conditions message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.RecordCondition.Conditions} Conditions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Conditions.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordCondition.Conditions();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.conditions && message.conditions.length))
                                            message.conditions = [];
                                        message.conditions.push($root.google.privacy.dlp.v2.RecordCondition.Condition.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Conditions message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.RecordCondition.Conditions} Conditions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Conditions.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Conditions message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Conditions.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.conditions != null && message.hasOwnProperty("conditions")) {
                                    if (!Array.isArray(message.conditions))
                                        return "conditions: array expected";
                                    for (var i = 0; i < message.conditions.length; ++i) {
                                        var error = $root.google.privacy.dlp.v2.RecordCondition.Condition.verify(message.conditions[i]);
                                        if (error)
                                            return "conditions." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Conditions message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.RecordCondition.Conditions} Conditions
                             */
                            Conditions.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.RecordCondition.Conditions)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.RecordCondition.Conditions();
                                if (object.conditions) {
                                    if (!Array.isArray(object.conditions))
                                        throw TypeError(".google.privacy.dlp.v2.RecordCondition.Conditions.conditions: array expected");
                                    message.conditions = [];
                                    for (var i = 0; i < object.conditions.length; ++i) {
                                        if (typeof object.conditions[i] !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.RecordCondition.Conditions.conditions: object expected");
                                        message.conditions[i] = $root.google.privacy.dlp.v2.RecordCondition.Condition.fromObject(object.conditions[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Conditions message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.Conditions} message Conditions
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Conditions.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.conditions = [];
                                if (message.conditions && message.conditions.length) {
                                    object.conditions = [];
                                    for (var j = 0; j < message.conditions.length; ++j)
                                        object.conditions[j] = $root.google.privacy.dlp.v2.RecordCondition.Condition.toObject(message.conditions[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Conditions to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.RecordCondition.Conditions
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Conditions.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Conditions;
                        })();
    
                        RecordCondition.Expressions = (function() {
    
                            /**
                             * Properties of an Expressions.
                             * @memberof google.privacy.dlp.v2.RecordCondition
                             * @interface IExpressions
                             * @property {google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator|null} [logicalOperator] Expressions logicalOperator
                             * @property {google.privacy.dlp.v2.RecordCondition.IConditions|null} [conditions] Expressions conditions
                             */
    
                            /**
                             * Constructs a new Expressions.
                             * @memberof google.privacy.dlp.v2.RecordCondition
                             * @classdesc Represents an Expressions.
                             * @implements IExpressions
                             * @constructor
                             * @param {google.privacy.dlp.v2.RecordCondition.IExpressions=} [properties] Properties to set
                             */
                            function Expressions(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Expressions logicalOperator.
                             * @member {google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator} logicalOperator
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @instance
                             */
                            Expressions.prototype.logicalOperator = 0;
    
                            /**
                             * Expressions conditions.
                             * @member {google.privacy.dlp.v2.RecordCondition.IConditions|null|undefined} conditions
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @instance
                             */
                            Expressions.prototype.conditions = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Expressions type.
                             * @member {"conditions"|undefined} type
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @instance
                             */
                            Object.defineProperty(Expressions.prototype, "type", {
                                get: $util.oneOfGetter($oneOfFields = ["conditions"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Expressions instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.IExpressions=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.RecordCondition.Expressions} Expressions instance
                             */
                            Expressions.create = function create(properties) {
                                return new Expressions(properties);
                            };
    
                            /**
                             * Encodes the specified Expressions message. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.Expressions.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.IExpressions} message Expressions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Expressions.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.logicalOperator != null && Object.hasOwnProperty.call(message, "logicalOperator"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.logicalOperator);
                                if (message.conditions != null && Object.hasOwnProperty.call(message, "conditions"))
                                    $root.google.privacy.dlp.v2.RecordCondition.Conditions.encode(message.conditions, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Expressions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordCondition.Expressions.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.IExpressions} message Expressions message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Expressions.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Expressions message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.RecordCondition.Expressions} Expressions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Expressions.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordCondition.Expressions();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.logicalOperator = reader.int32();
                                        break;
                                    case 3:
                                        message.conditions = $root.google.privacy.dlp.v2.RecordCondition.Conditions.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Expressions message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.RecordCondition.Expressions} Expressions
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Expressions.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Expressions message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Expressions.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.logicalOperator != null && message.hasOwnProperty("logicalOperator"))
                                    switch (message.logicalOperator) {
                                    default:
                                        return "logicalOperator: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.conditions != null && message.hasOwnProperty("conditions")) {
                                    properties.type = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.RecordCondition.Conditions.verify(message.conditions);
                                        if (error)
                                            return "conditions." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates an Expressions message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.RecordCondition.Expressions} Expressions
                             */
                            Expressions.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.RecordCondition.Expressions)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.RecordCondition.Expressions();
                                switch (object.logicalOperator) {
                                case "LOGICAL_OPERATOR_UNSPECIFIED":
                                case 0:
                                    message.logicalOperator = 0;
                                    break;
                                case "AND":
                                case 1:
                                    message.logicalOperator = 1;
                                    break;
                                }
                                if (object.conditions != null) {
                                    if (typeof object.conditions !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.RecordCondition.Expressions.conditions: object expected");
                                    message.conditions = $root.google.privacy.dlp.v2.RecordCondition.Conditions.fromObject(object.conditions);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Expressions message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @static
                             * @param {google.privacy.dlp.v2.RecordCondition.Expressions} message Expressions
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Expressions.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.logicalOperator = options.enums === String ? "LOGICAL_OPERATOR_UNSPECIFIED" : 0;
                                if (message.logicalOperator != null && message.hasOwnProperty("logicalOperator"))
                                    object.logicalOperator = options.enums === String ? $root.google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator[message.logicalOperator] : message.logicalOperator;
                                if (message.conditions != null && message.hasOwnProperty("conditions")) {
                                    object.conditions = $root.google.privacy.dlp.v2.RecordCondition.Conditions.toObject(message.conditions, options);
                                    if (options.oneofs)
                                        object.type = "conditions";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Expressions to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.RecordCondition.Expressions
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Expressions.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * LogicalOperator enum.
                             * @name google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator
                             * @enum {number}
                             * @property {number} LOGICAL_OPERATOR_UNSPECIFIED=0 LOGICAL_OPERATOR_UNSPECIFIED value
                             * @property {number} AND=1 AND value
                             */
                            Expressions.LogicalOperator = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "LOGICAL_OPERATOR_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "AND"] = 1;
                                return values;
                            })();
    
                            return Expressions;
                        })();
    
                        return RecordCondition;
                    })();
    
                    v2.TransformationOverview = (function() {
    
                        /**
                         * Properties of a TransformationOverview.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITransformationOverview
                         * @property {number|Long|null} [transformedBytes] TransformationOverview transformedBytes
                         * @property {Array.<google.privacy.dlp.v2.ITransformationSummary>|null} [transformationSummaries] TransformationOverview transformationSummaries
                         */
    
                        /**
                         * Constructs a new TransformationOverview.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TransformationOverview.
                         * @implements ITransformationOverview
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITransformationOverview=} [properties] Properties to set
                         */
                        function TransformationOverview(properties) {
                            this.transformationSummaries = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransformationOverview transformedBytes.
                         * @member {number|Long} transformedBytes
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @instance
                         */
                        TransformationOverview.prototype.transformedBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TransformationOverview transformationSummaries.
                         * @member {Array.<google.privacy.dlp.v2.ITransformationSummary>} transformationSummaries
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @instance
                         */
                        TransformationOverview.prototype.transformationSummaries = $util.emptyArray;
    
                        /**
                         * Creates a new TransformationOverview instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationOverview=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TransformationOverview} TransformationOverview instance
                         */
                        TransformationOverview.create = function create(properties) {
                            return new TransformationOverview(properties);
                        };
    
                        /**
                         * Encodes the specified TransformationOverview message. Does not implicitly {@link google.privacy.dlp.v2.TransformationOverview.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationOverview} message TransformationOverview message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransformationOverview.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transformedBytes != null && Object.hasOwnProperty.call(message, "transformedBytes"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.transformedBytes);
                            if (message.transformationSummaries != null && message.transformationSummaries.length)
                                for (var i = 0; i < message.transformationSummaries.length; ++i)
                                    $root.google.privacy.dlp.v2.TransformationSummary.encode(message.transformationSummaries[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransformationOverview message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransformationOverview.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationOverview} message TransformationOverview message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransformationOverview.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransformationOverview message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TransformationOverview} TransformationOverview
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransformationOverview.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransformationOverview();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.transformedBytes = reader.int64();
                                    break;
                                case 3:
                                    if (!(message.transformationSummaries && message.transformationSummaries.length))
                                        message.transformationSummaries = [];
                                    message.transformationSummaries.push($root.google.privacy.dlp.v2.TransformationSummary.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransformationOverview message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TransformationOverview} TransformationOverview
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransformationOverview.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransformationOverview message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransformationOverview.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transformedBytes != null && message.hasOwnProperty("transformedBytes"))
                                if (!$util.isInteger(message.transformedBytes) && !(message.transformedBytes && $util.isInteger(message.transformedBytes.low) && $util.isInteger(message.transformedBytes.high)))
                                    return "transformedBytes: integer|Long expected";
                            if (message.transformationSummaries != null && message.hasOwnProperty("transformationSummaries")) {
                                if (!Array.isArray(message.transformationSummaries))
                                    return "transformationSummaries: array expected";
                                for (var i = 0; i < message.transformationSummaries.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.TransformationSummary.verify(message.transformationSummaries[i]);
                                    if (error)
                                        return "transformationSummaries." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TransformationOverview message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TransformationOverview} TransformationOverview
                         */
                        TransformationOverview.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TransformationOverview)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TransformationOverview();
                            if (object.transformedBytes != null)
                                if ($util.Long)
                                    (message.transformedBytes = $util.Long.fromValue(object.transformedBytes)).unsigned = false;
                                else if (typeof object.transformedBytes === "string")
                                    message.transformedBytes = parseInt(object.transformedBytes, 10);
                                else if (typeof object.transformedBytes === "number")
                                    message.transformedBytes = object.transformedBytes;
                                else if (typeof object.transformedBytes === "object")
                                    message.transformedBytes = new $util.LongBits(object.transformedBytes.low >>> 0, object.transformedBytes.high >>> 0).toNumber();
                            if (object.transformationSummaries) {
                                if (!Array.isArray(object.transformationSummaries))
                                    throw TypeError(".google.privacy.dlp.v2.TransformationOverview.transformationSummaries: array expected");
                                message.transformationSummaries = [];
                                for (var i = 0; i < object.transformationSummaries.length; ++i) {
                                    if (typeof object.transformationSummaries[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.TransformationOverview.transformationSummaries: object expected");
                                    message.transformationSummaries[i] = $root.google.privacy.dlp.v2.TransformationSummary.fromObject(object.transformationSummaries[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransformationOverview message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @static
                         * @param {google.privacy.dlp.v2.TransformationOverview} message TransformationOverview
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransformationOverview.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.transformationSummaries = [];
                            if (options.defaults)
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.transformedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.transformedBytes = options.longs === String ? "0" : 0;
                            if (message.transformedBytes != null && message.hasOwnProperty("transformedBytes"))
                                if (typeof message.transformedBytes === "number")
                                    object.transformedBytes = options.longs === String ? String(message.transformedBytes) : message.transformedBytes;
                                else
                                    object.transformedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.transformedBytes) : options.longs === Number ? new $util.LongBits(message.transformedBytes.low >>> 0, message.transformedBytes.high >>> 0).toNumber() : message.transformedBytes;
                            if (message.transformationSummaries && message.transformationSummaries.length) {
                                object.transformationSummaries = [];
                                for (var j = 0; j < message.transformationSummaries.length; ++j)
                                    object.transformationSummaries[j] = $root.google.privacy.dlp.v2.TransformationSummary.toObject(message.transformationSummaries[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TransformationOverview to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TransformationOverview
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransformationOverview.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return TransformationOverview;
                    })();
    
                    v2.TransformationSummary = (function() {
    
                        /**
                         * Properties of a TransformationSummary.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITransformationSummary
                         * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] TransformationSummary infoType
                         * @property {google.privacy.dlp.v2.IFieldId|null} [field] TransformationSummary field
                         * @property {google.privacy.dlp.v2.IPrimitiveTransformation|null} [transformation] TransformationSummary transformation
                         * @property {Array.<google.privacy.dlp.v2.IFieldTransformation>|null} [fieldTransformations] TransformationSummary fieldTransformations
                         * @property {google.privacy.dlp.v2.IRecordSuppression|null} [recordSuppress] TransformationSummary recordSuppress
                         * @property {Array.<google.privacy.dlp.v2.TransformationSummary.ISummaryResult>|null} [results] TransformationSummary results
                         * @property {number|Long|null} [transformedBytes] TransformationSummary transformedBytes
                         */
    
                        /**
                         * Constructs a new TransformationSummary.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TransformationSummary.
                         * @implements ITransformationSummary
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITransformationSummary=} [properties] Properties to set
                         */
                        function TransformationSummary(properties) {
                            this.fieldTransformations = [];
                            this.results = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransformationSummary infoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.infoType = null;
    
                        /**
                         * TransformationSummary field.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.field = null;
    
                        /**
                         * TransformationSummary transformation.
                         * @member {google.privacy.dlp.v2.IPrimitiveTransformation|null|undefined} transformation
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.transformation = null;
    
                        /**
                         * TransformationSummary fieldTransformations.
                         * @member {Array.<google.privacy.dlp.v2.IFieldTransformation>} fieldTransformations
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.fieldTransformations = $util.emptyArray;
    
                        /**
                         * TransformationSummary recordSuppress.
                         * @member {google.privacy.dlp.v2.IRecordSuppression|null|undefined} recordSuppress
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.recordSuppress = null;
    
                        /**
                         * TransformationSummary results.
                         * @member {Array.<google.privacy.dlp.v2.TransformationSummary.ISummaryResult>} results
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.results = $util.emptyArray;
    
                        /**
                         * TransformationSummary transformedBytes.
                         * @member {number|Long} transformedBytes
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         */
                        TransformationSummary.prototype.transformedBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new TransformationSummary instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationSummary=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TransformationSummary} TransformationSummary instance
                         */
                        TransformationSummary.create = function create(properties) {
                            return new TransformationSummary(properties);
                        };
    
                        /**
                         * Encodes the specified TransformationSummary message. Does not implicitly {@link google.privacy.dlp.v2.TransformationSummary.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationSummary} message TransformationSummary message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransformationSummary.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.transformation != null && Object.hasOwnProperty.call(message, "transformation"))
                                $root.google.privacy.dlp.v2.PrimitiveTransformation.encode(message.transformation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.results != null && message.results.length)
                                for (var i = 0; i < message.results.length; ++i)
                                    $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult.encode(message.results[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.fieldTransformations != null && message.fieldTransformations.length)
                                for (var i = 0; i < message.fieldTransformations.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldTransformation.encode(message.fieldTransformations[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.recordSuppress != null && Object.hasOwnProperty.call(message, "recordSuppress"))
                                $root.google.privacy.dlp.v2.RecordSuppression.encode(message.recordSuppress, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.transformedBytes != null && Object.hasOwnProperty.call(message, "transformedBytes"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.transformedBytes);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransformationSummary message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransformationSummary.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {google.privacy.dlp.v2.ITransformationSummary} message TransformationSummary message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransformationSummary.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransformationSummary message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TransformationSummary} TransformationSummary
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransformationSummary.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransformationSummary();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.transformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.fieldTransformations && message.fieldTransformations.length))
                                        message.fieldTransformations = [];
                                    message.fieldTransformations.push($root.google.privacy.dlp.v2.FieldTransformation.decode(reader, reader.uint32()));
                                    break;
                                case 6:
                                    message.recordSuppress = $root.google.privacy.dlp.v2.RecordSuppression.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    if (!(message.results && message.results.length))
                                        message.results = [];
                                    message.results.push($root.google.privacy.dlp.v2.TransformationSummary.SummaryResult.decode(reader, reader.uint32()));
                                    break;
                                case 7:
                                    message.transformedBytes = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransformationSummary message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TransformationSummary} TransformationSummary
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransformationSummary.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransformationSummary message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransformationSummary.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                if (error)
                                    return "infoType." + error;
                            }
                            if (message.field != null && message.hasOwnProperty("field")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                if (error)
                                    return "field." + error;
                            }
                            if (message.transformation != null && message.hasOwnProperty("transformation")) {
                                var error = $root.google.privacy.dlp.v2.PrimitiveTransformation.verify(message.transformation);
                                if (error)
                                    return "transformation." + error;
                            }
                            if (message.fieldTransformations != null && message.hasOwnProperty("fieldTransformations")) {
                                if (!Array.isArray(message.fieldTransformations))
                                    return "fieldTransformations: array expected";
                                for (var i = 0; i < message.fieldTransformations.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldTransformation.verify(message.fieldTransformations[i]);
                                    if (error)
                                        return "fieldTransformations." + error;
                                }
                            }
                            if (message.recordSuppress != null && message.hasOwnProperty("recordSuppress")) {
                                var error = $root.google.privacy.dlp.v2.RecordSuppression.verify(message.recordSuppress);
                                if (error)
                                    return "recordSuppress." + error;
                            }
                            if (message.results != null && message.hasOwnProperty("results")) {
                                if (!Array.isArray(message.results))
                                    return "results: array expected";
                                for (var i = 0; i < message.results.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult.verify(message.results[i]);
                                    if (error)
                                        return "results." + error;
                                }
                            }
                            if (message.transformedBytes != null && message.hasOwnProperty("transformedBytes"))
                                if (!$util.isInteger(message.transformedBytes) && !(message.transformedBytes && $util.isInteger(message.transformedBytes.low) && $util.isInteger(message.transformedBytes.high)))
                                    return "transformedBytes: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a TransformationSummary message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TransformationSummary} TransformationSummary
                         */
                        TransformationSummary.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TransformationSummary)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TransformationSummary();
                            if (object.infoType != null) {
                                if (typeof object.infoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.TransformationSummary.infoType: object expected");
                                message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                            }
                            if (object.field != null) {
                                if (typeof object.field !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.TransformationSummary.field: object expected");
                                message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                            }
                            if (object.transformation != null) {
                                if (typeof object.transformation !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.TransformationSummary.transformation: object expected");
                                message.transformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.fromObject(object.transformation);
                            }
                            if (object.fieldTransformations) {
                                if (!Array.isArray(object.fieldTransformations))
                                    throw TypeError(".google.privacy.dlp.v2.TransformationSummary.fieldTransformations: array expected");
                                message.fieldTransformations = [];
                                for (var i = 0; i < object.fieldTransformations.length; ++i) {
                                    if (typeof object.fieldTransformations[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.TransformationSummary.fieldTransformations: object expected");
                                    message.fieldTransformations[i] = $root.google.privacy.dlp.v2.FieldTransformation.fromObject(object.fieldTransformations[i]);
                                }
                            }
                            if (object.recordSuppress != null) {
                                if (typeof object.recordSuppress !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.TransformationSummary.recordSuppress: object expected");
                                message.recordSuppress = $root.google.privacy.dlp.v2.RecordSuppression.fromObject(object.recordSuppress);
                            }
                            if (object.results) {
                                if (!Array.isArray(object.results))
                                    throw TypeError(".google.privacy.dlp.v2.TransformationSummary.results: array expected");
                                message.results = [];
                                for (var i = 0; i < object.results.length; ++i) {
                                    if (typeof object.results[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.TransformationSummary.results: object expected");
                                    message.results[i] = $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult.fromObject(object.results[i]);
                                }
                            }
                            if (object.transformedBytes != null)
                                if ($util.Long)
                                    (message.transformedBytes = $util.Long.fromValue(object.transformedBytes)).unsigned = false;
                                else if (typeof object.transformedBytes === "string")
                                    message.transformedBytes = parseInt(object.transformedBytes, 10);
                                else if (typeof object.transformedBytes === "number")
                                    message.transformedBytes = object.transformedBytes;
                                else if (typeof object.transformedBytes === "object")
                                    message.transformedBytes = new $util.LongBits(object.transformedBytes.low >>> 0, object.transformedBytes.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransformationSummary message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @static
                         * @param {google.privacy.dlp.v2.TransformationSummary} message TransformationSummary
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransformationSummary.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.results = [];
                                object.fieldTransformations = [];
                            }
                            if (options.defaults) {
                                object.infoType = null;
                                object.field = null;
                                object.transformation = null;
                                object.recordSuppress = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.transformedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.transformedBytes = options.longs === String ? "0" : 0;
                            }
                            if (message.infoType != null && message.hasOwnProperty("infoType"))
                                object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                            if (message.transformation != null && message.hasOwnProperty("transformation"))
                                object.transformation = $root.google.privacy.dlp.v2.PrimitiveTransformation.toObject(message.transformation, options);
                            if (message.results && message.results.length) {
                                object.results = [];
                                for (var j = 0; j < message.results.length; ++j)
                                    object.results[j] = $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult.toObject(message.results[j], options);
                            }
                            if (message.fieldTransformations && message.fieldTransformations.length) {
                                object.fieldTransformations = [];
                                for (var j = 0; j < message.fieldTransformations.length; ++j)
                                    object.fieldTransformations[j] = $root.google.privacy.dlp.v2.FieldTransformation.toObject(message.fieldTransformations[j], options);
                            }
                            if (message.recordSuppress != null && message.hasOwnProperty("recordSuppress"))
                                object.recordSuppress = $root.google.privacy.dlp.v2.RecordSuppression.toObject(message.recordSuppress, options);
                            if (message.transformedBytes != null && message.hasOwnProperty("transformedBytes"))
                                if (typeof message.transformedBytes === "number")
                                    object.transformedBytes = options.longs === String ? String(message.transformedBytes) : message.transformedBytes;
                                else
                                    object.transformedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.transformedBytes) : options.longs === Number ? new $util.LongBits(message.transformedBytes.low >>> 0, message.transformedBytes.high >>> 0).toNumber() : message.transformedBytes;
                            return object;
                        };
    
                        /**
                         * Converts this TransformationSummary to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TransformationSummary
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransformationSummary.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        TransformationSummary.SummaryResult = (function() {
    
                            /**
                             * Properties of a SummaryResult.
                             * @memberof google.privacy.dlp.v2.TransformationSummary
                             * @interface ISummaryResult
                             * @property {number|Long|null} [count] SummaryResult count
                             * @property {google.privacy.dlp.v2.TransformationSummary.TransformationResultCode|null} [code] SummaryResult code
                             * @property {string|null} [details] SummaryResult details
                             */
    
                            /**
                             * Constructs a new SummaryResult.
                             * @memberof google.privacy.dlp.v2.TransformationSummary
                             * @classdesc Represents a SummaryResult.
                             * @implements ISummaryResult
                             * @constructor
                             * @param {google.privacy.dlp.v2.TransformationSummary.ISummaryResult=} [properties] Properties to set
                             */
                            function SummaryResult(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * SummaryResult count.
                             * @member {number|Long} count
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @instance
                             */
                            SummaryResult.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * SummaryResult code.
                             * @member {google.privacy.dlp.v2.TransformationSummary.TransformationResultCode} code
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @instance
                             */
                            SummaryResult.prototype.code = 0;
    
                            /**
                             * SummaryResult details.
                             * @member {string} details
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @instance
                             */
                            SummaryResult.prototype.details = "";
    
                            /**
                             * Creates a new SummaryResult instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationSummary.ISummaryResult=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.TransformationSummary.SummaryResult} SummaryResult instance
                             */
                            SummaryResult.create = function create(properties) {
                                return new SummaryResult(properties);
                            };
    
                            /**
                             * Encodes the specified SummaryResult message. Does not implicitly {@link google.privacy.dlp.v2.TransformationSummary.SummaryResult.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationSummary.ISummaryResult} message SummaryResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SummaryResult.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.count);
                                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
                                if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.details);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SummaryResult message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TransformationSummary.SummaryResult.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationSummary.ISummaryResult} message SummaryResult message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SummaryResult.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SummaryResult message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.TransformationSummary.SummaryResult} SummaryResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SummaryResult.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.count = reader.int64();
                                        break;
                                    case 2:
                                        message.code = reader.int32();
                                        break;
                                    case 3:
                                        message.details = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SummaryResult message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.TransformationSummary.SummaryResult} SummaryResult
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SummaryResult.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SummaryResult message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SummaryResult.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                        return "count: integer|Long expected";
                                if (message.code != null && message.hasOwnProperty("code"))
                                    switch (message.code) {
                                    default:
                                        return "code: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.details != null && message.hasOwnProperty("details"))
                                    if (!$util.isString(message.details))
                                        return "details: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a SummaryResult message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.TransformationSummary.SummaryResult} SummaryResult
                             */
                            SummaryResult.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.TransformationSummary.SummaryResult();
                                if (object.count != null)
                                    if ($util.Long)
                                        (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                    else if (typeof object.count === "string")
                                        message.count = parseInt(object.count, 10);
                                    else if (typeof object.count === "number")
                                        message.count = object.count;
                                    else if (typeof object.count === "object")
                                        message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                                switch (object.code) {
                                case "TRANSFORMATION_RESULT_CODE_UNSPECIFIED":
                                case 0:
                                    message.code = 0;
                                    break;
                                case "SUCCESS":
                                case 1:
                                    message.code = 1;
                                    break;
                                case "ERROR":
                                case 2:
                                    message.code = 2;
                                    break;
                                }
                                if (object.details != null)
                                    message.details = String(object.details);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a SummaryResult message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @static
                             * @param {google.privacy.dlp.v2.TransformationSummary.SummaryResult} message SummaryResult
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SummaryResult.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.count = options.longs === String ? "0" : 0;
                                    object.code = options.enums === String ? "TRANSFORMATION_RESULT_CODE_UNSPECIFIED" : 0;
                                    object.details = "";
                                }
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (typeof message.count === "number")
                                        object.count = options.longs === String ? String(message.count) : message.count;
                                    else
                                        object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                                if (message.code != null && message.hasOwnProperty("code"))
                                    object.code = options.enums === String ? $root.google.privacy.dlp.v2.TransformationSummary.TransformationResultCode[message.code] : message.code;
                                if (message.details != null && message.hasOwnProperty("details"))
                                    object.details = message.details;
                                return object;
                            };
    
                            /**
                             * Converts this SummaryResult to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.TransformationSummary.SummaryResult
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SummaryResult.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return SummaryResult;
                        })();
    
                        /**
                         * TransformationResultCode enum.
                         * @name google.privacy.dlp.v2.TransformationSummary.TransformationResultCode
                         * @enum {number}
                         * @property {number} TRANSFORMATION_RESULT_CODE_UNSPECIFIED=0 TRANSFORMATION_RESULT_CODE_UNSPECIFIED value
                         * @property {number} SUCCESS=1 SUCCESS value
                         * @property {number} ERROR=2 ERROR value
                         */
                        TransformationSummary.TransformationResultCode = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TRANSFORMATION_RESULT_CODE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SUCCESS"] = 1;
                            values[valuesById[2] = "ERROR"] = 2;
                            return values;
                        })();
    
                        return TransformationSummary;
                    })();
    
                    v2.Schedule = (function() {
    
                        /**
                         * Properties of a Schedule.
                         * @memberof google.privacy.dlp.v2
                         * @interface ISchedule
                         * @property {google.protobuf.IDuration|null} [recurrencePeriodDuration] Schedule recurrencePeriodDuration
                         */
    
                        /**
                         * Constructs a new Schedule.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Schedule.
                         * @implements ISchedule
                         * @constructor
                         * @param {google.privacy.dlp.v2.ISchedule=} [properties] Properties to set
                         */
                        function Schedule(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Schedule recurrencePeriodDuration.
                         * @member {google.protobuf.IDuration|null|undefined} recurrencePeriodDuration
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @instance
                         */
                        Schedule.prototype.recurrencePeriodDuration = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Schedule option.
                         * @member {"recurrencePeriodDuration"|undefined} option
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @instance
                         */
                        Object.defineProperty(Schedule.prototype, "option", {
                            get: $util.oneOfGetter($oneOfFields = ["recurrencePeriodDuration"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Schedule instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {google.privacy.dlp.v2.ISchedule=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Schedule} Schedule instance
                         */
                        Schedule.create = function create(properties) {
                            return new Schedule(properties);
                        };
    
                        /**
                         * Encodes the specified Schedule message. Does not implicitly {@link google.privacy.dlp.v2.Schedule.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {google.privacy.dlp.v2.ISchedule} message Schedule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Schedule.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.recurrencePeriodDuration != null && Object.hasOwnProperty.call(message, "recurrencePeriodDuration"))
                                $root.google.protobuf.Duration.encode(message.recurrencePeriodDuration, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Schedule message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Schedule.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {google.privacy.dlp.v2.ISchedule} message Schedule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Schedule.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Schedule message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Schedule} Schedule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Schedule.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Schedule();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.recurrencePeriodDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Schedule message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Schedule} Schedule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Schedule.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Schedule message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Schedule.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.recurrencePeriodDuration != null && message.hasOwnProperty("recurrencePeriodDuration")) {
                                properties.option = 1;
                                {
                                    var error = $root.google.protobuf.Duration.verify(message.recurrencePeriodDuration);
                                    if (error)
                                        return "recurrencePeriodDuration." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Schedule message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Schedule} Schedule
                         */
                        Schedule.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Schedule)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Schedule();
                            if (object.recurrencePeriodDuration != null) {
                                if (typeof object.recurrencePeriodDuration !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Schedule.recurrencePeriodDuration: object expected");
                                message.recurrencePeriodDuration = $root.google.protobuf.Duration.fromObject(object.recurrencePeriodDuration);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Schedule message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @static
                         * @param {google.privacy.dlp.v2.Schedule} message Schedule
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Schedule.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.recurrencePeriodDuration != null && message.hasOwnProperty("recurrencePeriodDuration")) {
                                object.recurrencePeriodDuration = $root.google.protobuf.Duration.toObject(message.recurrencePeriodDuration, options);
                                if (options.oneofs)
                                    object.option = "recurrencePeriodDuration";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Schedule to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Schedule
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Schedule.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Schedule;
                    })();
    
                    v2.Manual = (function() {
    
                        /**
                         * Properties of a Manual.
                         * @memberof google.privacy.dlp.v2
                         * @interface IManual
                         */
    
                        /**
                         * Constructs a new Manual.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Manual.
                         * @implements IManual
                         * @constructor
                         * @param {google.privacy.dlp.v2.IManual=} [properties] Properties to set
                         */
                        function Manual(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new Manual instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {google.privacy.dlp.v2.IManual=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Manual} Manual instance
                         */
                        Manual.create = function create(properties) {
                            return new Manual(properties);
                        };
    
                        /**
                         * Encodes the specified Manual message. Does not implicitly {@link google.privacy.dlp.v2.Manual.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {google.privacy.dlp.v2.IManual} message Manual message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Manual.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Manual message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Manual.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {google.privacy.dlp.v2.IManual} message Manual message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Manual.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Manual message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Manual} Manual
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Manual.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Manual();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Manual message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Manual} Manual
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Manual.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Manual message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Manual.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a Manual message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Manual} Manual
                         */
                        Manual.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Manual)
                                return object;
                            return new $root.google.privacy.dlp.v2.Manual();
                        };
    
                        /**
                         * Creates a plain object from a Manual message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Manual
                         * @static
                         * @param {google.privacy.dlp.v2.Manual} message Manual
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Manual.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this Manual to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Manual
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Manual.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Manual;
                    })();
    
                    v2.InspectTemplate = (function() {
    
                        /**
                         * Properties of an InspectTemplate.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectTemplate
                         * @property {string|null} [name] InspectTemplate name
                         * @property {string|null} [displayName] InspectTemplate displayName
                         * @property {string|null} [description] InspectTemplate description
                         * @property {google.protobuf.ITimestamp|null} [createTime] InspectTemplate createTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] InspectTemplate updateTime
                         * @property {google.privacy.dlp.v2.IInspectConfig|null} [inspectConfig] InspectTemplate inspectConfig
                         */
    
                        /**
                         * Constructs a new InspectTemplate.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectTemplate.
                         * @implements IInspectTemplate
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectTemplate=} [properties] Properties to set
                         */
                        function InspectTemplate(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectTemplate name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         */
                        InspectTemplate.prototype.name = "";
    
                        /**
                         * InspectTemplate displayName.
                         * @member {string} displayName
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         */
                        InspectTemplate.prototype.displayName = "";
    
                        /**
                         * InspectTemplate description.
                         * @member {string} description
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         */
                        InspectTemplate.prototype.description = "";
    
                        /**
                         * InspectTemplate createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         */
                        InspectTemplate.prototype.createTime = null;
    
                        /**
                         * InspectTemplate updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         */
                        InspectTemplate.prototype.updateTime = null;
    
                        /**
                         * InspectTemplate inspectConfig.
                         * @member {google.privacy.dlp.v2.IInspectConfig|null|undefined} inspectConfig
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         */
                        InspectTemplate.prototype.inspectConfig = null;
    
                        /**
                         * Creates a new InspectTemplate instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectTemplate=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectTemplate} InspectTemplate instance
                         */
                        InspectTemplate.create = function create(properties) {
                            return new InspectTemplate(properties);
                        };
    
                        /**
                         * Encodes the specified InspectTemplate message. Does not implicitly {@link google.privacy.dlp.v2.InspectTemplate.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectTemplate} message InspectTemplate message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectTemplate.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.inspectConfig != null && Object.hasOwnProperty.call(message, "inspectConfig"))
                                $root.google.privacy.dlp.v2.InspectConfig.encode(message.inspectConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectTemplate message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectTemplate.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectTemplate} message InspectTemplate message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectTemplate.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectTemplate message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectTemplate} InspectTemplate
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectTemplate.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectTemplate();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.displayName = reader.string();
                                    break;
                                case 3:
                                    message.description = reader.string();
                                    break;
                                case 4:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectTemplate message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectTemplate} InspectTemplate
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectTemplate.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectTemplate message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectTemplate.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.verify(message.inspectConfig);
                                if (error)
                                    return "inspectConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectTemplate message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectTemplate} InspectTemplate
                         */
                        InspectTemplate.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectTemplate)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectTemplate();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectTemplate.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectTemplate.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.inspectConfig != null) {
                                if (typeof object.inspectConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectTemplate.inspectConfig: object expected");
                                message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.fromObject(object.inspectConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectTemplate message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.InspectTemplate} message InspectTemplate
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectTemplate.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.description = "";
                                object.createTime = null;
                                object.updateTime = null;
                                object.inspectConfig = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig"))
                                object.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.toObject(message.inspectConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this InspectTemplate to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectTemplate
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectTemplate.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectTemplate;
                    })();
    
                    v2.DeidentifyTemplate = (function() {
    
                        /**
                         * Properties of a DeidentifyTemplate.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeidentifyTemplate
                         * @property {string|null} [name] DeidentifyTemplate name
                         * @property {string|null} [displayName] DeidentifyTemplate displayName
                         * @property {string|null} [description] DeidentifyTemplate description
                         * @property {google.protobuf.ITimestamp|null} [createTime] DeidentifyTemplate createTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] DeidentifyTemplate updateTime
                         * @property {google.privacy.dlp.v2.IDeidentifyConfig|null} [deidentifyConfig] DeidentifyTemplate deidentifyConfig
                         */
    
                        /**
                         * Constructs a new DeidentifyTemplate.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeidentifyTemplate.
                         * @implements IDeidentifyTemplate
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeidentifyTemplate=} [properties] Properties to set
                         */
                        function DeidentifyTemplate(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeidentifyTemplate name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         */
                        DeidentifyTemplate.prototype.name = "";
    
                        /**
                         * DeidentifyTemplate displayName.
                         * @member {string} displayName
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         */
                        DeidentifyTemplate.prototype.displayName = "";
    
                        /**
                         * DeidentifyTemplate description.
                         * @member {string} description
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         */
                        DeidentifyTemplate.prototype.description = "";
    
                        /**
                         * DeidentifyTemplate createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         */
                        DeidentifyTemplate.prototype.createTime = null;
    
                        /**
                         * DeidentifyTemplate updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         */
                        DeidentifyTemplate.prototype.updateTime = null;
    
                        /**
                         * DeidentifyTemplate deidentifyConfig.
                         * @member {google.privacy.dlp.v2.IDeidentifyConfig|null|undefined} deidentifyConfig
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         */
                        DeidentifyTemplate.prototype.deidentifyConfig = null;
    
                        /**
                         * Creates a new DeidentifyTemplate instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyTemplate=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeidentifyTemplate} DeidentifyTemplate instance
                         */
                        DeidentifyTemplate.create = function create(properties) {
                            return new DeidentifyTemplate(properties);
                        };
    
                        /**
                         * Encodes the specified DeidentifyTemplate message. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyTemplate.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyTemplate} message DeidentifyTemplate message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyTemplate.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.deidentifyConfig != null && Object.hasOwnProperty.call(message, "deidentifyConfig"))
                                $root.google.privacy.dlp.v2.DeidentifyConfig.encode(message.deidentifyConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeidentifyTemplate message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeidentifyTemplate.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.IDeidentifyTemplate} message DeidentifyTemplate message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeidentifyTemplate.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeidentifyTemplate message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeidentifyTemplate} DeidentifyTemplate
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyTemplate.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeidentifyTemplate();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.displayName = reader.string();
                                    break;
                                case 3:
                                    message.description = reader.string();
                                    break;
                                case 4:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.deidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeidentifyTemplate message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeidentifyTemplate} DeidentifyTemplate
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeidentifyTemplate.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeidentifyTemplate message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeidentifyTemplate.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.deidentifyConfig != null && message.hasOwnProperty("deidentifyConfig")) {
                                var error = $root.google.privacy.dlp.v2.DeidentifyConfig.verify(message.deidentifyConfig);
                                if (error)
                                    return "deidentifyConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DeidentifyTemplate message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeidentifyTemplate} DeidentifyTemplate
                         */
                        DeidentifyTemplate.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeidentifyTemplate)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeidentifyTemplate();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyTemplate.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyTemplate.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.deidentifyConfig != null) {
                                if (typeof object.deidentifyConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DeidentifyTemplate.deidentifyConfig: object expected");
                                message.deidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.fromObject(object.deidentifyConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeidentifyTemplate message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @static
                         * @param {google.privacy.dlp.v2.DeidentifyTemplate} message DeidentifyTemplate
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeidentifyTemplate.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.description = "";
                                object.createTime = null;
                                object.updateTime = null;
                                object.deidentifyConfig = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.deidentifyConfig != null && message.hasOwnProperty("deidentifyConfig"))
                                object.deidentifyConfig = $root.google.privacy.dlp.v2.DeidentifyConfig.toObject(message.deidentifyConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this DeidentifyTemplate to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeidentifyTemplate
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeidentifyTemplate.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeidentifyTemplate;
                    })();
    
                    v2.Error = (function() {
    
                        /**
                         * Properties of an Error.
                         * @memberof google.privacy.dlp.v2
                         * @interface IError
                         * @property {google.rpc.IStatus|null} [details] Error details
                         * @property {Array.<google.protobuf.ITimestamp>|null} [timestamps] Error timestamps
                         */
    
                        /**
                         * Constructs a new Error.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an Error.
                         * @implements IError
                         * @constructor
                         * @param {google.privacy.dlp.v2.IError=} [properties] Properties to set
                         */
                        function Error(properties) {
                            this.timestamps = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Error details.
                         * @member {google.rpc.IStatus|null|undefined} details
                         * @memberof google.privacy.dlp.v2.Error
                         * @instance
                         */
                        Error.prototype.details = null;
    
                        /**
                         * Error timestamps.
                         * @member {Array.<google.protobuf.ITimestamp>} timestamps
                         * @memberof google.privacy.dlp.v2.Error
                         * @instance
                         */
                        Error.prototype.timestamps = $util.emptyArray;
    
                        /**
                         * Creates a new Error instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {google.privacy.dlp.v2.IError=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Error} Error instance
                         */
                        Error.create = function create(properties) {
                            return new Error(properties);
                        };
    
                        /**
                         * Encodes the specified Error message. Does not implicitly {@link google.privacy.dlp.v2.Error.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {google.privacy.dlp.v2.IError} message Error message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Error.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                                $root.google.rpc.Status.encode(message.details, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timestamps != null && message.timestamps.length)
                                for (var i = 0; i < message.timestamps.length; ++i)
                                    $root.google.protobuf.Timestamp.encode(message.timestamps[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Error.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {google.privacy.dlp.v2.IError} message Error message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Error.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Error} Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Error.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Error();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.details = $root.google.rpc.Status.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    if (!(message.timestamps && message.timestamps.length))
                                        message.timestamps = [];
                                    message.timestamps.push($root.google.protobuf.Timestamp.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Error} Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Error.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Error message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Error.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.details != null && message.hasOwnProperty("details")) {
                                var error = $root.google.rpc.Status.verify(message.details);
                                if (error)
                                    return "details." + error;
                            }
                            if (message.timestamps != null && message.hasOwnProperty("timestamps")) {
                                if (!Array.isArray(message.timestamps))
                                    return "timestamps: array expected";
                                for (var i = 0; i < message.timestamps.length; ++i) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.timestamps[i]);
                                    if (error)
                                        return "timestamps." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Error} Error
                         */
                        Error.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Error)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Error();
                            if (object.details != null) {
                                if (typeof object.details !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Error.details: object expected");
                                message.details = $root.google.rpc.Status.fromObject(object.details);
                            }
                            if (object.timestamps) {
                                if (!Array.isArray(object.timestamps))
                                    throw TypeError(".google.privacy.dlp.v2.Error.timestamps: array expected");
                                message.timestamps = [];
                                for (var i = 0; i < object.timestamps.length; ++i) {
                                    if (typeof object.timestamps[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.Error.timestamps: object expected");
                                    message.timestamps[i] = $root.google.protobuf.Timestamp.fromObject(object.timestamps[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Error
                         * @static
                         * @param {google.privacy.dlp.v2.Error} message Error
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Error.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.timestamps = [];
                            if (options.defaults)
                                object.details = null;
                            if (message.details != null && message.hasOwnProperty("details"))
                                object.details = $root.google.rpc.Status.toObject(message.details, options);
                            if (message.timestamps && message.timestamps.length) {
                                object.timestamps = [];
                                for (var j = 0; j < message.timestamps.length; ++j)
                                    object.timestamps[j] = $root.google.protobuf.Timestamp.toObject(message.timestamps[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Error to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Error
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Error.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Error;
                    })();
    
                    v2.JobTrigger = (function() {
    
                        /**
                         * Properties of a JobTrigger.
                         * @memberof google.privacy.dlp.v2
                         * @interface IJobTrigger
                         * @property {string|null} [name] JobTrigger name
                         * @property {string|null} [displayName] JobTrigger displayName
                         * @property {string|null} [description] JobTrigger description
                         * @property {google.privacy.dlp.v2.IInspectJobConfig|null} [inspectJob] JobTrigger inspectJob
                         * @property {Array.<google.privacy.dlp.v2.JobTrigger.ITrigger>|null} [triggers] JobTrigger triggers
                         * @property {Array.<google.privacy.dlp.v2.IError>|null} [errors] JobTrigger errors
                         * @property {google.protobuf.ITimestamp|null} [createTime] JobTrigger createTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] JobTrigger updateTime
                         * @property {google.protobuf.ITimestamp|null} [lastRunTime] JobTrigger lastRunTime
                         * @property {google.privacy.dlp.v2.JobTrigger.Status|null} [status] JobTrigger status
                         */
    
                        /**
                         * Constructs a new JobTrigger.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a JobTrigger.
                         * @implements IJobTrigger
                         * @constructor
                         * @param {google.privacy.dlp.v2.IJobTrigger=} [properties] Properties to set
                         */
                        function JobTrigger(properties) {
                            this.triggers = [];
                            this.errors = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * JobTrigger name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.name = "";
    
                        /**
                         * JobTrigger displayName.
                         * @member {string} displayName
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.displayName = "";
    
                        /**
                         * JobTrigger description.
                         * @member {string} description
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.description = "";
    
                        /**
                         * JobTrigger inspectJob.
                         * @member {google.privacy.dlp.v2.IInspectJobConfig|null|undefined} inspectJob
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.inspectJob = null;
    
                        /**
                         * JobTrigger triggers.
                         * @member {Array.<google.privacy.dlp.v2.JobTrigger.ITrigger>} triggers
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.triggers = $util.emptyArray;
    
                        /**
                         * JobTrigger errors.
                         * @member {Array.<google.privacy.dlp.v2.IError>} errors
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.errors = $util.emptyArray;
    
                        /**
                         * JobTrigger createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.createTime = null;
    
                        /**
                         * JobTrigger updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.updateTime = null;
    
                        /**
                         * JobTrigger lastRunTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} lastRunTime
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.lastRunTime = null;
    
                        /**
                         * JobTrigger status.
                         * @member {google.privacy.dlp.v2.JobTrigger.Status} status
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        JobTrigger.prototype.status = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * JobTrigger job.
                         * @member {"inspectJob"|undefined} job
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         */
                        Object.defineProperty(JobTrigger.prototype, "job", {
                            get: $util.oneOfGetter($oneOfFields = ["inspectJob"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new JobTrigger instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {google.privacy.dlp.v2.IJobTrigger=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.JobTrigger} JobTrigger instance
                         */
                        JobTrigger.create = function create(properties) {
                            return new JobTrigger(properties);
                        };
    
                        /**
                         * Encodes the specified JobTrigger message. Does not implicitly {@link google.privacy.dlp.v2.JobTrigger.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {google.privacy.dlp.v2.IJobTrigger} message JobTrigger message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobTrigger.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            if (message.inspectJob != null && Object.hasOwnProperty.call(message, "inspectJob"))
                                $root.google.privacy.dlp.v2.InspectJobConfig.encode(message.inspectJob, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.triggers != null && message.triggers.length)
                                for (var i = 0; i < message.triggers.length; ++i)
                                    $root.google.privacy.dlp.v2.JobTrigger.Trigger.encode(message.triggers[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.errors != null && message.errors.length)
                                for (var i = 0; i < message.errors.length; ++i)
                                    $root.google.privacy.dlp.v2.Error.encode(message.errors[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.lastRunTime != null && Object.hasOwnProperty.call(message, "lastRunTime"))
                                $root.google.protobuf.Timestamp.encode(message.lastRunTime, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.status);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified JobTrigger message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.JobTrigger.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {google.privacy.dlp.v2.IJobTrigger} message JobTrigger message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobTrigger.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a JobTrigger message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.JobTrigger} JobTrigger
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobTrigger.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.JobTrigger();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.displayName = reader.string();
                                    break;
                                case 3:
                                    message.description = reader.string();
                                    break;
                                case 4:
                                    message.inspectJob = $root.google.privacy.dlp.v2.InspectJobConfig.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.triggers && message.triggers.length))
                                        message.triggers = [];
                                    message.triggers.push($root.google.privacy.dlp.v2.JobTrigger.Trigger.decode(reader, reader.uint32()));
                                    break;
                                case 6:
                                    if (!(message.errors && message.errors.length))
                                        message.errors = [];
                                    message.errors.push($root.google.privacy.dlp.v2.Error.decode(reader, reader.uint32()));
                                    break;
                                case 7:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 9:
                                    message.lastRunTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 10:
                                    message.status = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a JobTrigger message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.JobTrigger} JobTrigger
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobTrigger.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a JobTrigger message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        JobTrigger.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.inspectJob != null && message.hasOwnProperty("inspectJob")) {
                                properties.job = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.InspectJobConfig.verify(message.inspectJob);
                                    if (error)
                                        return "inspectJob." + error;
                                }
                            }
                            if (message.triggers != null && message.hasOwnProperty("triggers")) {
                                if (!Array.isArray(message.triggers))
                                    return "triggers: array expected";
                                for (var i = 0; i < message.triggers.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.JobTrigger.Trigger.verify(message.triggers[i]);
                                    if (error)
                                        return "triggers." + error;
                                }
                            }
                            if (message.errors != null && message.hasOwnProperty("errors")) {
                                if (!Array.isArray(message.errors))
                                    return "errors: array expected";
                                for (var i = 0; i < message.errors.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Error.verify(message.errors[i]);
                                    if (error)
                                        return "errors." + error;
                                }
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.lastRunTime != null && message.hasOwnProperty("lastRunTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.lastRunTime);
                                if (error)
                                    return "lastRunTime." + error;
                            }
                            if (message.status != null && message.hasOwnProperty("status"))
                                switch (message.status) {
                                default:
                                    return "status: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a JobTrigger message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.JobTrigger} JobTrigger
                         */
                        JobTrigger.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.JobTrigger)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.JobTrigger();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.inspectJob != null) {
                                if (typeof object.inspectJob !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.JobTrigger.inspectJob: object expected");
                                message.inspectJob = $root.google.privacy.dlp.v2.InspectJobConfig.fromObject(object.inspectJob);
                            }
                            if (object.triggers) {
                                if (!Array.isArray(object.triggers))
                                    throw TypeError(".google.privacy.dlp.v2.JobTrigger.triggers: array expected");
                                message.triggers = [];
                                for (var i = 0; i < object.triggers.length; ++i) {
                                    if (typeof object.triggers[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.JobTrigger.triggers: object expected");
                                    message.triggers[i] = $root.google.privacy.dlp.v2.JobTrigger.Trigger.fromObject(object.triggers[i]);
                                }
                            }
                            if (object.errors) {
                                if (!Array.isArray(object.errors))
                                    throw TypeError(".google.privacy.dlp.v2.JobTrigger.errors: array expected");
                                message.errors = [];
                                for (var i = 0; i < object.errors.length; ++i) {
                                    if (typeof object.errors[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.JobTrigger.errors: object expected");
                                    message.errors[i] = $root.google.privacy.dlp.v2.Error.fromObject(object.errors[i]);
                                }
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.JobTrigger.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.JobTrigger.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.lastRunTime != null) {
                                if (typeof object.lastRunTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.JobTrigger.lastRunTime: object expected");
                                message.lastRunTime = $root.google.protobuf.Timestamp.fromObject(object.lastRunTime);
                            }
                            switch (object.status) {
                            case "STATUS_UNSPECIFIED":
                            case 0:
                                message.status = 0;
                                break;
                            case "HEALTHY":
                            case 1:
                                message.status = 1;
                                break;
                            case "PAUSED":
                            case 2:
                                message.status = 2;
                                break;
                            case "CANCELLED":
                            case 3:
                                message.status = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a JobTrigger message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @static
                         * @param {google.privacy.dlp.v2.JobTrigger} message JobTrigger
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        JobTrigger.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.triggers = [];
                                object.errors = [];
                            }
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.description = "";
                                object.createTime = null;
                                object.updateTime = null;
                                object.lastRunTime = null;
                                object.status = options.enums === String ? "STATUS_UNSPECIFIED" : 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.inspectJob != null && message.hasOwnProperty("inspectJob")) {
                                object.inspectJob = $root.google.privacy.dlp.v2.InspectJobConfig.toObject(message.inspectJob, options);
                                if (options.oneofs)
                                    object.job = "inspectJob";
                            }
                            if (message.triggers && message.triggers.length) {
                                object.triggers = [];
                                for (var j = 0; j < message.triggers.length; ++j)
                                    object.triggers[j] = $root.google.privacy.dlp.v2.JobTrigger.Trigger.toObject(message.triggers[j], options);
                            }
                            if (message.errors && message.errors.length) {
                                object.errors = [];
                                for (var j = 0; j < message.errors.length; ++j)
                                    object.errors[j] = $root.google.privacy.dlp.v2.Error.toObject(message.errors[j], options);
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.lastRunTime != null && message.hasOwnProperty("lastRunTime"))
                                object.lastRunTime = $root.google.protobuf.Timestamp.toObject(message.lastRunTime, options);
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = options.enums === String ? $root.google.privacy.dlp.v2.JobTrigger.Status[message.status] : message.status;
                            return object;
                        };
    
                        /**
                         * Converts this JobTrigger to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.JobTrigger
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        JobTrigger.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        JobTrigger.Trigger = (function() {
    
                            /**
                             * Properties of a Trigger.
                             * @memberof google.privacy.dlp.v2.JobTrigger
                             * @interface ITrigger
                             * @property {google.privacy.dlp.v2.ISchedule|null} [schedule] Trigger schedule
                             * @property {google.privacy.dlp.v2.IManual|null} [manual] Trigger manual
                             */
    
                            /**
                             * Constructs a new Trigger.
                             * @memberof google.privacy.dlp.v2.JobTrigger
                             * @classdesc Represents a Trigger.
                             * @implements ITrigger
                             * @constructor
                             * @param {google.privacy.dlp.v2.JobTrigger.ITrigger=} [properties] Properties to set
                             */
                            function Trigger(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Trigger schedule.
                             * @member {google.privacy.dlp.v2.ISchedule|null|undefined} schedule
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @instance
                             */
                            Trigger.prototype.schedule = null;
    
                            /**
                             * Trigger manual.
                             * @member {google.privacy.dlp.v2.IManual|null|undefined} manual
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @instance
                             */
                            Trigger.prototype.manual = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Trigger trigger.
                             * @member {"schedule"|"manual"|undefined} trigger
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @instance
                             */
                            Object.defineProperty(Trigger.prototype, "trigger", {
                                get: $util.oneOfGetter($oneOfFields = ["schedule", "manual"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Trigger instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {google.privacy.dlp.v2.JobTrigger.ITrigger=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.JobTrigger.Trigger} Trigger instance
                             */
                            Trigger.create = function create(properties) {
                                return new Trigger(properties);
                            };
    
                            /**
                             * Encodes the specified Trigger message. Does not implicitly {@link google.privacy.dlp.v2.JobTrigger.Trigger.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {google.privacy.dlp.v2.JobTrigger.ITrigger} message Trigger message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Trigger.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.schedule != null && Object.hasOwnProperty.call(message, "schedule"))
                                    $root.google.privacy.dlp.v2.Schedule.encode(message.schedule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.manual != null && Object.hasOwnProperty.call(message, "manual"))
                                    $root.google.privacy.dlp.v2.Manual.encode(message.manual, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Trigger message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.JobTrigger.Trigger.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {google.privacy.dlp.v2.JobTrigger.ITrigger} message Trigger message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Trigger.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Trigger message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.JobTrigger.Trigger} Trigger
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Trigger.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.JobTrigger.Trigger();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.schedule = $root.google.privacy.dlp.v2.Schedule.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.manual = $root.google.privacy.dlp.v2.Manual.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Trigger message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.JobTrigger.Trigger} Trigger
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Trigger.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Trigger message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Trigger.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.schedule != null && message.hasOwnProperty("schedule")) {
                                    properties.trigger = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.Schedule.verify(message.schedule);
                                        if (error)
                                            return "schedule." + error;
                                    }
                                }
                                if (message.manual != null && message.hasOwnProperty("manual")) {
                                    if (properties.trigger === 1)
                                        return "trigger: multiple values";
                                    properties.trigger = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.Manual.verify(message.manual);
                                        if (error)
                                            return "manual." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Trigger message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.JobTrigger.Trigger} Trigger
                             */
                            Trigger.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.JobTrigger.Trigger)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.JobTrigger.Trigger();
                                if (object.schedule != null) {
                                    if (typeof object.schedule !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.JobTrigger.Trigger.schedule: object expected");
                                    message.schedule = $root.google.privacy.dlp.v2.Schedule.fromObject(object.schedule);
                                }
                                if (object.manual != null) {
                                    if (typeof object.manual !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.JobTrigger.Trigger.manual: object expected");
                                    message.manual = $root.google.privacy.dlp.v2.Manual.fromObject(object.manual);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Trigger message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @static
                             * @param {google.privacy.dlp.v2.JobTrigger.Trigger} message Trigger
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Trigger.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.schedule != null && message.hasOwnProperty("schedule")) {
                                    object.schedule = $root.google.privacy.dlp.v2.Schedule.toObject(message.schedule, options);
                                    if (options.oneofs)
                                        object.trigger = "schedule";
                                }
                                if (message.manual != null && message.hasOwnProperty("manual")) {
                                    object.manual = $root.google.privacy.dlp.v2.Manual.toObject(message.manual, options);
                                    if (options.oneofs)
                                        object.trigger = "manual";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Trigger to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.JobTrigger.Trigger
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Trigger.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Trigger;
                        })();
    
                        /**
                         * Status enum.
                         * @name google.privacy.dlp.v2.JobTrigger.Status
                         * @enum {number}
                         * @property {number} STATUS_UNSPECIFIED=0 STATUS_UNSPECIFIED value
                         * @property {number} HEALTHY=1 HEALTHY value
                         * @property {number} PAUSED=2 PAUSED value
                         * @property {number} CANCELLED=3 CANCELLED value
                         */
                        JobTrigger.Status = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATUS_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "HEALTHY"] = 1;
                            values[valuesById[2] = "PAUSED"] = 2;
                            values[valuesById[3] = "CANCELLED"] = 3;
                            return values;
                        })();
    
                        return JobTrigger;
                    })();
    
                    v2.Action = (function() {
    
                        /**
                         * Properties of an Action.
                         * @memberof google.privacy.dlp.v2
                         * @interface IAction
                         * @property {google.privacy.dlp.v2.Action.ISaveFindings|null} [saveFindings] Action saveFindings
                         * @property {google.privacy.dlp.v2.Action.IPublishToPubSub|null} [pubSub] Action pubSub
                         * @property {google.privacy.dlp.v2.Action.IPublishSummaryToCscc|null} [publishSummaryToCscc] Action publishSummaryToCscc
                         * @property {google.privacy.dlp.v2.Action.IPublishFindingsToCloudDataCatalog|null} [publishFindingsToCloudDataCatalog] Action publishFindingsToCloudDataCatalog
                         * @property {google.privacy.dlp.v2.Action.IJobNotificationEmails|null} [jobNotificationEmails] Action jobNotificationEmails
                         * @property {google.privacy.dlp.v2.Action.IPublishToStackdriver|null} [publishToStackdriver] Action publishToStackdriver
                         */
    
                        /**
                         * Constructs a new Action.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an Action.
                         * @implements IAction
                         * @constructor
                         * @param {google.privacy.dlp.v2.IAction=} [properties] Properties to set
                         */
                        function Action(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Action saveFindings.
                         * @member {google.privacy.dlp.v2.Action.ISaveFindings|null|undefined} saveFindings
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Action.prototype.saveFindings = null;
    
                        /**
                         * Action pubSub.
                         * @member {google.privacy.dlp.v2.Action.IPublishToPubSub|null|undefined} pubSub
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Action.prototype.pubSub = null;
    
                        /**
                         * Action publishSummaryToCscc.
                         * @member {google.privacy.dlp.v2.Action.IPublishSummaryToCscc|null|undefined} publishSummaryToCscc
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Action.prototype.publishSummaryToCscc = null;
    
                        /**
                         * Action publishFindingsToCloudDataCatalog.
                         * @member {google.privacy.dlp.v2.Action.IPublishFindingsToCloudDataCatalog|null|undefined} publishFindingsToCloudDataCatalog
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Action.prototype.publishFindingsToCloudDataCatalog = null;
    
                        /**
                         * Action jobNotificationEmails.
                         * @member {google.privacy.dlp.v2.Action.IJobNotificationEmails|null|undefined} jobNotificationEmails
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Action.prototype.jobNotificationEmails = null;
    
                        /**
                         * Action publishToStackdriver.
                         * @member {google.privacy.dlp.v2.Action.IPublishToStackdriver|null|undefined} publishToStackdriver
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Action.prototype.publishToStackdriver = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Action action.
                         * @member {"saveFindings"|"pubSub"|"publishSummaryToCscc"|"publishFindingsToCloudDataCatalog"|"jobNotificationEmails"|"publishToStackdriver"|undefined} action
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         */
                        Object.defineProperty(Action.prototype, "action", {
                            get: $util.oneOfGetter($oneOfFields = ["saveFindings", "pubSub", "publishSummaryToCscc", "publishFindingsToCloudDataCatalog", "jobNotificationEmails", "publishToStackdriver"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Action instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {google.privacy.dlp.v2.IAction=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Action} Action instance
                         */
                        Action.create = function create(properties) {
                            return new Action(properties);
                        };
    
                        /**
                         * Encodes the specified Action message. Does not implicitly {@link google.privacy.dlp.v2.Action.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {google.privacy.dlp.v2.IAction} message Action message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Action.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.saveFindings != null && Object.hasOwnProperty.call(message, "saveFindings"))
                                $root.google.privacy.dlp.v2.Action.SaveFindings.encode(message.saveFindings, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pubSub != null && Object.hasOwnProperty.call(message, "pubSub"))
                                $root.google.privacy.dlp.v2.Action.PublishToPubSub.encode(message.pubSub, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.publishSummaryToCscc != null && Object.hasOwnProperty.call(message, "publishSummaryToCscc"))
                                $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc.encode(message.publishSummaryToCscc, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.publishFindingsToCloudDataCatalog != null && Object.hasOwnProperty.call(message, "publishFindingsToCloudDataCatalog"))
                                $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.encode(message.publishFindingsToCloudDataCatalog, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.jobNotificationEmails != null && Object.hasOwnProperty.call(message, "jobNotificationEmails"))
                                $root.google.privacy.dlp.v2.Action.JobNotificationEmails.encode(message.jobNotificationEmails, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.publishToStackdriver != null && Object.hasOwnProperty.call(message, "publishToStackdriver"))
                                $root.google.privacy.dlp.v2.Action.PublishToStackdriver.encode(message.publishToStackdriver, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Action message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {google.privacy.dlp.v2.IAction} message Action message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Action.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Action message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Action} Action
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Action.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.saveFindings = $root.google.privacy.dlp.v2.Action.SaveFindings.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.pubSub = $root.google.privacy.dlp.v2.Action.PublishToPubSub.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.publishSummaryToCscc = $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.publishFindingsToCloudDataCatalog = $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.jobNotificationEmails = $root.google.privacy.dlp.v2.Action.JobNotificationEmails.decode(reader, reader.uint32());
                                    break;
                                case 9:
                                    message.publishToStackdriver = $root.google.privacy.dlp.v2.Action.PublishToStackdriver.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Action message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Action} Action
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Action.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Action message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Action.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.saveFindings != null && message.hasOwnProperty("saveFindings")) {
                                properties.action = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Action.SaveFindings.verify(message.saveFindings);
                                    if (error)
                                        return "saveFindings." + error;
                                }
                            }
                            if (message.pubSub != null && message.hasOwnProperty("pubSub")) {
                                if (properties.action === 1)
                                    return "action: multiple values";
                                properties.action = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Action.PublishToPubSub.verify(message.pubSub);
                                    if (error)
                                        return "pubSub." + error;
                                }
                            }
                            if (message.publishSummaryToCscc != null && message.hasOwnProperty("publishSummaryToCscc")) {
                                if (properties.action === 1)
                                    return "action: multiple values";
                                properties.action = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc.verify(message.publishSummaryToCscc);
                                    if (error)
                                        return "publishSummaryToCscc." + error;
                                }
                            }
                            if (message.publishFindingsToCloudDataCatalog != null && message.hasOwnProperty("publishFindingsToCloudDataCatalog")) {
                                if (properties.action === 1)
                                    return "action: multiple values";
                                properties.action = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.verify(message.publishFindingsToCloudDataCatalog);
                                    if (error)
                                        return "publishFindingsToCloudDataCatalog." + error;
                                }
                            }
                            if (message.jobNotificationEmails != null && message.hasOwnProperty("jobNotificationEmails")) {
                                if (properties.action === 1)
                                    return "action: multiple values";
                                properties.action = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Action.JobNotificationEmails.verify(message.jobNotificationEmails);
                                    if (error)
                                        return "jobNotificationEmails." + error;
                                }
                            }
                            if (message.publishToStackdriver != null && message.hasOwnProperty("publishToStackdriver")) {
                                if (properties.action === 1)
                                    return "action: multiple values";
                                properties.action = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.Action.PublishToStackdriver.verify(message.publishToStackdriver);
                                    if (error)
                                        return "publishToStackdriver." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Action message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Action} Action
                         */
                        Action.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Action)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Action();
                            if (object.saveFindings != null) {
                                if (typeof object.saveFindings !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Action.saveFindings: object expected");
                                message.saveFindings = $root.google.privacy.dlp.v2.Action.SaveFindings.fromObject(object.saveFindings);
                            }
                            if (object.pubSub != null) {
                                if (typeof object.pubSub !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Action.pubSub: object expected");
                                message.pubSub = $root.google.privacy.dlp.v2.Action.PublishToPubSub.fromObject(object.pubSub);
                            }
                            if (object.publishSummaryToCscc != null) {
                                if (typeof object.publishSummaryToCscc !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Action.publishSummaryToCscc: object expected");
                                message.publishSummaryToCscc = $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc.fromObject(object.publishSummaryToCscc);
                            }
                            if (object.publishFindingsToCloudDataCatalog != null) {
                                if (typeof object.publishFindingsToCloudDataCatalog !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Action.publishFindingsToCloudDataCatalog: object expected");
                                message.publishFindingsToCloudDataCatalog = $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.fromObject(object.publishFindingsToCloudDataCatalog);
                            }
                            if (object.jobNotificationEmails != null) {
                                if (typeof object.jobNotificationEmails !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Action.jobNotificationEmails: object expected");
                                message.jobNotificationEmails = $root.google.privacy.dlp.v2.Action.JobNotificationEmails.fromObject(object.jobNotificationEmails);
                            }
                            if (object.publishToStackdriver != null) {
                                if (typeof object.publishToStackdriver !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Action.publishToStackdriver: object expected");
                                message.publishToStackdriver = $root.google.privacy.dlp.v2.Action.PublishToStackdriver.fromObject(object.publishToStackdriver);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Action message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Action
                         * @static
                         * @param {google.privacy.dlp.v2.Action} message Action
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Action.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.saveFindings != null && message.hasOwnProperty("saveFindings")) {
                                object.saveFindings = $root.google.privacy.dlp.v2.Action.SaveFindings.toObject(message.saveFindings, options);
                                if (options.oneofs)
                                    object.action = "saveFindings";
                            }
                            if (message.pubSub != null && message.hasOwnProperty("pubSub")) {
                                object.pubSub = $root.google.privacy.dlp.v2.Action.PublishToPubSub.toObject(message.pubSub, options);
                                if (options.oneofs)
                                    object.action = "pubSub";
                            }
                            if (message.publishSummaryToCscc != null && message.hasOwnProperty("publishSummaryToCscc")) {
                                object.publishSummaryToCscc = $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc.toObject(message.publishSummaryToCscc, options);
                                if (options.oneofs)
                                    object.action = "publishSummaryToCscc";
                            }
                            if (message.publishFindingsToCloudDataCatalog != null && message.hasOwnProperty("publishFindingsToCloudDataCatalog")) {
                                object.publishFindingsToCloudDataCatalog = $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.toObject(message.publishFindingsToCloudDataCatalog, options);
                                if (options.oneofs)
                                    object.action = "publishFindingsToCloudDataCatalog";
                            }
                            if (message.jobNotificationEmails != null && message.hasOwnProperty("jobNotificationEmails")) {
                                object.jobNotificationEmails = $root.google.privacy.dlp.v2.Action.JobNotificationEmails.toObject(message.jobNotificationEmails, options);
                                if (options.oneofs)
                                    object.action = "jobNotificationEmails";
                            }
                            if (message.publishToStackdriver != null && message.hasOwnProperty("publishToStackdriver")) {
                                object.publishToStackdriver = $root.google.privacy.dlp.v2.Action.PublishToStackdriver.toObject(message.publishToStackdriver, options);
                                if (options.oneofs)
                                    object.action = "publishToStackdriver";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Action to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Action
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Action.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        Action.SaveFindings = (function() {
    
                            /**
                             * Properties of a SaveFindings.
                             * @memberof google.privacy.dlp.v2.Action
                             * @interface ISaveFindings
                             * @property {google.privacy.dlp.v2.IOutputStorageConfig|null} [outputConfig] SaveFindings outputConfig
                             */
    
                            /**
                             * Constructs a new SaveFindings.
                             * @memberof google.privacy.dlp.v2.Action
                             * @classdesc Represents a SaveFindings.
                             * @implements ISaveFindings
                             * @constructor
                             * @param {google.privacy.dlp.v2.Action.ISaveFindings=} [properties] Properties to set
                             */
                            function SaveFindings(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * SaveFindings outputConfig.
                             * @member {google.privacy.dlp.v2.IOutputStorageConfig|null|undefined} outputConfig
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @instance
                             */
                            SaveFindings.prototype.outputConfig = null;
    
                            /**
                             * Creates a new SaveFindings instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {google.privacy.dlp.v2.Action.ISaveFindings=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Action.SaveFindings} SaveFindings instance
                             */
                            SaveFindings.create = function create(properties) {
                                return new SaveFindings(properties);
                            };
    
                            /**
                             * Encodes the specified SaveFindings message. Does not implicitly {@link google.privacy.dlp.v2.Action.SaveFindings.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {google.privacy.dlp.v2.Action.ISaveFindings} message SaveFindings message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SaveFindings.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.outputConfig != null && Object.hasOwnProperty.call(message, "outputConfig"))
                                    $root.google.privacy.dlp.v2.OutputStorageConfig.encode(message.outputConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SaveFindings message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.SaveFindings.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {google.privacy.dlp.v2.Action.ISaveFindings} message SaveFindings message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SaveFindings.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SaveFindings message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Action.SaveFindings} SaveFindings
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SaveFindings.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action.SaveFindings();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.outputConfig = $root.google.privacy.dlp.v2.OutputStorageConfig.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SaveFindings message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Action.SaveFindings} SaveFindings
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SaveFindings.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SaveFindings message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SaveFindings.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.outputConfig != null && message.hasOwnProperty("outputConfig")) {
                                    var error = $root.google.privacy.dlp.v2.OutputStorageConfig.verify(message.outputConfig);
                                    if (error)
                                        return "outputConfig." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a SaveFindings message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Action.SaveFindings} SaveFindings
                             */
                            SaveFindings.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Action.SaveFindings)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.Action.SaveFindings();
                                if (object.outputConfig != null) {
                                    if (typeof object.outputConfig !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.Action.SaveFindings.outputConfig: object expected");
                                    message.outputConfig = $root.google.privacy.dlp.v2.OutputStorageConfig.fromObject(object.outputConfig);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a SaveFindings message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @static
                             * @param {google.privacy.dlp.v2.Action.SaveFindings} message SaveFindings
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SaveFindings.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.outputConfig = null;
                                if (message.outputConfig != null && message.hasOwnProperty("outputConfig"))
                                    object.outputConfig = $root.google.privacy.dlp.v2.OutputStorageConfig.toObject(message.outputConfig, options);
                                return object;
                            };
    
                            /**
                             * Converts this SaveFindings to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Action.SaveFindings
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SaveFindings.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return SaveFindings;
                        })();
    
                        Action.PublishToPubSub = (function() {
    
                            /**
                             * Properties of a PublishToPubSub.
                             * @memberof google.privacy.dlp.v2.Action
                             * @interface IPublishToPubSub
                             * @property {string|null} [topic] PublishToPubSub topic
                             */
    
                            /**
                             * Constructs a new PublishToPubSub.
                             * @memberof google.privacy.dlp.v2.Action
                             * @classdesc Represents a PublishToPubSub.
                             * @implements IPublishToPubSub
                             * @constructor
                             * @param {google.privacy.dlp.v2.Action.IPublishToPubSub=} [properties] Properties to set
                             */
                            function PublishToPubSub(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * PublishToPubSub topic.
                             * @member {string} topic
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @instance
                             */
                            PublishToPubSub.prototype.topic = "";
    
                            /**
                             * Creates a new PublishToPubSub instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishToPubSub=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Action.PublishToPubSub} PublishToPubSub instance
                             */
                            PublishToPubSub.create = function create(properties) {
                                return new PublishToPubSub(properties);
                            };
    
                            /**
                             * Encodes the specified PublishToPubSub message. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishToPubSub.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishToPubSub} message PublishToPubSub message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishToPubSub.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.topic != null && Object.hasOwnProperty.call(message, "topic"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.topic);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PublishToPubSub message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishToPubSub.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishToPubSub} message PublishToPubSub message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishToPubSub.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PublishToPubSub message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Action.PublishToPubSub} PublishToPubSub
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishToPubSub.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action.PublishToPubSub();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.topic = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PublishToPubSub message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Action.PublishToPubSub} PublishToPubSub
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishToPubSub.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PublishToPubSub message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PublishToPubSub.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.topic != null && message.hasOwnProperty("topic"))
                                    if (!$util.isString(message.topic))
                                        return "topic: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a PublishToPubSub message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Action.PublishToPubSub} PublishToPubSub
                             */
                            PublishToPubSub.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Action.PublishToPubSub)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.Action.PublishToPubSub();
                                if (object.topic != null)
                                    message.topic = String(object.topic);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a PublishToPubSub message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @static
                             * @param {google.privacy.dlp.v2.Action.PublishToPubSub} message PublishToPubSub
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PublishToPubSub.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.topic = "";
                                if (message.topic != null && message.hasOwnProperty("topic"))
                                    object.topic = message.topic;
                                return object;
                            };
    
                            /**
                             * Converts this PublishToPubSub to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Action.PublishToPubSub
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PublishToPubSub.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return PublishToPubSub;
                        })();
    
                        Action.PublishSummaryToCscc = (function() {
    
                            /**
                             * Properties of a PublishSummaryToCscc.
                             * @memberof google.privacy.dlp.v2.Action
                             * @interface IPublishSummaryToCscc
                             */
    
                            /**
                             * Constructs a new PublishSummaryToCscc.
                             * @memberof google.privacy.dlp.v2.Action
                             * @classdesc Represents a PublishSummaryToCscc.
                             * @implements IPublishSummaryToCscc
                             * @constructor
                             * @param {google.privacy.dlp.v2.Action.IPublishSummaryToCscc=} [properties] Properties to set
                             */
                            function PublishSummaryToCscc(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new PublishSummaryToCscc instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishSummaryToCscc=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Action.PublishSummaryToCscc} PublishSummaryToCscc instance
                             */
                            PublishSummaryToCscc.create = function create(properties) {
                                return new PublishSummaryToCscc(properties);
                            };
    
                            /**
                             * Encodes the specified PublishSummaryToCscc message. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishSummaryToCscc.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishSummaryToCscc} message PublishSummaryToCscc message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishSummaryToCscc.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PublishSummaryToCscc message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishSummaryToCscc.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishSummaryToCscc} message PublishSummaryToCscc message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishSummaryToCscc.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PublishSummaryToCscc message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Action.PublishSummaryToCscc} PublishSummaryToCscc
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishSummaryToCscc.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PublishSummaryToCscc message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Action.PublishSummaryToCscc} PublishSummaryToCscc
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishSummaryToCscc.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PublishSummaryToCscc message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PublishSummaryToCscc.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a PublishSummaryToCscc message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Action.PublishSummaryToCscc} PublishSummaryToCscc
                             */
                            PublishSummaryToCscc.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc)
                                    return object;
                                return new $root.google.privacy.dlp.v2.Action.PublishSummaryToCscc();
                            };
    
                            /**
                             * Creates a plain object from a PublishSummaryToCscc message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @static
                             * @param {google.privacy.dlp.v2.Action.PublishSummaryToCscc} message PublishSummaryToCscc
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PublishSummaryToCscc.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this PublishSummaryToCscc to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Action.PublishSummaryToCscc
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PublishSummaryToCscc.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return PublishSummaryToCscc;
                        })();
    
                        Action.PublishFindingsToCloudDataCatalog = (function() {
    
                            /**
                             * Properties of a PublishFindingsToCloudDataCatalog.
                             * @memberof google.privacy.dlp.v2.Action
                             * @interface IPublishFindingsToCloudDataCatalog
                             */
    
                            /**
                             * Constructs a new PublishFindingsToCloudDataCatalog.
                             * @memberof google.privacy.dlp.v2.Action
                             * @classdesc Represents a PublishFindingsToCloudDataCatalog.
                             * @implements IPublishFindingsToCloudDataCatalog
                             * @constructor
                             * @param {google.privacy.dlp.v2.Action.IPublishFindingsToCloudDataCatalog=} [properties] Properties to set
                             */
                            function PublishFindingsToCloudDataCatalog(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new PublishFindingsToCloudDataCatalog instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishFindingsToCloudDataCatalog=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog} PublishFindingsToCloudDataCatalog instance
                             */
                            PublishFindingsToCloudDataCatalog.create = function create(properties) {
                                return new PublishFindingsToCloudDataCatalog(properties);
                            };
    
                            /**
                             * Encodes the specified PublishFindingsToCloudDataCatalog message. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishFindingsToCloudDataCatalog} message PublishFindingsToCloudDataCatalog message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishFindingsToCloudDataCatalog.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PublishFindingsToCloudDataCatalog message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishFindingsToCloudDataCatalog} message PublishFindingsToCloudDataCatalog message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishFindingsToCloudDataCatalog.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PublishFindingsToCloudDataCatalog message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog} PublishFindingsToCloudDataCatalog
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishFindingsToCloudDataCatalog.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PublishFindingsToCloudDataCatalog message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog} PublishFindingsToCloudDataCatalog
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishFindingsToCloudDataCatalog.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PublishFindingsToCloudDataCatalog message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PublishFindingsToCloudDataCatalog.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a PublishFindingsToCloudDataCatalog message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog} PublishFindingsToCloudDataCatalog
                             */
                            PublishFindingsToCloudDataCatalog.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
                                    return object;
                                return new $root.google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog();
                            };
    
                            /**
                             * Creates a plain object from a PublishFindingsToCloudDataCatalog message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @static
                             * @param {google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog} message PublishFindingsToCloudDataCatalog
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PublishFindingsToCloudDataCatalog.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this PublishFindingsToCloudDataCatalog to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PublishFindingsToCloudDataCatalog.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return PublishFindingsToCloudDataCatalog;
                        })();
    
                        Action.JobNotificationEmails = (function() {
    
                            /**
                             * Properties of a JobNotificationEmails.
                             * @memberof google.privacy.dlp.v2.Action
                             * @interface IJobNotificationEmails
                             */
    
                            /**
                             * Constructs a new JobNotificationEmails.
                             * @memberof google.privacy.dlp.v2.Action
                             * @classdesc Represents a JobNotificationEmails.
                             * @implements IJobNotificationEmails
                             * @constructor
                             * @param {google.privacy.dlp.v2.Action.IJobNotificationEmails=} [properties] Properties to set
                             */
                            function JobNotificationEmails(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new JobNotificationEmails instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IJobNotificationEmails=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Action.JobNotificationEmails} JobNotificationEmails instance
                             */
                            JobNotificationEmails.create = function create(properties) {
                                return new JobNotificationEmails(properties);
                            };
    
                            /**
                             * Encodes the specified JobNotificationEmails message. Does not implicitly {@link google.privacy.dlp.v2.Action.JobNotificationEmails.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IJobNotificationEmails} message JobNotificationEmails message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            JobNotificationEmails.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified JobNotificationEmails message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.JobNotificationEmails.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IJobNotificationEmails} message JobNotificationEmails message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            JobNotificationEmails.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a JobNotificationEmails message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Action.JobNotificationEmails} JobNotificationEmails
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            JobNotificationEmails.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action.JobNotificationEmails();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a JobNotificationEmails message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Action.JobNotificationEmails} JobNotificationEmails
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            JobNotificationEmails.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a JobNotificationEmails message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            JobNotificationEmails.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a JobNotificationEmails message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Action.JobNotificationEmails} JobNotificationEmails
                             */
                            JobNotificationEmails.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Action.JobNotificationEmails)
                                    return object;
                                return new $root.google.privacy.dlp.v2.Action.JobNotificationEmails();
                            };
    
                            /**
                             * Creates a plain object from a JobNotificationEmails message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @static
                             * @param {google.privacy.dlp.v2.Action.JobNotificationEmails} message JobNotificationEmails
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            JobNotificationEmails.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this JobNotificationEmails to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Action.JobNotificationEmails
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            JobNotificationEmails.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return JobNotificationEmails;
                        })();
    
                        Action.PublishToStackdriver = (function() {
    
                            /**
                             * Properties of a PublishToStackdriver.
                             * @memberof google.privacy.dlp.v2.Action
                             * @interface IPublishToStackdriver
                             */
    
                            /**
                             * Constructs a new PublishToStackdriver.
                             * @memberof google.privacy.dlp.v2.Action
                             * @classdesc Represents a PublishToStackdriver.
                             * @implements IPublishToStackdriver
                             * @constructor
                             * @param {google.privacy.dlp.v2.Action.IPublishToStackdriver=} [properties] Properties to set
                             */
                            function PublishToStackdriver(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new PublishToStackdriver instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishToStackdriver=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Action.PublishToStackdriver} PublishToStackdriver instance
                             */
                            PublishToStackdriver.create = function create(properties) {
                                return new PublishToStackdriver(properties);
                            };
    
                            /**
                             * Encodes the specified PublishToStackdriver message. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishToStackdriver.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishToStackdriver} message PublishToStackdriver message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishToStackdriver.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PublishToStackdriver message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Action.PublishToStackdriver.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {google.privacy.dlp.v2.Action.IPublishToStackdriver} message PublishToStackdriver message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PublishToStackdriver.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PublishToStackdriver message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Action.PublishToStackdriver} PublishToStackdriver
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishToStackdriver.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Action.PublishToStackdriver();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PublishToStackdriver message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Action.PublishToStackdriver} PublishToStackdriver
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PublishToStackdriver.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PublishToStackdriver message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PublishToStackdriver.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a PublishToStackdriver message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Action.PublishToStackdriver} PublishToStackdriver
                             */
                            PublishToStackdriver.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Action.PublishToStackdriver)
                                    return object;
                                return new $root.google.privacy.dlp.v2.Action.PublishToStackdriver();
                            };
    
                            /**
                             * Creates a plain object from a PublishToStackdriver message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @static
                             * @param {google.privacy.dlp.v2.Action.PublishToStackdriver} message PublishToStackdriver
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PublishToStackdriver.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this PublishToStackdriver to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Action.PublishToStackdriver
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PublishToStackdriver.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return PublishToStackdriver;
                        })();
    
                        return Action;
                    })();
    
                    v2.CreateInspectTemplateRequest = (function() {
    
                        /**
                         * Properties of a CreateInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICreateInspectTemplateRequest
                         * @property {string|null} [parent] CreateInspectTemplateRequest parent
                         * @property {google.privacy.dlp.v2.IInspectTemplate|null} [inspectTemplate] CreateInspectTemplateRequest inspectTemplate
                         * @property {string|null} [templateId] CreateInspectTemplateRequest templateId
                         * @property {string|null} [locationId] CreateInspectTemplateRequest locationId
                         */
    
                        /**
                         * Constructs a new CreateInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CreateInspectTemplateRequest.
                         * @implements ICreateInspectTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICreateInspectTemplateRequest=} [properties] Properties to set
                         */
                        function CreateInspectTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateInspectTemplateRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @instance
                         */
                        CreateInspectTemplateRequest.prototype.parent = "";
    
                        /**
                         * CreateInspectTemplateRequest inspectTemplate.
                         * @member {google.privacy.dlp.v2.IInspectTemplate|null|undefined} inspectTemplate
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @instance
                         */
                        CreateInspectTemplateRequest.prototype.inspectTemplate = null;
    
                        /**
                         * CreateInspectTemplateRequest templateId.
                         * @member {string} templateId
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @instance
                         */
                        CreateInspectTemplateRequest.prototype.templateId = "";
    
                        /**
                         * CreateInspectTemplateRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @instance
                         */
                        CreateInspectTemplateRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new CreateInspectTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateInspectTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CreateInspectTemplateRequest} CreateInspectTemplateRequest instance
                         */
                        CreateInspectTemplateRequest.create = function create(properties) {
                            return new CreateInspectTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateInspectTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.CreateInspectTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateInspectTemplateRequest} message CreateInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateInspectTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.inspectTemplate != null && Object.hasOwnProperty.call(message, "inspectTemplate"))
                                $root.google.privacy.dlp.v2.InspectTemplate.encode(message.inspectTemplate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.templateId != null && Object.hasOwnProperty.call(message, "templateId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.templateId);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateInspectTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CreateInspectTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateInspectTemplateRequest} message CreateInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateInspectTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateInspectTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CreateInspectTemplateRequest} CreateInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateInspectTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CreateInspectTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.inspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.templateId = reader.string();
                                    break;
                                case 4:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateInspectTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CreateInspectTemplateRequest} CreateInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateInspectTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateInspectTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateInspectTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.inspectTemplate != null && message.hasOwnProperty("inspectTemplate")) {
                                var error = $root.google.privacy.dlp.v2.InspectTemplate.verify(message.inspectTemplate);
                                if (error)
                                    return "inspectTemplate." + error;
                            }
                            if (message.templateId != null && message.hasOwnProperty("templateId"))
                                if (!$util.isString(message.templateId))
                                    return "templateId: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateInspectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CreateInspectTemplateRequest} CreateInspectTemplateRequest
                         */
                        CreateInspectTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CreateInspectTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CreateInspectTemplateRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.inspectTemplate != null) {
                                if (typeof object.inspectTemplate !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CreateInspectTemplateRequest.inspectTemplate: object expected");
                                message.inspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.fromObject(object.inspectTemplate);
                            }
                            if (object.templateId != null)
                                message.templateId = String(object.templateId);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateInspectTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.CreateInspectTemplateRequest} message CreateInspectTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateInspectTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.inspectTemplate = null;
                                object.templateId = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.inspectTemplate != null && message.hasOwnProperty("inspectTemplate"))
                                object.inspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.toObject(message.inspectTemplate, options);
                            if (message.templateId != null && message.hasOwnProperty("templateId"))
                                object.templateId = message.templateId;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateInspectTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CreateInspectTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateInspectTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateInspectTemplateRequest;
                    })();
    
                    v2.UpdateInspectTemplateRequest = (function() {
    
                        /**
                         * Properties of an UpdateInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IUpdateInspectTemplateRequest
                         * @property {string|null} [name] UpdateInspectTemplateRequest name
                         * @property {google.privacy.dlp.v2.IInspectTemplate|null} [inspectTemplate] UpdateInspectTemplateRequest inspectTemplate
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateInspectTemplateRequest updateMask
                         */
    
                        /**
                         * Constructs a new UpdateInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an UpdateInspectTemplateRequest.
                         * @implements IUpdateInspectTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IUpdateInspectTemplateRequest=} [properties] Properties to set
                         */
                        function UpdateInspectTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateInspectTemplateRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @instance
                         */
                        UpdateInspectTemplateRequest.prototype.name = "";
    
                        /**
                         * UpdateInspectTemplateRequest inspectTemplate.
                         * @member {google.privacy.dlp.v2.IInspectTemplate|null|undefined} inspectTemplate
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @instance
                         */
                        UpdateInspectTemplateRequest.prototype.inspectTemplate = null;
    
                        /**
                         * UpdateInspectTemplateRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @instance
                         */
                        UpdateInspectTemplateRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new UpdateInspectTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateInspectTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.UpdateInspectTemplateRequest} UpdateInspectTemplateRequest instance
                         */
                        UpdateInspectTemplateRequest.create = function create(properties) {
                            return new UpdateInspectTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateInspectTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.UpdateInspectTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateInspectTemplateRequest} message UpdateInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateInspectTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.inspectTemplate != null && Object.hasOwnProperty.call(message, "inspectTemplate"))
                                $root.google.privacy.dlp.v2.InspectTemplate.encode(message.inspectTemplate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateInspectTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.UpdateInspectTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateInspectTemplateRequest} message UpdateInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateInspectTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateInspectTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.UpdateInspectTemplateRequest} UpdateInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateInspectTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.UpdateInspectTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.inspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateInspectTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.UpdateInspectTemplateRequest} UpdateInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateInspectTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateInspectTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateInspectTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.inspectTemplate != null && message.hasOwnProperty("inspectTemplate")) {
                                var error = $root.google.privacy.dlp.v2.InspectTemplate.verify(message.inspectTemplate);
                                if (error)
                                    return "inspectTemplate." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateInspectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.UpdateInspectTemplateRequest} UpdateInspectTemplateRequest
                         */
                        UpdateInspectTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.UpdateInspectTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.UpdateInspectTemplateRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.inspectTemplate != null) {
                                if (typeof object.inspectTemplate !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateInspectTemplateRequest.inspectTemplate: object expected");
                                message.inspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.fromObject(object.inspectTemplate);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateInspectTemplateRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateInspectTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.UpdateInspectTemplateRequest} message UpdateInspectTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateInspectTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.inspectTemplate = null;
                                object.updateMask = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.inspectTemplate != null && message.hasOwnProperty("inspectTemplate"))
                                object.inspectTemplate = $root.google.privacy.dlp.v2.InspectTemplate.toObject(message.inspectTemplate, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateInspectTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.UpdateInspectTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateInspectTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateInspectTemplateRequest;
                    })();
    
                    v2.GetInspectTemplateRequest = (function() {
    
                        /**
                         * Properties of a GetInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IGetInspectTemplateRequest
                         * @property {string|null} [name] GetInspectTemplateRequest name
                         */
    
                        /**
                         * Constructs a new GetInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a GetInspectTemplateRequest.
                         * @implements IGetInspectTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IGetInspectTemplateRequest=} [properties] Properties to set
                         */
                        function GetInspectTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetInspectTemplateRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @instance
                         */
                        GetInspectTemplateRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetInspectTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetInspectTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.GetInspectTemplateRequest} GetInspectTemplateRequest instance
                         */
                        GetInspectTemplateRequest.create = function create(properties) {
                            return new GetInspectTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetInspectTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.GetInspectTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetInspectTemplateRequest} message GetInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetInspectTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetInspectTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.GetInspectTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetInspectTemplateRequest} message GetInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetInspectTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetInspectTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.GetInspectTemplateRequest} GetInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetInspectTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.GetInspectTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetInspectTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.GetInspectTemplateRequest} GetInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetInspectTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetInspectTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetInspectTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetInspectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.GetInspectTemplateRequest} GetInspectTemplateRequest
                         */
                        GetInspectTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.GetInspectTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.GetInspectTemplateRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetInspectTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.GetInspectTemplateRequest} message GetInspectTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetInspectTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetInspectTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.GetInspectTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetInspectTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetInspectTemplateRequest;
                    })();
    
                    v2.ListInspectTemplatesRequest = (function() {
    
                        /**
                         * Properties of a ListInspectTemplatesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListInspectTemplatesRequest
                         * @property {string|null} [parent] ListInspectTemplatesRequest parent
                         * @property {string|null} [pageToken] ListInspectTemplatesRequest pageToken
                         * @property {number|null} [pageSize] ListInspectTemplatesRequest pageSize
                         * @property {string|null} [orderBy] ListInspectTemplatesRequest orderBy
                         * @property {string|null} [locationId] ListInspectTemplatesRequest locationId
                         */
    
                        /**
                         * Constructs a new ListInspectTemplatesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListInspectTemplatesRequest.
                         * @implements IListInspectTemplatesRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesRequest=} [properties] Properties to set
                         */
                        function ListInspectTemplatesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListInspectTemplatesRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @instance
                         */
                        ListInspectTemplatesRequest.prototype.parent = "";
    
                        /**
                         * ListInspectTemplatesRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @instance
                         */
                        ListInspectTemplatesRequest.prototype.pageToken = "";
    
                        /**
                         * ListInspectTemplatesRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @instance
                         */
                        ListInspectTemplatesRequest.prototype.pageSize = 0;
    
                        /**
                         * ListInspectTemplatesRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @instance
                         */
                        ListInspectTemplatesRequest.prototype.orderBy = "";
    
                        /**
                         * ListInspectTemplatesRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @instance
                         */
                        ListInspectTemplatesRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ListInspectTemplatesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesRequest} ListInspectTemplatesRequest instance
                         */
                        ListInspectTemplatesRequest.create = function create(properties) {
                            return new ListInspectTemplatesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListInspectTemplatesRequest message. Does not implicitly {@link google.privacy.dlp.v2.ListInspectTemplatesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesRequest} message ListInspectTemplatesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInspectTemplatesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderBy);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListInspectTemplatesRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListInspectTemplatesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesRequest} message ListInspectTemplatesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInspectTemplatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListInspectTemplatesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesRequest} ListInspectTemplatesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInspectTemplatesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListInspectTemplatesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                case 3:
                                    message.pageSize = reader.int32();
                                    break;
                                case 4:
                                    message.orderBy = reader.string();
                                    break;
                                case 5:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListInspectTemplatesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesRequest} ListInspectTemplatesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInspectTemplatesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListInspectTemplatesRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListInspectTemplatesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListInspectTemplatesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesRequest} ListInspectTemplatesRequest
                         */
                        ListInspectTemplatesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListInspectTemplatesRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListInspectTemplatesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListInspectTemplatesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ListInspectTemplatesRequest} message ListInspectTemplatesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListInspectTemplatesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this ListInspectTemplatesRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListInspectTemplatesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListInspectTemplatesRequest;
                    })();
    
                    v2.ListInspectTemplatesResponse = (function() {
    
                        /**
                         * Properties of a ListInspectTemplatesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListInspectTemplatesResponse
                         * @property {Array.<google.privacy.dlp.v2.IInspectTemplate>|null} [inspectTemplates] ListInspectTemplatesResponse inspectTemplates
                         * @property {string|null} [nextPageToken] ListInspectTemplatesResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListInspectTemplatesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListInspectTemplatesResponse.
                         * @implements IListInspectTemplatesResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesResponse=} [properties] Properties to set
                         */
                        function ListInspectTemplatesResponse(properties) {
                            this.inspectTemplates = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListInspectTemplatesResponse inspectTemplates.
                         * @member {Array.<google.privacy.dlp.v2.IInspectTemplate>} inspectTemplates
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @instance
                         */
                        ListInspectTemplatesResponse.prototype.inspectTemplates = $util.emptyArray;
    
                        /**
                         * ListInspectTemplatesResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @instance
                         */
                        ListInspectTemplatesResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListInspectTemplatesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesResponse} ListInspectTemplatesResponse instance
                         */
                        ListInspectTemplatesResponse.create = function create(properties) {
                            return new ListInspectTemplatesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListInspectTemplatesResponse message. Does not implicitly {@link google.privacy.dlp.v2.ListInspectTemplatesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesResponse} message ListInspectTemplatesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInspectTemplatesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inspectTemplates != null && message.inspectTemplates.length)
                                for (var i = 0; i < message.inspectTemplates.length; ++i)
                                    $root.google.privacy.dlp.v2.InspectTemplate.encode(message.inspectTemplates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListInspectTemplatesResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListInspectTemplatesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListInspectTemplatesResponse} message ListInspectTemplatesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInspectTemplatesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListInspectTemplatesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesResponse} ListInspectTemplatesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInspectTemplatesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListInspectTemplatesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.inspectTemplates && message.inspectTemplates.length))
                                        message.inspectTemplates = [];
                                    message.inspectTemplates.push($root.google.privacy.dlp.v2.InspectTemplate.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListInspectTemplatesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesResponse} ListInspectTemplatesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInspectTemplatesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListInspectTemplatesResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListInspectTemplatesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inspectTemplates != null && message.hasOwnProperty("inspectTemplates")) {
                                if (!Array.isArray(message.inspectTemplates))
                                    return "inspectTemplates: array expected";
                                for (var i = 0; i < message.inspectTemplates.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.InspectTemplate.verify(message.inspectTemplates[i]);
                                    if (error)
                                        return "inspectTemplates." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListInspectTemplatesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListInspectTemplatesResponse} ListInspectTemplatesResponse
                         */
                        ListInspectTemplatesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListInspectTemplatesResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListInspectTemplatesResponse();
                            if (object.inspectTemplates) {
                                if (!Array.isArray(object.inspectTemplates))
                                    throw TypeError(".google.privacy.dlp.v2.ListInspectTemplatesResponse.inspectTemplates: array expected");
                                message.inspectTemplates = [];
                                for (var i = 0; i < object.inspectTemplates.length; ++i) {
                                    if (typeof object.inspectTemplates[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ListInspectTemplatesResponse.inspectTemplates: object expected");
                                    message.inspectTemplates[i] = $root.google.privacy.dlp.v2.InspectTemplate.fromObject(object.inspectTemplates[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListInspectTemplatesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ListInspectTemplatesResponse} message ListInspectTemplatesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListInspectTemplatesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.inspectTemplates = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.inspectTemplates && message.inspectTemplates.length) {
                                object.inspectTemplates = [];
                                for (var j = 0; j < message.inspectTemplates.length; ++j)
                                    object.inspectTemplates[j] = $root.google.privacy.dlp.v2.InspectTemplate.toObject(message.inspectTemplates[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListInspectTemplatesResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListInspectTemplatesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListInspectTemplatesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListInspectTemplatesResponse;
                    })();
    
                    v2.DeleteInspectTemplateRequest = (function() {
    
                        /**
                         * Properties of a DeleteInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeleteInspectTemplateRequest
                         * @property {string|null} [name] DeleteInspectTemplateRequest name
                         */
    
                        /**
                         * Constructs a new DeleteInspectTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeleteInspectTemplateRequest.
                         * @implements IDeleteInspectTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeleteInspectTemplateRequest=} [properties] Properties to set
                         */
                        function DeleteInspectTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteInspectTemplateRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @instance
                         */
                        DeleteInspectTemplateRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteInspectTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteInspectTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeleteInspectTemplateRequest} DeleteInspectTemplateRequest instance
                         */
                        DeleteInspectTemplateRequest.create = function create(properties) {
                            return new DeleteInspectTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteInspectTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.DeleteInspectTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteInspectTemplateRequest} message DeleteInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteInspectTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteInspectTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeleteInspectTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteInspectTemplateRequest} message DeleteInspectTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteInspectTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteInspectTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeleteInspectTemplateRequest} DeleteInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteInspectTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeleteInspectTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteInspectTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeleteInspectTemplateRequest} DeleteInspectTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteInspectTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteInspectTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteInspectTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteInspectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeleteInspectTemplateRequest} DeleteInspectTemplateRequest
                         */
                        DeleteInspectTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeleteInspectTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeleteInspectTemplateRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteInspectTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.DeleteInspectTemplateRequest} message DeleteInspectTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteInspectTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteInspectTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeleteInspectTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteInspectTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteInspectTemplateRequest;
                    })();
    
                    v2.CreateJobTriggerRequest = (function() {
    
                        /**
                         * Properties of a CreateJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICreateJobTriggerRequest
                         * @property {string|null} [parent] CreateJobTriggerRequest parent
                         * @property {google.privacy.dlp.v2.IJobTrigger|null} [jobTrigger] CreateJobTriggerRequest jobTrigger
                         * @property {string|null} [triggerId] CreateJobTriggerRequest triggerId
                         * @property {string|null} [locationId] CreateJobTriggerRequest locationId
                         */
    
                        /**
                         * Constructs a new CreateJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CreateJobTriggerRequest.
                         * @implements ICreateJobTriggerRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICreateJobTriggerRequest=} [properties] Properties to set
                         */
                        function CreateJobTriggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateJobTriggerRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @instance
                         */
                        CreateJobTriggerRequest.prototype.parent = "";
    
                        /**
                         * CreateJobTriggerRequest jobTrigger.
                         * @member {google.privacy.dlp.v2.IJobTrigger|null|undefined} jobTrigger
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @instance
                         */
                        CreateJobTriggerRequest.prototype.jobTrigger = null;
    
                        /**
                         * CreateJobTriggerRequest triggerId.
                         * @member {string} triggerId
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @instance
                         */
                        CreateJobTriggerRequest.prototype.triggerId = "";
    
                        /**
                         * CreateJobTriggerRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @instance
                         */
                        CreateJobTriggerRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new CreateJobTriggerRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateJobTriggerRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CreateJobTriggerRequest} CreateJobTriggerRequest instance
                         */
                        CreateJobTriggerRequest.create = function create(properties) {
                            return new CreateJobTriggerRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateJobTriggerRequest message. Does not implicitly {@link google.privacy.dlp.v2.CreateJobTriggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateJobTriggerRequest} message CreateJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateJobTriggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.jobTrigger != null && Object.hasOwnProperty.call(message, "jobTrigger"))
                                $root.google.privacy.dlp.v2.JobTrigger.encode(message.jobTrigger, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.triggerId != null && Object.hasOwnProperty.call(message, "triggerId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.triggerId);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateJobTriggerRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CreateJobTriggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateJobTriggerRequest} message CreateJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateJobTriggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateJobTriggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CreateJobTriggerRequest} CreateJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateJobTriggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CreateJobTriggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.jobTrigger = $root.google.privacy.dlp.v2.JobTrigger.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.triggerId = reader.string();
                                    break;
                                case 4:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateJobTriggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CreateJobTriggerRequest} CreateJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateJobTriggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateJobTriggerRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateJobTriggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.jobTrigger != null && message.hasOwnProperty("jobTrigger")) {
                                var error = $root.google.privacy.dlp.v2.JobTrigger.verify(message.jobTrigger);
                                if (error)
                                    return "jobTrigger." + error;
                            }
                            if (message.triggerId != null && message.hasOwnProperty("triggerId"))
                                if (!$util.isString(message.triggerId))
                                    return "triggerId: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateJobTriggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CreateJobTriggerRequest} CreateJobTriggerRequest
                         */
                        CreateJobTriggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CreateJobTriggerRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CreateJobTriggerRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.jobTrigger != null) {
                                if (typeof object.jobTrigger !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CreateJobTriggerRequest.jobTrigger: object expected");
                                message.jobTrigger = $root.google.privacy.dlp.v2.JobTrigger.fromObject(object.jobTrigger);
                            }
                            if (object.triggerId != null)
                                message.triggerId = String(object.triggerId);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateJobTriggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.CreateJobTriggerRequest} message CreateJobTriggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateJobTriggerRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.jobTrigger = null;
                                object.triggerId = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.jobTrigger != null && message.hasOwnProperty("jobTrigger"))
                                object.jobTrigger = $root.google.privacy.dlp.v2.JobTrigger.toObject(message.jobTrigger, options);
                            if (message.triggerId != null && message.hasOwnProperty("triggerId"))
                                object.triggerId = message.triggerId;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateJobTriggerRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CreateJobTriggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateJobTriggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateJobTriggerRequest;
                    })();
    
                    v2.ActivateJobTriggerRequest = (function() {
    
                        /**
                         * Properties of an ActivateJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IActivateJobTriggerRequest
                         * @property {string|null} [name] ActivateJobTriggerRequest name
                         */
    
                        /**
                         * Constructs a new ActivateJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an ActivateJobTriggerRequest.
                         * @implements IActivateJobTriggerRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IActivateJobTriggerRequest=} [properties] Properties to set
                         */
                        function ActivateJobTriggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ActivateJobTriggerRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @instance
                         */
                        ActivateJobTriggerRequest.prototype.name = "";
    
                        /**
                         * Creates a new ActivateJobTriggerRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IActivateJobTriggerRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ActivateJobTriggerRequest} ActivateJobTriggerRequest instance
                         */
                        ActivateJobTriggerRequest.create = function create(properties) {
                            return new ActivateJobTriggerRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ActivateJobTriggerRequest message. Does not implicitly {@link google.privacy.dlp.v2.ActivateJobTriggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IActivateJobTriggerRequest} message ActivateJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ActivateJobTriggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ActivateJobTriggerRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ActivateJobTriggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IActivateJobTriggerRequest} message ActivateJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ActivateJobTriggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ActivateJobTriggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ActivateJobTriggerRequest} ActivateJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ActivateJobTriggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ActivateJobTriggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ActivateJobTriggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ActivateJobTriggerRequest} ActivateJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ActivateJobTriggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ActivateJobTriggerRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ActivateJobTriggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ActivateJobTriggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ActivateJobTriggerRequest} ActivateJobTriggerRequest
                         */
                        ActivateJobTriggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ActivateJobTriggerRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ActivateJobTriggerRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ActivateJobTriggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ActivateJobTriggerRequest} message ActivateJobTriggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ActivateJobTriggerRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this ActivateJobTriggerRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ActivateJobTriggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ActivateJobTriggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ActivateJobTriggerRequest;
                    })();
    
                    v2.UpdateJobTriggerRequest = (function() {
    
                        /**
                         * Properties of an UpdateJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IUpdateJobTriggerRequest
                         * @property {string|null} [name] UpdateJobTriggerRequest name
                         * @property {google.privacy.dlp.v2.IJobTrigger|null} [jobTrigger] UpdateJobTriggerRequest jobTrigger
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateJobTriggerRequest updateMask
                         */
    
                        /**
                         * Constructs a new UpdateJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an UpdateJobTriggerRequest.
                         * @implements IUpdateJobTriggerRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IUpdateJobTriggerRequest=} [properties] Properties to set
                         */
                        function UpdateJobTriggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateJobTriggerRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @instance
                         */
                        UpdateJobTriggerRequest.prototype.name = "";
    
                        /**
                         * UpdateJobTriggerRequest jobTrigger.
                         * @member {google.privacy.dlp.v2.IJobTrigger|null|undefined} jobTrigger
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @instance
                         */
                        UpdateJobTriggerRequest.prototype.jobTrigger = null;
    
                        /**
                         * UpdateJobTriggerRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @instance
                         */
                        UpdateJobTriggerRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new UpdateJobTriggerRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateJobTriggerRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.UpdateJobTriggerRequest} UpdateJobTriggerRequest instance
                         */
                        UpdateJobTriggerRequest.create = function create(properties) {
                            return new UpdateJobTriggerRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateJobTriggerRequest message. Does not implicitly {@link google.privacy.dlp.v2.UpdateJobTriggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateJobTriggerRequest} message UpdateJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateJobTriggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.jobTrigger != null && Object.hasOwnProperty.call(message, "jobTrigger"))
                                $root.google.privacy.dlp.v2.JobTrigger.encode(message.jobTrigger, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateJobTriggerRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.UpdateJobTriggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateJobTriggerRequest} message UpdateJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateJobTriggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateJobTriggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.UpdateJobTriggerRequest} UpdateJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateJobTriggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.UpdateJobTriggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.jobTrigger = $root.google.privacy.dlp.v2.JobTrigger.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateJobTriggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.UpdateJobTriggerRequest} UpdateJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateJobTriggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateJobTriggerRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateJobTriggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.jobTrigger != null && message.hasOwnProperty("jobTrigger")) {
                                var error = $root.google.privacy.dlp.v2.JobTrigger.verify(message.jobTrigger);
                                if (error)
                                    return "jobTrigger." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateJobTriggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.UpdateJobTriggerRequest} UpdateJobTriggerRequest
                         */
                        UpdateJobTriggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.UpdateJobTriggerRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.UpdateJobTriggerRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.jobTrigger != null) {
                                if (typeof object.jobTrigger !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateJobTriggerRequest.jobTrigger: object expected");
                                message.jobTrigger = $root.google.privacy.dlp.v2.JobTrigger.fromObject(object.jobTrigger);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateJobTriggerRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateJobTriggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.UpdateJobTriggerRequest} message UpdateJobTriggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateJobTriggerRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.jobTrigger = null;
                                object.updateMask = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.jobTrigger != null && message.hasOwnProperty("jobTrigger"))
                                object.jobTrigger = $root.google.privacy.dlp.v2.JobTrigger.toObject(message.jobTrigger, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateJobTriggerRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.UpdateJobTriggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateJobTriggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateJobTriggerRequest;
                    })();
    
                    v2.GetJobTriggerRequest = (function() {
    
                        /**
                         * Properties of a GetJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IGetJobTriggerRequest
                         * @property {string|null} [name] GetJobTriggerRequest name
                         */
    
                        /**
                         * Constructs a new GetJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a GetJobTriggerRequest.
                         * @implements IGetJobTriggerRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IGetJobTriggerRequest=} [properties] Properties to set
                         */
                        function GetJobTriggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetJobTriggerRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @instance
                         */
                        GetJobTriggerRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetJobTriggerRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetJobTriggerRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.GetJobTriggerRequest} GetJobTriggerRequest instance
                         */
                        GetJobTriggerRequest.create = function create(properties) {
                            return new GetJobTriggerRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetJobTriggerRequest message. Does not implicitly {@link google.privacy.dlp.v2.GetJobTriggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetJobTriggerRequest} message GetJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetJobTriggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetJobTriggerRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.GetJobTriggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetJobTriggerRequest} message GetJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetJobTriggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetJobTriggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.GetJobTriggerRequest} GetJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetJobTriggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.GetJobTriggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetJobTriggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.GetJobTriggerRequest} GetJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetJobTriggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetJobTriggerRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetJobTriggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetJobTriggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.GetJobTriggerRequest} GetJobTriggerRequest
                         */
                        GetJobTriggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.GetJobTriggerRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.GetJobTriggerRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetJobTriggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.GetJobTriggerRequest} message GetJobTriggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetJobTriggerRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetJobTriggerRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.GetJobTriggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetJobTriggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetJobTriggerRequest;
                    })();
    
                    v2.CreateDlpJobRequest = (function() {
    
                        /**
                         * Properties of a CreateDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICreateDlpJobRequest
                         * @property {string|null} [parent] CreateDlpJobRequest parent
                         * @property {google.privacy.dlp.v2.IInspectJobConfig|null} [inspectJob] CreateDlpJobRequest inspectJob
                         * @property {google.privacy.dlp.v2.IRiskAnalysisJobConfig|null} [riskJob] CreateDlpJobRequest riskJob
                         * @property {string|null} [jobId] CreateDlpJobRequest jobId
                         * @property {string|null} [locationId] CreateDlpJobRequest locationId
                         */
    
                        /**
                         * Constructs a new CreateDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CreateDlpJobRequest.
                         * @implements ICreateDlpJobRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICreateDlpJobRequest=} [properties] Properties to set
                         */
                        function CreateDlpJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateDlpJobRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         */
                        CreateDlpJobRequest.prototype.parent = "";
    
                        /**
                         * CreateDlpJobRequest inspectJob.
                         * @member {google.privacy.dlp.v2.IInspectJobConfig|null|undefined} inspectJob
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         */
                        CreateDlpJobRequest.prototype.inspectJob = null;
    
                        /**
                         * CreateDlpJobRequest riskJob.
                         * @member {google.privacy.dlp.v2.IRiskAnalysisJobConfig|null|undefined} riskJob
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         */
                        CreateDlpJobRequest.prototype.riskJob = null;
    
                        /**
                         * CreateDlpJobRequest jobId.
                         * @member {string} jobId
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         */
                        CreateDlpJobRequest.prototype.jobId = "";
    
                        /**
                         * CreateDlpJobRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         */
                        CreateDlpJobRequest.prototype.locationId = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * CreateDlpJobRequest job.
                         * @member {"inspectJob"|"riskJob"|undefined} job
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         */
                        Object.defineProperty(CreateDlpJobRequest.prototype, "job", {
                            get: $util.oneOfGetter($oneOfFields = ["inspectJob", "riskJob"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new CreateDlpJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateDlpJobRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CreateDlpJobRequest} CreateDlpJobRequest instance
                         */
                        CreateDlpJobRequest.create = function create(properties) {
                            return new CreateDlpJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateDlpJobRequest message. Does not implicitly {@link google.privacy.dlp.v2.CreateDlpJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateDlpJobRequest} message CreateDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateDlpJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.inspectJob != null && Object.hasOwnProperty.call(message, "inspectJob"))
                                $root.google.privacy.dlp.v2.InspectJobConfig.encode(message.inspectJob, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.riskJob != null && Object.hasOwnProperty.call(message, "riskJob"))
                                $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.encode(message.riskJob, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.jobId != null && Object.hasOwnProperty.call(message, "jobId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.jobId);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateDlpJobRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CreateDlpJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateDlpJobRequest} message CreateDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateDlpJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateDlpJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CreateDlpJobRequest} CreateDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateDlpJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CreateDlpJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.inspectJob = $root.google.privacy.dlp.v2.InspectJobConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.riskJob = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.jobId = reader.string();
                                    break;
                                case 5:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateDlpJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CreateDlpJobRequest} CreateDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateDlpJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateDlpJobRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateDlpJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.inspectJob != null && message.hasOwnProperty("inspectJob")) {
                                properties.job = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.InspectJobConfig.verify(message.inspectJob);
                                    if (error)
                                        return "inspectJob." + error;
                                }
                            }
                            if (message.riskJob != null && message.hasOwnProperty("riskJob")) {
                                if (properties.job === 1)
                                    return "job: multiple values";
                                properties.job = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.verify(message.riskJob);
                                    if (error)
                                        return "riskJob." + error;
                                }
                            }
                            if (message.jobId != null && message.hasOwnProperty("jobId"))
                                if (!$util.isString(message.jobId))
                                    return "jobId: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateDlpJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CreateDlpJobRequest} CreateDlpJobRequest
                         */
                        CreateDlpJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CreateDlpJobRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CreateDlpJobRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.inspectJob != null) {
                                if (typeof object.inspectJob !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CreateDlpJobRequest.inspectJob: object expected");
                                message.inspectJob = $root.google.privacy.dlp.v2.InspectJobConfig.fromObject(object.inspectJob);
                            }
                            if (object.riskJob != null) {
                                if (typeof object.riskJob !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CreateDlpJobRequest.riskJob: object expected");
                                message.riskJob = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.fromObject(object.riskJob);
                            }
                            if (object.jobId != null)
                                message.jobId = String(object.jobId);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateDlpJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.CreateDlpJobRequest} message CreateDlpJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateDlpJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.jobId = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.inspectJob != null && message.hasOwnProperty("inspectJob")) {
                                object.inspectJob = $root.google.privacy.dlp.v2.InspectJobConfig.toObject(message.inspectJob, options);
                                if (options.oneofs)
                                    object.job = "inspectJob";
                            }
                            if (message.riskJob != null && message.hasOwnProperty("riskJob")) {
                                object.riskJob = $root.google.privacy.dlp.v2.RiskAnalysisJobConfig.toObject(message.riskJob, options);
                                if (options.oneofs)
                                    object.job = "riskJob";
                            }
                            if (message.jobId != null && message.hasOwnProperty("jobId"))
                                object.jobId = message.jobId;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateDlpJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CreateDlpJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateDlpJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateDlpJobRequest;
                    })();
    
                    v2.ListJobTriggersRequest = (function() {
    
                        /**
                         * Properties of a ListJobTriggersRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListJobTriggersRequest
                         * @property {string|null} [parent] ListJobTriggersRequest parent
                         * @property {string|null} [pageToken] ListJobTriggersRequest pageToken
                         * @property {number|null} [pageSize] ListJobTriggersRequest pageSize
                         * @property {string|null} [orderBy] ListJobTriggersRequest orderBy
                         * @property {string|null} [filter] ListJobTriggersRequest filter
                         * @property {string|null} [locationId] ListJobTriggersRequest locationId
                         */
    
                        /**
                         * Constructs a new ListJobTriggersRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListJobTriggersRequest.
                         * @implements IListJobTriggersRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListJobTriggersRequest=} [properties] Properties to set
                         */
                        function ListJobTriggersRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListJobTriggersRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         */
                        ListJobTriggersRequest.prototype.parent = "";
    
                        /**
                         * ListJobTriggersRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         */
                        ListJobTriggersRequest.prototype.pageToken = "";
    
                        /**
                         * ListJobTriggersRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         */
                        ListJobTriggersRequest.prototype.pageSize = 0;
    
                        /**
                         * ListJobTriggersRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         */
                        ListJobTriggersRequest.prototype.orderBy = "";
    
                        /**
                         * ListJobTriggersRequest filter.
                         * @member {string} filter
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         */
                        ListJobTriggersRequest.prototype.filter = "";
    
                        /**
                         * ListJobTriggersRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         */
                        ListJobTriggersRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ListJobTriggersRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListJobTriggersRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListJobTriggersRequest} ListJobTriggersRequest instance
                         */
                        ListJobTriggersRequest.create = function create(properties) {
                            return new ListJobTriggersRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListJobTriggersRequest message. Does not implicitly {@link google.privacy.dlp.v2.ListJobTriggersRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListJobTriggersRequest} message ListJobTriggersRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobTriggersRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderBy);
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.filter);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListJobTriggersRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListJobTriggersRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListJobTriggersRequest} message ListJobTriggersRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobTriggersRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListJobTriggersRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListJobTriggersRequest} ListJobTriggersRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobTriggersRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListJobTriggersRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                case 3:
                                    message.pageSize = reader.int32();
                                    break;
                                case 4:
                                    message.orderBy = reader.string();
                                    break;
                                case 5:
                                    message.filter = reader.string();
                                    break;
                                case 7:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListJobTriggersRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListJobTriggersRequest} ListJobTriggersRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobTriggersRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListJobTriggersRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListJobTriggersRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListJobTriggersRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListJobTriggersRequest} ListJobTriggersRequest
                         */
                        ListJobTriggersRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListJobTriggersRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListJobTriggersRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListJobTriggersRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ListJobTriggersRequest} message ListJobTriggersRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListJobTriggersRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.filter = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this ListJobTriggersRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListJobTriggersRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListJobTriggersRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListJobTriggersRequest;
                    })();
    
                    v2.ListJobTriggersResponse = (function() {
    
                        /**
                         * Properties of a ListJobTriggersResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListJobTriggersResponse
                         * @property {Array.<google.privacy.dlp.v2.IJobTrigger>|null} [jobTriggers] ListJobTriggersResponse jobTriggers
                         * @property {string|null} [nextPageToken] ListJobTriggersResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListJobTriggersResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListJobTriggersResponse.
                         * @implements IListJobTriggersResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListJobTriggersResponse=} [properties] Properties to set
                         */
                        function ListJobTriggersResponse(properties) {
                            this.jobTriggers = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListJobTriggersResponse jobTriggers.
                         * @member {Array.<google.privacy.dlp.v2.IJobTrigger>} jobTriggers
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @instance
                         */
                        ListJobTriggersResponse.prototype.jobTriggers = $util.emptyArray;
    
                        /**
                         * ListJobTriggersResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @instance
                         */
                        ListJobTriggersResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListJobTriggersResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListJobTriggersResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListJobTriggersResponse} ListJobTriggersResponse instance
                         */
                        ListJobTriggersResponse.create = function create(properties) {
                            return new ListJobTriggersResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListJobTriggersResponse message. Does not implicitly {@link google.privacy.dlp.v2.ListJobTriggersResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListJobTriggersResponse} message ListJobTriggersResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobTriggersResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.jobTriggers != null && message.jobTriggers.length)
                                for (var i = 0; i < message.jobTriggers.length; ++i)
                                    $root.google.privacy.dlp.v2.JobTrigger.encode(message.jobTriggers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListJobTriggersResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListJobTriggersResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListJobTriggersResponse} message ListJobTriggersResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobTriggersResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListJobTriggersResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListJobTriggersResponse} ListJobTriggersResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobTriggersResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListJobTriggersResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.jobTriggers && message.jobTriggers.length))
                                        message.jobTriggers = [];
                                    message.jobTriggers.push($root.google.privacy.dlp.v2.JobTrigger.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListJobTriggersResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListJobTriggersResponse} ListJobTriggersResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobTriggersResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListJobTriggersResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListJobTriggersResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.jobTriggers != null && message.hasOwnProperty("jobTriggers")) {
                                if (!Array.isArray(message.jobTriggers))
                                    return "jobTriggers: array expected";
                                for (var i = 0; i < message.jobTriggers.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.JobTrigger.verify(message.jobTriggers[i]);
                                    if (error)
                                        return "jobTriggers." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListJobTriggersResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListJobTriggersResponse} ListJobTriggersResponse
                         */
                        ListJobTriggersResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListJobTriggersResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListJobTriggersResponse();
                            if (object.jobTriggers) {
                                if (!Array.isArray(object.jobTriggers))
                                    throw TypeError(".google.privacy.dlp.v2.ListJobTriggersResponse.jobTriggers: array expected");
                                message.jobTriggers = [];
                                for (var i = 0; i < object.jobTriggers.length; ++i) {
                                    if (typeof object.jobTriggers[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ListJobTriggersResponse.jobTriggers: object expected");
                                    message.jobTriggers[i] = $root.google.privacy.dlp.v2.JobTrigger.fromObject(object.jobTriggers[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListJobTriggersResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ListJobTriggersResponse} message ListJobTriggersResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListJobTriggersResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.jobTriggers = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.jobTriggers && message.jobTriggers.length) {
                                object.jobTriggers = [];
                                for (var j = 0; j < message.jobTriggers.length; ++j)
                                    object.jobTriggers[j] = $root.google.privacy.dlp.v2.JobTrigger.toObject(message.jobTriggers[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListJobTriggersResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListJobTriggersResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListJobTriggersResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListJobTriggersResponse;
                    })();
    
                    v2.DeleteJobTriggerRequest = (function() {
    
                        /**
                         * Properties of a DeleteJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeleteJobTriggerRequest
                         * @property {string|null} [name] DeleteJobTriggerRequest name
                         */
    
                        /**
                         * Constructs a new DeleteJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeleteJobTriggerRequest.
                         * @implements IDeleteJobTriggerRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeleteJobTriggerRequest=} [properties] Properties to set
                         */
                        function DeleteJobTriggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteJobTriggerRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @instance
                         */
                        DeleteJobTriggerRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteJobTriggerRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteJobTriggerRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeleteJobTriggerRequest} DeleteJobTriggerRequest instance
                         */
                        DeleteJobTriggerRequest.create = function create(properties) {
                            return new DeleteJobTriggerRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteJobTriggerRequest message. Does not implicitly {@link google.privacy.dlp.v2.DeleteJobTriggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteJobTriggerRequest} message DeleteJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteJobTriggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteJobTriggerRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeleteJobTriggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteJobTriggerRequest} message DeleteJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteJobTriggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteJobTriggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeleteJobTriggerRequest} DeleteJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteJobTriggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeleteJobTriggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteJobTriggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeleteJobTriggerRequest} DeleteJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteJobTriggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteJobTriggerRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteJobTriggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteJobTriggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeleteJobTriggerRequest} DeleteJobTriggerRequest
                         */
                        DeleteJobTriggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeleteJobTriggerRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeleteJobTriggerRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteJobTriggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.DeleteJobTriggerRequest} message DeleteJobTriggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteJobTriggerRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteJobTriggerRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeleteJobTriggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteJobTriggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteJobTriggerRequest;
                    })();
    
                    v2.InspectJobConfig = (function() {
    
                        /**
                         * Properties of an InspectJobConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInspectJobConfig
                         * @property {google.privacy.dlp.v2.IStorageConfig|null} [storageConfig] InspectJobConfig storageConfig
                         * @property {google.privacy.dlp.v2.IInspectConfig|null} [inspectConfig] InspectJobConfig inspectConfig
                         * @property {string|null} [inspectTemplateName] InspectJobConfig inspectTemplateName
                         * @property {Array.<google.privacy.dlp.v2.IAction>|null} [actions] InspectJobConfig actions
                         */
    
                        /**
                         * Constructs a new InspectJobConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InspectJobConfig.
                         * @implements IInspectJobConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInspectJobConfig=} [properties] Properties to set
                         */
                        function InspectJobConfig(properties) {
                            this.actions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InspectJobConfig storageConfig.
                         * @member {google.privacy.dlp.v2.IStorageConfig|null|undefined} storageConfig
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @instance
                         */
                        InspectJobConfig.prototype.storageConfig = null;
    
                        /**
                         * InspectJobConfig inspectConfig.
                         * @member {google.privacy.dlp.v2.IInspectConfig|null|undefined} inspectConfig
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @instance
                         */
                        InspectJobConfig.prototype.inspectConfig = null;
    
                        /**
                         * InspectJobConfig inspectTemplateName.
                         * @member {string} inspectTemplateName
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @instance
                         */
                        InspectJobConfig.prototype.inspectTemplateName = "";
    
                        /**
                         * InspectJobConfig actions.
                         * @member {Array.<google.privacy.dlp.v2.IAction>} actions
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @instance
                         */
                        InspectJobConfig.prototype.actions = $util.emptyArray;
    
                        /**
                         * Creates a new InspectJobConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectJobConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InspectJobConfig} InspectJobConfig instance
                         */
                        InspectJobConfig.create = function create(properties) {
                            return new InspectJobConfig(properties);
                        };
    
                        /**
                         * Encodes the specified InspectJobConfig message. Does not implicitly {@link google.privacy.dlp.v2.InspectJobConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectJobConfig} message InspectJobConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectJobConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.storageConfig != null && Object.hasOwnProperty.call(message, "storageConfig"))
                                $root.google.privacy.dlp.v2.StorageConfig.encode(message.storageConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.inspectConfig != null && Object.hasOwnProperty.call(message, "inspectConfig"))
                                $root.google.privacy.dlp.v2.InspectConfig.encode(message.inspectConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.inspectTemplateName != null && Object.hasOwnProperty.call(message, "inspectTemplateName"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.inspectTemplateName);
                            if (message.actions != null && message.actions.length)
                                for (var i = 0; i < message.actions.length; ++i)
                                    $root.google.privacy.dlp.v2.Action.encode(message.actions[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InspectJobConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InspectJobConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IInspectJobConfig} message InspectJobConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InspectJobConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InspectJobConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InspectJobConfig} InspectJobConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectJobConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InspectJobConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.storageConfig = $root.google.privacy.dlp.v2.StorageConfig.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.inspectTemplateName = reader.string();
                                    break;
                                case 4:
                                    if (!(message.actions && message.actions.length))
                                        message.actions = [];
                                    message.actions.push($root.google.privacy.dlp.v2.Action.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InspectJobConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InspectJobConfig} InspectJobConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InspectJobConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InspectJobConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InspectJobConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.storageConfig != null && message.hasOwnProperty("storageConfig")) {
                                var error = $root.google.privacy.dlp.v2.StorageConfig.verify(message.storageConfig);
                                if (error)
                                    return "storageConfig." + error;
                            }
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig")) {
                                var error = $root.google.privacy.dlp.v2.InspectConfig.verify(message.inspectConfig);
                                if (error)
                                    return "inspectConfig." + error;
                            }
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                if (!$util.isString(message.inspectTemplateName))
                                    return "inspectTemplateName: string expected";
                            if (message.actions != null && message.hasOwnProperty("actions")) {
                                if (!Array.isArray(message.actions))
                                    return "actions: array expected";
                                for (var i = 0; i < message.actions.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Action.verify(message.actions[i]);
                                    if (error)
                                        return "actions." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an InspectJobConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InspectJobConfig} InspectJobConfig
                         */
                        InspectJobConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InspectJobConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InspectJobConfig();
                            if (object.storageConfig != null) {
                                if (typeof object.storageConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectJobConfig.storageConfig: object expected");
                                message.storageConfig = $root.google.privacy.dlp.v2.StorageConfig.fromObject(object.storageConfig);
                            }
                            if (object.inspectConfig != null) {
                                if (typeof object.inspectConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.InspectJobConfig.inspectConfig: object expected");
                                message.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.fromObject(object.inspectConfig);
                            }
                            if (object.inspectTemplateName != null)
                                message.inspectTemplateName = String(object.inspectTemplateName);
                            if (object.actions) {
                                if (!Array.isArray(object.actions))
                                    throw TypeError(".google.privacy.dlp.v2.InspectJobConfig.actions: array expected");
                                message.actions = [];
                                for (var i = 0; i < object.actions.length; ++i) {
                                    if (typeof object.actions[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.InspectJobConfig.actions: object expected");
                                    message.actions[i] = $root.google.privacy.dlp.v2.Action.fromObject(object.actions[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InspectJobConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @static
                         * @param {google.privacy.dlp.v2.InspectJobConfig} message InspectJobConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InspectJobConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.actions = [];
                            if (options.defaults) {
                                object.storageConfig = null;
                                object.inspectConfig = null;
                                object.inspectTemplateName = "";
                            }
                            if (message.storageConfig != null && message.hasOwnProperty("storageConfig"))
                                object.storageConfig = $root.google.privacy.dlp.v2.StorageConfig.toObject(message.storageConfig, options);
                            if (message.inspectConfig != null && message.hasOwnProperty("inspectConfig"))
                                object.inspectConfig = $root.google.privacy.dlp.v2.InspectConfig.toObject(message.inspectConfig, options);
                            if (message.inspectTemplateName != null && message.hasOwnProperty("inspectTemplateName"))
                                object.inspectTemplateName = message.inspectTemplateName;
                            if (message.actions && message.actions.length) {
                                object.actions = [];
                                for (var j = 0; j < message.actions.length; ++j)
                                    object.actions[j] = $root.google.privacy.dlp.v2.Action.toObject(message.actions[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this InspectJobConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InspectJobConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InspectJobConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InspectJobConfig;
                    })();
    
                    v2.DlpJob = (function() {
    
                        /**
                         * Properties of a DlpJob.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDlpJob
                         * @property {string|null} [name] DlpJob name
                         * @property {google.privacy.dlp.v2.DlpJobType|null} [type] DlpJob type
                         * @property {google.privacy.dlp.v2.DlpJob.JobState|null} [state] DlpJob state
                         * @property {google.privacy.dlp.v2.IAnalyzeDataSourceRiskDetails|null} [riskDetails] DlpJob riskDetails
                         * @property {google.privacy.dlp.v2.IInspectDataSourceDetails|null} [inspectDetails] DlpJob inspectDetails
                         * @property {google.protobuf.ITimestamp|null} [createTime] DlpJob createTime
                         * @property {google.protobuf.ITimestamp|null} [startTime] DlpJob startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] DlpJob endTime
                         * @property {string|null} [jobTriggerName] DlpJob jobTriggerName
                         * @property {Array.<google.privacy.dlp.v2.IError>|null} [errors] DlpJob errors
                         */
    
                        /**
                         * Constructs a new DlpJob.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DlpJob.
                         * @implements IDlpJob
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDlpJob=} [properties] Properties to set
                         */
                        function DlpJob(properties) {
                            this.errors = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DlpJob name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.name = "";
    
                        /**
                         * DlpJob type.
                         * @member {google.privacy.dlp.v2.DlpJobType} type
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.type = 0;
    
                        /**
                         * DlpJob state.
                         * @member {google.privacy.dlp.v2.DlpJob.JobState} state
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.state = 0;
    
                        /**
                         * DlpJob riskDetails.
                         * @member {google.privacy.dlp.v2.IAnalyzeDataSourceRiskDetails|null|undefined} riskDetails
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.riskDetails = null;
    
                        /**
                         * DlpJob inspectDetails.
                         * @member {google.privacy.dlp.v2.IInspectDataSourceDetails|null|undefined} inspectDetails
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.inspectDetails = null;
    
                        /**
                         * DlpJob createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.createTime = null;
    
                        /**
                         * DlpJob startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.startTime = null;
    
                        /**
                         * DlpJob endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.endTime = null;
    
                        /**
                         * DlpJob jobTriggerName.
                         * @member {string} jobTriggerName
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.jobTriggerName = "";
    
                        /**
                         * DlpJob errors.
                         * @member {Array.<google.privacy.dlp.v2.IError>} errors
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        DlpJob.prototype.errors = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * DlpJob details.
                         * @member {"riskDetails"|"inspectDetails"|undefined} details
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         */
                        Object.defineProperty(DlpJob.prototype, "details", {
                            get: $util.oneOfGetter($oneOfFields = ["riskDetails", "inspectDetails"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new DlpJob instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {google.privacy.dlp.v2.IDlpJob=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DlpJob} DlpJob instance
                         */
                        DlpJob.create = function create(properties) {
                            return new DlpJob(properties);
                        };
    
                        /**
                         * Encodes the specified DlpJob message. Does not implicitly {@link google.privacy.dlp.v2.DlpJob.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {google.privacy.dlp.v2.IDlpJob} message DlpJob message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DlpJob.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                            if (message.riskDetails != null && Object.hasOwnProperty.call(message, "riskDetails"))
                                $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.encode(message.riskDetails, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.inspectDetails != null && Object.hasOwnProperty.call(message, "inspectDetails"))
                                $root.google.privacy.dlp.v2.InspectDataSourceDetails.encode(message.inspectDetails, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.jobTriggerName != null && Object.hasOwnProperty.call(message, "jobTriggerName"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.jobTriggerName);
                            if (message.errors != null && message.errors.length)
                                for (var i = 0; i < message.errors.length; ++i)
                                    $root.google.privacy.dlp.v2.Error.encode(message.errors[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DlpJob message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DlpJob.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {google.privacy.dlp.v2.IDlpJob} message DlpJob message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DlpJob.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DlpJob message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DlpJob} DlpJob
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DlpJob.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DlpJob();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.type = reader.int32();
                                    break;
                                case 3:
                                    message.state = reader.int32();
                                    break;
                                case 4:
                                    message.riskDetails = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.inspectDetails = $root.google.privacy.dlp.v2.InspectDataSourceDetails.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 10:
                                    message.jobTriggerName = reader.string();
                                    break;
                                case 11:
                                    if (!(message.errors && message.errors.length))
                                        message.errors = [];
                                    message.errors.push($root.google.privacy.dlp.v2.Error.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DlpJob message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DlpJob} DlpJob
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DlpJob.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DlpJob message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DlpJob.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.riskDetails != null && message.hasOwnProperty("riskDetails")) {
                                properties.details = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.verify(message.riskDetails);
                                    if (error)
                                        return "riskDetails." + error;
                                }
                            }
                            if (message.inspectDetails != null && message.hasOwnProperty("inspectDetails")) {
                                if (properties.details === 1)
                                    return "details: multiple values";
                                properties.details = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.InspectDataSourceDetails.verify(message.inspectDetails);
                                    if (error)
                                        return "inspectDetails." + error;
                                }
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.jobTriggerName != null && message.hasOwnProperty("jobTriggerName"))
                                if (!$util.isString(message.jobTriggerName))
                                    return "jobTriggerName: string expected";
                            if (message.errors != null && message.hasOwnProperty("errors")) {
                                if (!Array.isArray(message.errors))
                                    return "errors: array expected";
                                for (var i = 0; i < message.errors.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Error.verify(message.errors[i]);
                                    if (error)
                                        return "errors." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DlpJob message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DlpJob} DlpJob
                         */
                        DlpJob.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DlpJob)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DlpJob();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.type) {
                            case "DLP_JOB_TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "INSPECT_JOB":
                            case 1:
                                message.type = 1;
                                break;
                            case "RISK_ANALYSIS_JOB":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            switch (object.state) {
                            case "JOB_STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "PENDING":
                            case 1:
                                message.state = 1;
                                break;
                            case "RUNNING":
                            case 2:
                                message.state = 2;
                                break;
                            case "DONE":
                            case 3:
                                message.state = 3;
                                break;
                            case "CANCELED":
                            case 4:
                                message.state = 4;
                                break;
                            case "FAILED":
                            case 5:
                                message.state = 5;
                                break;
                            case "ACTIVE":
                            case 6:
                                message.state = 6;
                                break;
                            }
                            if (object.riskDetails != null) {
                                if (typeof object.riskDetails !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DlpJob.riskDetails: object expected");
                                message.riskDetails = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.fromObject(object.riskDetails);
                            }
                            if (object.inspectDetails != null) {
                                if (typeof object.inspectDetails !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DlpJob.inspectDetails: object expected");
                                message.inspectDetails = $root.google.privacy.dlp.v2.InspectDataSourceDetails.fromObject(object.inspectDetails);
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DlpJob.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DlpJob.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DlpJob.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.jobTriggerName != null)
                                message.jobTriggerName = String(object.jobTriggerName);
                            if (object.errors) {
                                if (!Array.isArray(object.errors))
                                    throw TypeError(".google.privacy.dlp.v2.DlpJob.errors: array expected");
                                message.errors = [];
                                for (var i = 0; i < object.errors.length; ++i) {
                                    if (typeof object.errors[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.DlpJob.errors: object expected");
                                    message.errors[i] = $root.google.privacy.dlp.v2.Error.fromObject(object.errors[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DlpJob message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @static
                         * @param {google.privacy.dlp.v2.DlpJob} message DlpJob
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DlpJob.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.errors = [];
                            if (options.defaults) {
                                object.name = "";
                                object.type = options.enums === String ? "DLP_JOB_TYPE_UNSPECIFIED" : 0;
                                object.state = options.enums === String ? "JOB_STATE_UNSPECIFIED" : 0;
                                object.createTime = null;
                                object.startTime = null;
                                object.endTime = null;
                                object.jobTriggerName = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.privacy.dlp.v2.DlpJobType[message.type] : message.type;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.privacy.dlp.v2.DlpJob.JobState[message.state] : message.state;
                            if (message.riskDetails != null && message.hasOwnProperty("riskDetails")) {
                                object.riskDetails = $root.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.toObject(message.riskDetails, options);
                                if (options.oneofs)
                                    object.details = "riskDetails";
                            }
                            if (message.inspectDetails != null && message.hasOwnProperty("inspectDetails")) {
                                object.inspectDetails = $root.google.privacy.dlp.v2.InspectDataSourceDetails.toObject(message.inspectDetails, options);
                                if (options.oneofs)
                                    object.details = "inspectDetails";
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (message.jobTriggerName != null && message.hasOwnProperty("jobTriggerName"))
                                object.jobTriggerName = message.jobTriggerName;
                            if (message.errors && message.errors.length) {
                                object.errors = [];
                                for (var j = 0; j < message.errors.length; ++j)
                                    object.errors[j] = $root.google.privacy.dlp.v2.Error.toObject(message.errors[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this DlpJob to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DlpJob
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DlpJob.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * JobState enum.
                         * @name google.privacy.dlp.v2.DlpJob.JobState
                         * @enum {number}
                         * @property {number} JOB_STATE_UNSPECIFIED=0 JOB_STATE_UNSPECIFIED value
                         * @property {number} PENDING=1 PENDING value
                         * @property {number} RUNNING=2 RUNNING value
                         * @property {number} DONE=3 DONE value
                         * @property {number} CANCELED=4 CANCELED value
                         * @property {number} FAILED=5 FAILED value
                         * @property {number} ACTIVE=6 ACTIVE value
                         */
                        DlpJob.JobState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "JOB_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PENDING"] = 1;
                            values[valuesById[2] = "RUNNING"] = 2;
                            values[valuesById[3] = "DONE"] = 3;
                            values[valuesById[4] = "CANCELED"] = 4;
                            values[valuesById[5] = "FAILED"] = 5;
                            values[valuesById[6] = "ACTIVE"] = 6;
                            return values;
                        })();
    
                        return DlpJob;
                    })();
    
                    v2.GetDlpJobRequest = (function() {
    
                        /**
                         * Properties of a GetDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IGetDlpJobRequest
                         * @property {string|null} [name] GetDlpJobRequest name
                         */
    
                        /**
                         * Constructs a new GetDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a GetDlpJobRequest.
                         * @implements IGetDlpJobRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IGetDlpJobRequest=} [properties] Properties to set
                         */
                        function GetDlpJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetDlpJobRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @instance
                         */
                        GetDlpJobRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetDlpJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetDlpJobRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.GetDlpJobRequest} GetDlpJobRequest instance
                         */
                        GetDlpJobRequest.create = function create(properties) {
                            return new GetDlpJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetDlpJobRequest message. Does not implicitly {@link google.privacy.dlp.v2.GetDlpJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetDlpJobRequest} message GetDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetDlpJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetDlpJobRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.GetDlpJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetDlpJobRequest} message GetDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetDlpJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetDlpJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.GetDlpJobRequest} GetDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetDlpJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.GetDlpJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetDlpJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.GetDlpJobRequest} GetDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetDlpJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetDlpJobRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetDlpJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetDlpJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.GetDlpJobRequest} GetDlpJobRequest
                         */
                        GetDlpJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.GetDlpJobRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.GetDlpJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetDlpJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.GetDlpJobRequest} message GetDlpJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetDlpJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetDlpJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.GetDlpJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetDlpJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetDlpJobRequest;
                    })();
    
                    v2.ListDlpJobsRequest = (function() {
    
                        /**
                         * Properties of a ListDlpJobsRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListDlpJobsRequest
                         * @property {string|null} [parent] ListDlpJobsRequest parent
                         * @property {string|null} [filter] ListDlpJobsRequest filter
                         * @property {number|null} [pageSize] ListDlpJobsRequest pageSize
                         * @property {string|null} [pageToken] ListDlpJobsRequest pageToken
                         * @property {google.privacy.dlp.v2.DlpJobType|null} [type] ListDlpJobsRequest type
                         * @property {string|null} [orderBy] ListDlpJobsRequest orderBy
                         * @property {string|null} [locationId] ListDlpJobsRequest locationId
                         */
    
                        /**
                         * Constructs a new ListDlpJobsRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListDlpJobsRequest.
                         * @implements IListDlpJobsRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListDlpJobsRequest=} [properties] Properties to set
                         */
                        function ListDlpJobsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListDlpJobsRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.parent = "";
    
                        /**
                         * ListDlpJobsRequest filter.
                         * @member {string} filter
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.filter = "";
    
                        /**
                         * ListDlpJobsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListDlpJobsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.pageToken = "";
    
                        /**
                         * ListDlpJobsRequest type.
                         * @member {google.privacy.dlp.v2.DlpJobType} type
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.type = 0;
    
                        /**
                         * ListDlpJobsRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.orderBy = "";
    
                        /**
                         * ListDlpJobsRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         */
                        ListDlpJobsRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ListDlpJobsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListDlpJobsRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListDlpJobsRequest} ListDlpJobsRequest instance
                         */
                        ListDlpJobsRequest.create = function create(properties) {
                            return new ListDlpJobsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListDlpJobsRequest message. Does not implicitly {@link google.privacy.dlp.v2.ListDlpJobsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListDlpJobsRequest} message ListDlpJobsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDlpJobsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.parent);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.orderBy);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListDlpJobsRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListDlpJobsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListDlpJobsRequest} message ListDlpJobsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDlpJobsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListDlpJobsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListDlpJobsRequest} ListDlpJobsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDlpJobsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListDlpJobsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 4:
                                    message.parent = reader.string();
                                    break;
                                case 1:
                                    message.filter = reader.string();
                                    break;
                                case 2:
                                    message.pageSize = reader.int32();
                                    break;
                                case 3:
                                    message.pageToken = reader.string();
                                    break;
                                case 5:
                                    message.type = reader.int32();
                                    break;
                                case 6:
                                    message.orderBy = reader.string();
                                    break;
                                case 7:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListDlpJobsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListDlpJobsRequest} ListDlpJobsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDlpJobsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListDlpJobsRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListDlpJobsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListDlpJobsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListDlpJobsRequest} ListDlpJobsRequest
                         */
                        ListDlpJobsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListDlpJobsRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListDlpJobsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            switch (object.type) {
                            case "DLP_JOB_TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "INSPECT_JOB":
                            case 1:
                                message.type = 1;
                                break;
                            case "RISK_ANALYSIS_JOB":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListDlpJobsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ListDlpJobsRequest} message ListDlpJobsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListDlpJobsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.filter = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                                object.parent = "";
                                object.type = options.enums === String ? "DLP_JOB_TYPE_UNSPECIFIED" : 0;
                                object.orderBy = "";
                                object.locationId = "";
                            }
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.privacy.dlp.v2.DlpJobType[message.type] : message.type;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this ListDlpJobsRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListDlpJobsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListDlpJobsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListDlpJobsRequest;
                    })();
    
                    v2.ListDlpJobsResponse = (function() {
    
                        /**
                         * Properties of a ListDlpJobsResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListDlpJobsResponse
                         * @property {Array.<google.privacy.dlp.v2.IDlpJob>|null} [jobs] ListDlpJobsResponse jobs
                         * @property {string|null} [nextPageToken] ListDlpJobsResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListDlpJobsResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListDlpJobsResponse.
                         * @implements IListDlpJobsResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListDlpJobsResponse=} [properties] Properties to set
                         */
                        function ListDlpJobsResponse(properties) {
                            this.jobs = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListDlpJobsResponse jobs.
                         * @member {Array.<google.privacy.dlp.v2.IDlpJob>} jobs
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @instance
                         */
                        ListDlpJobsResponse.prototype.jobs = $util.emptyArray;
    
                        /**
                         * ListDlpJobsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @instance
                         */
                        ListDlpJobsResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListDlpJobsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListDlpJobsResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListDlpJobsResponse} ListDlpJobsResponse instance
                         */
                        ListDlpJobsResponse.create = function create(properties) {
                            return new ListDlpJobsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListDlpJobsResponse message. Does not implicitly {@link google.privacy.dlp.v2.ListDlpJobsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListDlpJobsResponse} message ListDlpJobsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDlpJobsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.jobs != null && message.jobs.length)
                                for (var i = 0; i < message.jobs.length; ++i)
                                    $root.google.privacy.dlp.v2.DlpJob.encode(message.jobs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListDlpJobsResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListDlpJobsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListDlpJobsResponse} message ListDlpJobsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDlpJobsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListDlpJobsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListDlpJobsResponse} ListDlpJobsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDlpJobsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListDlpJobsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.jobs && message.jobs.length))
                                        message.jobs = [];
                                    message.jobs.push($root.google.privacy.dlp.v2.DlpJob.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListDlpJobsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListDlpJobsResponse} ListDlpJobsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDlpJobsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListDlpJobsResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListDlpJobsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.jobs != null && message.hasOwnProperty("jobs")) {
                                if (!Array.isArray(message.jobs))
                                    return "jobs: array expected";
                                for (var i = 0; i < message.jobs.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.DlpJob.verify(message.jobs[i]);
                                    if (error)
                                        return "jobs." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListDlpJobsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListDlpJobsResponse} ListDlpJobsResponse
                         */
                        ListDlpJobsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListDlpJobsResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListDlpJobsResponse();
                            if (object.jobs) {
                                if (!Array.isArray(object.jobs))
                                    throw TypeError(".google.privacy.dlp.v2.ListDlpJobsResponse.jobs: array expected");
                                message.jobs = [];
                                for (var i = 0; i < object.jobs.length; ++i) {
                                    if (typeof object.jobs[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ListDlpJobsResponse.jobs: object expected");
                                    message.jobs[i] = $root.google.privacy.dlp.v2.DlpJob.fromObject(object.jobs[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListDlpJobsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ListDlpJobsResponse} message ListDlpJobsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListDlpJobsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.jobs = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.jobs && message.jobs.length) {
                                object.jobs = [];
                                for (var j = 0; j < message.jobs.length; ++j)
                                    object.jobs[j] = $root.google.privacy.dlp.v2.DlpJob.toObject(message.jobs[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListDlpJobsResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListDlpJobsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListDlpJobsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListDlpJobsResponse;
                    })();
    
                    v2.CancelDlpJobRequest = (function() {
    
                        /**
                         * Properties of a CancelDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICancelDlpJobRequest
                         * @property {string|null} [name] CancelDlpJobRequest name
                         */
    
                        /**
                         * Constructs a new CancelDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CancelDlpJobRequest.
                         * @implements ICancelDlpJobRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICancelDlpJobRequest=} [properties] Properties to set
                         */
                        function CancelDlpJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CancelDlpJobRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @instance
                         */
                        CancelDlpJobRequest.prototype.name = "";
    
                        /**
                         * Creates a new CancelDlpJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICancelDlpJobRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CancelDlpJobRequest} CancelDlpJobRequest instance
                         */
                        CancelDlpJobRequest.create = function create(properties) {
                            return new CancelDlpJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CancelDlpJobRequest message. Does not implicitly {@link google.privacy.dlp.v2.CancelDlpJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICancelDlpJobRequest} message CancelDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CancelDlpJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CancelDlpJobRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CancelDlpJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICancelDlpJobRequest} message CancelDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CancelDlpJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CancelDlpJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CancelDlpJobRequest} CancelDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CancelDlpJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CancelDlpJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CancelDlpJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CancelDlpJobRequest} CancelDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CancelDlpJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CancelDlpJobRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CancelDlpJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CancelDlpJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CancelDlpJobRequest} CancelDlpJobRequest
                         */
                        CancelDlpJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CancelDlpJobRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CancelDlpJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CancelDlpJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.CancelDlpJobRequest} message CancelDlpJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CancelDlpJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this CancelDlpJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CancelDlpJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CancelDlpJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CancelDlpJobRequest;
                    })();
    
                    v2.FinishDlpJobRequest = (function() {
    
                        /**
                         * Properties of a FinishDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IFinishDlpJobRequest
                         * @property {string|null} [name] FinishDlpJobRequest name
                         */
    
                        /**
                         * Constructs a new FinishDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a FinishDlpJobRequest.
                         * @implements IFinishDlpJobRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IFinishDlpJobRequest=} [properties] Properties to set
                         */
                        function FinishDlpJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FinishDlpJobRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @instance
                         */
                        FinishDlpJobRequest.prototype.name = "";
    
                        /**
                         * Creates a new FinishDlpJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IFinishDlpJobRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.FinishDlpJobRequest} FinishDlpJobRequest instance
                         */
                        FinishDlpJobRequest.create = function create(properties) {
                            return new FinishDlpJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified FinishDlpJobRequest message. Does not implicitly {@link google.privacy.dlp.v2.FinishDlpJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IFinishDlpJobRequest} message FinishDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FinishDlpJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FinishDlpJobRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.FinishDlpJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IFinishDlpJobRequest} message FinishDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FinishDlpJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FinishDlpJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.FinishDlpJobRequest} FinishDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FinishDlpJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.FinishDlpJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FinishDlpJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.FinishDlpJobRequest} FinishDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FinishDlpJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FinishDlpJobRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FinishDlpJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a FinishDlpJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.FinishDlpJobRequest} FinishDlpJobRequest
                         */
                        FinishDlpJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.FinishDlpJobRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.FinishDlpJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FinishDlpJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.FinishDlpJobRequest} message FinishDlpJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FinishDlpJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this FinishDlpJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.FinishDlpJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FinishDlpJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return FinishDlpJobRequest;
                    })();
    
                    v2.DeleteDlpJobRequest = (function() {
    
                        /**
                         * Properties of a DeleteDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeleteDlpJobRequest
                         * @property {string|null} [name] DeleteDlpJobRequest name
                         */
    
                        /**
                         * Constructs a new DeleteDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeleteDlpJobRequest.
                         * @implements IDeleteDlpJobRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeleteDlpJobRequest=} [properties] Properties to set
                         */
                        function DeleteDlpJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteDlpJobRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @instance
                         */
                        DeleteDlpJobRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteDlpJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteDlpJobRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeleteDlpJobRequest} DeleteDlpJobRequest instance
                         */
                        DeleteDlpJobRequest.create = function create(properties) {
                            return new DeleteDlpJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteDlpJobRequest message. Does not implicitly {@link google.privacy.dlp.v2.DeleteDlpJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteDlpJobRequest} message DeleteDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteDlpJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteDlpJobRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeleteDlpJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteDlpJobRequest} message DeleteDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteDlpJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteDlpJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeleteDlpJobRequest} DeleteDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteDlpJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeleteDlpJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteDlpJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeleteDlpJobRequest} DeleteDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteDlpJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteDlpJobRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteDlpJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteDlpJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeleteDlpJobRequest} DeleteDlpJobRequest
                         */
                        DeleteDlpJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeleteDlpJobRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeleteDlpJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteDlpJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.DeleteDlpJobRequest} message DeleteDlpJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteDlpJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteDlpJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeleteDlpJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteDlpJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteDlpJobRequest;
                    })();
    
                    v2.CreateDeidentifyTemplateRequest = (function() {
    
                        /**
                         * Properties of a CreateDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICreateDeidentifyTemplateRequest
                         * @property {string|null} [parent] CreateDeidentifyTemplateRequest parent
                         * @property {google.privacy.dlp.v2.IDeidentifyTemplate|null} [deidentifyTemplate] CreateDeidentifyTemplateRequest deidentifyTemplate
                         * @property {string|null} [templateId] CreateDeidentifyTemplateRequest templateId
                         * @property {string|null} [locationId] CreateDeidentifyTemplateRequest locationId
                         */
    
                        /**
                         * Constructs a new CreateDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CreateDeidentifyTemplateRequest.
                         * @implements ICreateDeidentifyTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest=} [properties] Properties to set
                         */
                        function CreateDeidentifyTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateDeidentifyTemplateRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @instance
                         */
                        CreateDeidentifyTemplateRequest.prototype.parent = "";
    
                        /**
                         * CreateDeidentifyTemplateRequest deidentifyTemplate.
                         * @member {google.privacy.dlp.v2.IDeidentifyTemplate|null|undefined} deidentifyTemplate
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @instance
                         */
                        CreateDeidentifyTemplateRequest.prototype.deidentifyTemplate = null;
    
                        /**
                         * CreateDeidentifyTemplateRequest templateId.
                         * @member {string} templateId
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @instance
                         */
                        CreateDeidentifyTemplateRequest.prototype.templateId = "";
    
                        /**
                         * CreateDeidentifyTemplateRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @instance
                         */
                        CreateDeidentifyTemplateRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new CreateDeidentifyTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CreateDeidentifyTemplateRequest} CreateDeidentifyTemplateRequest instance
                         */
                        CreateDeidentifyTemplateRequest.create = function create(properties) {
                            return new CreateDeidentifyTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateDeidentifyTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest} message CreateDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateDeidentifyTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.deidentifyTemplate != null && Object.hasOwnProperty.call(message, "deidentifyTemplate"))
                                $root.google.privacy.dlp.v2.DeidentifyTemplate.encode(message.deidentifyTemplate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.templateId != null && Object.hasOwnProperty.call(message, "templateId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.templateId);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateDeidentifyTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest} message CreateDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateDeidentifyTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateDeidentifyTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CreateDeidentifyTemplateRequest} CreateDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateDeidentifyTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CreateDeidentifyTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.deidentifyTemplate = $root.google.privacy.dlp.v2.DeidentifyTemplate.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.templateId = reader.string();
                                    break;
                                case 4:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateDeidentifyTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CreateDeidentifyTemplateRequest} CreateDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateDeidentifyTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateDeidentifyTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateDeidentifyTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.deidentifyTemplate != null && message.hasOwnProperty("deidentifyTemplate")) {
                                var error = $root.google.privacy.dlp.v2.DeidentifyTemplate.verify(message.deidentifyTemplate);
                                if (error)
                                    return "deidentifyTemplate." + error;
                            }
                            if (message.templateId != null && message.hasOwnProperty("templateId"))
                                if (!$util.isString(message.templateId))
                                    return "templateId: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateDeidentifyTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CreateDeidentifyTemplateRequest} CreateDeidentifyTemplateRequest
                         */
                        CreateDeidentifyTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CreateDeidentifyTemplateRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.deidentifyTemplate != null) {
                                if (typeof object.deidentifyTemplate !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.deidentifyTemplate: object expected");
                                message.deidentifyTemplate = $root.google.privacy.dlp.v2.DeidentifyTemplate.fromObject(object.deidentifyTemplate);
                            }
                            if (object.templateId != null)
                                message.templateId = String(object.templateId);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateDeidentifyTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.CreateDeidentifyTemplateRequest} message CreateDeidentifyTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateDeidentifyTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.deidentifyTemplate = null;
                                object.templateId = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.deidentifyTemplate != null && message.hasOwnProperty("deidentifyTemplate"))
                                object.deidentifyTemplate = $root.google.privacy.dlp.v2.DeidentifyTemplate.toObject(message.deidentifyTemplate, options);
                            if (message.templateId != null && message.hasOwnProperty("templateId"))
                                object.templateId = message.templateId;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateDeidentifyTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateDeidentifyTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateDeidentifyTemplateRequest;
                    })();
    
                    v2.UpdateDeidentifyTemplateRequest = (function() {
    
                        /**
                         * Properties of an UpdateDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IUpdateDeidentifyTemplateRequest
                         * @property {string|null} [name] UpdateDeidentifyTemplateRequest name
                         * @property {google.privacy.dlp.v2.IDeidentifyTemplate|null} [deidentifyTemplate] UpdateDeidentifyTemplateRequest deidentifyTemplate
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateDeidentifyTemplateRequest updateMask
                         */
    
                        /**
                         * Constructs a new UpdateDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an UpdateDeidentifyTemplateRequest.
                         * @implements IUpdateDeidentifyTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest=} [properties] Properties to set
                         */
                        function UpdateDeidentifyTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateDeidentifyTemplateRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @instance
                         */
                        UpdateDeidentifyTemplateRequest.prototype.name = "";
    
                        /**
                         * UpdateDeidentifyTemplateRequest deidentifyTemplate.
                         * @member {google.privacy.dlp.v2.IDeidentifyTemplate|null|undefined} deidentifyTemplate
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @instance
                         */
                        UpdateDeidentifyTemplateRequest.prototype.deidentifyTemplate = null;
    
                        /**
                         * UpdateDeidentifyTemplateRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @instance
                         */
                        UpdateDeidentifyTemplateRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new UpdateDeidentifyTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest} UpdateDeidentifyTemplateRequest instance
                         */
                        UpdateDeidentifyTemplateRequest.create = function create(properties) {
                            return new UpdateDeidentifyTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateDeidentifyTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest} message UpdateDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateDeidentifyTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.deidentifyTemplate != null && Object.hasOwnProperty.call(message, "deidentifyTemplate"))
                                $root.google.privacy.dlp.v2.DeidentifyTemplate.encode(message.deidentifyTemplate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateDeidentifyTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest} message UpdateDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateDeidentifyTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateDeidentifyTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest} UpdateDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateDeidentifyTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.deidentifyTemplate = $root.google.privacy.dlp.v2.DeidentifyTemplate.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateDeidentifyTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest} UpdateDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateDeidentifyTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateDeidentifyTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateDeidentifyTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.deidentifyTemplate != null && message.hasOwnProperty("deidentifyTemplate")) {
                                var error = $root.google.privacy.dlp.v2.DeidentifyTemplate.verify(message.deidentifyTemplate);
                                if (error)
                                    return "deidentifyTemplate." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateDeidentifyTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest} UpdateDeidentifyTemplateRequest
                         */
                        UpdateDeidentifyTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.deidentifyTemplate != null) {
                                if (typeof object.deidentifyTemplate !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.deidentifyTemplate: object expected");
                                message.deidentifyTemplate = $root.google.privacy.dlp.v2.DeidentifyTemplate.fromObject(object.deidentifyTemplate);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateDeidentifyTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest} message UpdateDeidentifyTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateDeidentifyTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.deidentifyTemplate = null;
                                object.updateMask = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.deidentifyTemplate != null && message.hasOwnProperty("deidentifyTemplate"))
                                object.deidentifyTemplate = $root.google.privacy.dlp.v2.DeidentifyTemplate.toObject(message.deidentifyTemplate, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateDeidentifyTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateDeidentifyTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateDeidentifyTemplateRequest;
                    })();
    
                    v2.GetDeidentifyTemplateRequest = (function() {
    
                        /**
                         * Properties of a GetDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IGetDeidentifyTemplateRequest
                         * @property {string|null} [name] GetDeidentifyTemplateRequest name
                         */
    
                        /**
                         * Constructs a new GetDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a GetDeidentifyTemplateRequest.
                         * @implements IGetDeidentifyTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IGetDeidentifyTemplateRequest=} [properties] Properties to set
                         */
                        function GetDeidentifyTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetDeidentifyTemplateRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @instance
                         */
                        GetDeidentifyTemplateRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetDeidentifyTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetDeidentifyTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.GetDeidentifyTemplateRequest} GetDeidentifyTemplateRequest instance
                         */
                        GetDeidentifyTemplateRequest.create = function create(properties) {
                            return new GetDeidentifyTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetDeidentifyTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.GetDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetDeidentifyTemplateRequest} message GetDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetDeidentifyTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetDeidentifyTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.GetDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetDeidentifyTemplateRequest} message GetDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetDeidentifyTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetDeidentifyTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.GetDeidentifyTemplateRequest} GetDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetDeidentifyTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.GetDeidentifyTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetDeidentifyTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.GetDeidentifyTemplateRequest} GetDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetDeidentifyTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetDeidentifyTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetDeidentifyTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetDeidentifyTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.GetDeidentifyTemplateRequest} GetDeidentifyTemplateRequest
                         */
                        GetDeidentifyTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.GetDeidentifyTemplateRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetDeidentifyTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.GetDeidentifyTemplateRequest} message GetDeidentifyTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetDeidentifyTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetDeidentifyTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.GetDeidentifyTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetDeidentifyTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetDeidentifyTemplateRequest;
                    })();
    
                    v2.ListDeidentifyTemplatesRequest = (function() {
    
                        /**
                         * Properties of a ListDeidentifyTemplatesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListDeidentifyTemplatesRequest
                         * @property {string|null} [parent] ListDeidentifyTemplatesRequest parent
                         * @property {string|null} [pageToken] ListDeidentifyTemplatesRequest pageToken
                         * @property {number|null} [pageSize] ListDeidentifyTemplatesRequest pageSize
                         * @property {string|null} [orderBy] ListDeidentifyTemplatesRequest orderBy
                         * @property {string|null} [locationId] ListDeidentifyTemplatesRequest locationId
                         */
    
                        /**
                         * Constructs a new ListDeidentifyTemplatesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListDeidentifyTemplatesRequest.
                         * @implements IListDeidentifyTemplatesRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesRequest=} [properties] Properties to set
                         */
                        function ListDeidentifyTemplatesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListDeidentifyTemplatesRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @instance
                         */
                        ListDeidentifyTemplatesRequest.prototype.parent = "";
    
                        /**
                         * ListDeidentifyTemplatesRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @instance
                         */
                        ListDeidentifyTemplatesRequest.prototype.pageToken = "";
    
                        /**
                         * ListDeidentifyTemplatesRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @instance
                         */
                        ListDeidentifyTemplatesRequest.prototype.pageSize = 0;
    
                        /**
                         * ListDeidentifyTemplatesRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @instance
                         */
                        ListDeidentifyTemplatesRequest.prototype.orderBy = "";
    
                        /**
                         * ListDeidentifyTemplatesRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @instance
                         */
                        ListDeidentifyTemplatesRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ListDeidentifyTemplatesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesRequest} ListDeidentifyTemplatesRequest instance
                         */
                        ListDeidentifyTemplatesRequest.create = function create(properties) {
                            return new ListDeidentifyTemplatesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListDeidentifyTemplatesRequest message. Does not implicitly {@link google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesRequest} message ListDeidentifyTemplatesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDeidentifyTemplatesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderBy);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListDeidentifyTemplatesRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesRequest} message ListDeidentifyTemplatesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDeidentifyTemplatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListDeidentifyTemplatesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesRequest} ListDeidentifyTemplatesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDeidentifyTemplatesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListDeidentifyTemplatesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                case 3:
                                    message.pageSize = reader.int32();
                                    break;
                                case 4:
                                    message.orderBy = reader.string();
                                    break;
                                case 5:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListDeidentifyTemplatesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesRequest} ListDeidentifyTemplatesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDeidentifyTemplatesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListDeidentifyTemplatesRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListDeidentifyTemplatesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListDeidentifyTemplatesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesRequest} ListDeidentifyTemplatesRequest
                         */
                        ListDeidentifyTemplatesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListDeidentifyTemplatesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListDeidentifyTemplatesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ListDeidentifyTemplatesRequest} message ListDeidentifyTemplatesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListDeidentifyTemplatesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this ListDeidentifyTemplatesRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListDeidentifyTemplatesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListDeidentifyTemplatesRequest;
                    })();
    
                    v2.ListDeidentifyTemplatesResponse = (function() {
    
                        /**
                         * Properties of a ListDeidentifyTemplatesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListDeidentifyTemplatesResponse
                         * @property {Array.<google.privacy.dlp.v2.IDeidentifyTemplate>|null} [deidentifyTemplates] ListDeidentifyTemplatesResponse deidentifyTemplates
                         * @property {string|null} [nextPageToken] ListDeidentifyTemplatesResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListDeidentifyTemplatesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListDeidentifyTemplatesResponse.
                         * @implements IListDeidentifyTemplatesResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesResponse=} [properties] Properties to set
                         */
                        function ListDeidentifyTemplatesResponse(properties) {
                            this.deidentifyTemplates = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListDeidentifyTemplatesResponse deidentifyTemplates.
                         * @member {Array.<google.privacy.dlp.v2.IDeidentifyTemplate>} deidentifyTemplates
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @instance
                         */
                        ListDeidentifyTemplatesResponse.prototype.deidentifyTemplates = $util.emptyArray;
    
                        /**
                         * ListDeidentifyTemplatesResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @instance
                         */
                        ListDeidentifyTemplatesResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListDeidentifyTemplatesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesResponse} ListDeidentifyTemplatesResponse instance
                         */
                        ListDeidentifyTemplatesResponse.create = function create(properties) {
                            return new ListDeidentifyTemplatesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListDeidentifyTemplatesResponse message. Does not implicitly {@link google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesResponse} message ListDeidentifyTemplatesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDeidentifyTemplatesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.deidentifyTemplates != null && message.deidentifyTemplates.length)
                                for (var i = 0; i < message.deidentifyTemplates.length; ++i)
                                    $root.google.privacy.dlp.v2.DeidentifyTemplate.encode(message.deidentifyTemplates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListDeidentifyTemplatesResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListDeidentifyTemplatesResponse} message ListDeidentifyTemplatesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListDeidentifyTemplatesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListDeidentifyTemplatesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesResponse} ListDeidentifyTemplatesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDeidentifyTemplatesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListDeidentifyTemplatesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.deidentifyTemplates && message.deidentifyTemplates.length))
                                        message.deidentifyTemplates = [];
                                    message.deidentifyTemplates.push($root.google.privacy.dlp.v2.DeidentifyTemplate.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListDeidentifyTemplatesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesResponse} ListDeidentifyTemplatesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListDeidentifyTemplatesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListDeidentifyTemplatesResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListDeidentifyTemplatesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.deidentifyTemplates != null && message.hasOwnProperty("deidentifyTemplates")) {
                                if (!Array.isArray(message.deidentifyTemplates))
                                    return "deidentifyTemplates: array expected";
                                for (var i = 0; i < message.deidentifyTemplates.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.DeidentifyTemplate.verify(message.deidentifyTemplates[i]);
                                    if (error)
                                        return "deidentifyTemplates." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListDeidentifyTemplatesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListDeidentifyTemplatesResponse} ListDeidentifyTemplatesResponse
                         */
                        ListDeidentifyTemplatesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListDeidentifyTemplatesResponse();
                            if (object.deidentifyTemplates) {
                                if (!Array.isArray(object.deidentifyTemplates))
                                    throw TypeError(".google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentifyTemplates: array expected");
                                message.deidentifyTemplates = [];
                                for (var i = 0; i < object.deidentifyTemplates.length; ++i) {
                                    if (typeof object.deidentifyTemplates[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentifyTemplates: object expected");
                                    message.deidentifyTemplates[i] = $root.google.privacy.dlp.v2.DeidentifyTemplate.fromObject(object.deidentifyTemplates[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListDeidentifyTemplatesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ListDeidentifyTemplatesResponse} message ListDeidentifyTemplatesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListDeidentifyTemplatesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.deidentifyTemplates = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.deidentifyTemplates && message.deidentifyTemplates.length) {
                                object.deidentifyTemplates = [];
                                for (var j = 0; j < message.deidentifyTemplates.length; ++j)
                                    object.deidentifyTemplates[j] = $root.google.privacy.dlp.v2.DeidentifyTemplate.toObject(message.deidentifyTemplates[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListDeidentifyTemplatesResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListDeidentifyTemplatesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListDeidentifyTemplatesResponse;
                    })();
    
                    v2.DeleteDeidentifyTemplateRequest = (function() {
    
                        /**
                         * Properties of a DeleteDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeleteDeidentifyTemplateRequest
                         * @property {string|null} [name] DeleteDeidentifyTemplateRequest name
                         */
    
                        /**
                         * Constructs a new DeleteDeidentifyTemplateRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeleteDeidentifyTemplateRequest.
                         * @implements IDeleteDeidentifyTemplateRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest=} [properties] Properties to set
                         */
                        function DeleteDeidentifyTemplateRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteDeidentifyTemplateRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @instance
                         */
                        DeleteDeidentifyTemplateRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteDeidentifyTemplateRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest} DeleteDeidentifyTemplateRequest instance
                         */
                        DeleteDeidentifyTemplateRequest.create = function create(properties) {
                            return new DeleteDeidentifyTemplateRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteDeidentifyTemplateRequest message. Does not implicitly {@link google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest} message DeleteDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteDeidentifyTemplateRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteDeidentifyTemplateRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest} message DeleteDeidentifyTemplateRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteDeidentifyTemplateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteDeidentifyTemplateRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest} DeleteDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteDeidentifyTemplateRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteDeidentifyTemplateRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest} DeleteDeidentifyTemplateRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteDeidentifyTemplateRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteDeidentifyTemplateRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteDeidentifyTemplateRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteDeidentifyTemplateRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest} DeleteDeidentifyTemplateRequest
                         */
                        DeleteDeidentifyTemplateRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteDeidentifyTemplateRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @static
                         * @param {google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest} message DeleteDeidentifyTemplateRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteDeidentifyTemplateRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteDeidentifyTemplateRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteDeidentifyTemplateRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteDeidentifyTemplateRequest;
                    })();
    
                    v2.LargeCustomDictionaryConfig = (function() {
    
                        /**
                         * Properties of a LargeCustomDictionaryConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface ILargeCustomDictionaryConfig
                         * @property {google.privacy.dlp.v2.ICloudStoragePath|null} [outputPath] LargeCustomDictionaryConfig outputPath
                         * @property {google.privacy.dlp.v2.ICloudStorageFileSet|null} [cloudStorageFileSet] LargeCustomDictionaryConfig cloudStorageFileSet
                         * @property {google.privacy.dlp.v2.IBigQueryField|null} [bigQueryField] LargeCustomDictionaryConfig bigQueryField
                         */
    
                        /**
                         * Constructs a new LargeCustomDictionaryConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a LargeCustomDictionaryConfig.
                         * @implements ILargeCustomDictionaryConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryConfig=} [properties] Properties to set
                         */
                        function LargeCustomDictionaryConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LargeCustomDictionaryConfig outputPath.
                         * @member {google.privacy.dlp.v2.ICloudStoragePath|null|undefined} outputPath
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @instance
                         */
                        LargeCustomDictionaryConfig.prototype.outputPath = null;
    
                        /**
                         * LargeCustomDictionaryConfig cloudStorageFileSet.
                         * @member {google.privacy.dlp.v2.ICloudStorageFileSet|null|undefined} cloudStorageFileSet
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @instance
                         */
                        LargeCustomDictionaryConfig.prototype.cloudStorageFileSet = null;
    
                        /**
                         * LargeCustomDictionaryConfig bigQueryField.
                         * @member {google.privacy.dlp.v2.IBigQueryField|null|undefined} bigQueryField
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @instance
                         */
                        LargeCustomDictionaryConfig.prototype.bigQueryField = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * LargeCustomDictionaryConfig source.
                         * @member {"cloudStorageFileSet"|"bigQueryField"|undefined} source
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @instance
                         */
                        Object.defineProperty(LargeCustomDictionaryConfig.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["cloudStorageFileSet", "bigQueryField"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new LargeCustomDictionaryConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryConfig} LargeCustomDictionaryConfig instance
                         */
                        LargeCustomDictionaryConfig.create = function create(properties) {
                            return new LargeCustomDictionaryConfig(properties);
                        };
    
                        /**
                         * Encodes the specified LargeCustomDictionaryConfig message. Does not implicitly {@link google.privacy.dlp.v2.LargeCustomDictionaryConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryConfig} message LargeCustomDictionaryConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LargeCustomDictionaryConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.outputPath != null && Object.hasOwnProperty.call(message, "outputPath"))
                                $root.google.privacy.dlp.v2.CloudStoragePath.encode(message.outputPath, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.cloudStorageFileSet != null && Object.hasOwnProperty.call(message, "cloudStorageFileSet"))
                                $root.google.privacy.dlp.v2.CloudStorageFileSet.encode(message.cloudStorageFileSet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.bigQueryField != null && Object.hasOwnProperty.call(message, "bigQueryField"))
                                $root.google.privacy.dlp.v2.BigQueryField.encode(message.bigQueryField, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LargeCustomDictionaryConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.LargeCustomDictionaryConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryConfig} message LargeCustomDictionaryConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LargeCustomDictionaryConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LargeCustomDictionaryConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryConfig} LargeCustomDictionaryConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LargeCustomDictionaryConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.outputPath = $root.google.privacy.dlp.v2.CloudStoragePath.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.cloudStorageFileSet = $root.google.privacy.dlp.v2.CloudStorageFileSet.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.bigQueryField = $root.google.privacy.dlp.v2.BigQueryField.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LargeCustomDictionaryConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryConfig} LargeCustomDictionaryConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LargeCustomDictionaryConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LargeCustomDictionaryConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LargeCustomDictionaryConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.outputPath != null && message.hasOwnProperty("outputPath")) {
                                var error = $root.google.privacy.dlp.v2.CloudStoragePath.verify(message.outputPath);
                                if (error)
                                    return "outputPath." + error;
                            }
                            if (message.cloudStorageFileSet != null && message.hasOwnProperty("cloudStorageFileSet")) {
                                properties.source = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CloudStorageFileSet.verify(message.cloudStorageFileSet);
                                    if (error)
                                        return "cloudStorageFileSet." + error;
                                }
                            }
                            if (message.bigQueryField != null && message.hasOwnProperty("bigQueryField")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.BigQueryField.verify(message.bigQueryField);
                                    if (error)
                                        return "bigQueryField." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LargeCustomDictionaryConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryConfig} LargeCustomDictionaryConfig
                         */
                        LargeCustomDictionaryConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig();
                            if (object.outputPath != null) {
                                if (typeof object.outputPath !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.LargeCustomDictionaryConfig.outputPath: object expected");
                                message.outputPath = $root.google.privacy.dlp.v2.CloudStoragePath.fromObject(object.outputPath);
                            }
                            if (object.cloudStorageFileSet != null) {
                                if (typeof object.cloudStorageFileSet !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.LargeCustomDictionaryConfig.cloudStorageFileSet: object expected");
                                message.cloudStorageFileSet = $root.google.privacy.dlp.v2.CloudStorageFileSet.fromObject(object.cloudStorageFileSet);
                            }
                            if (object.bigQueryField != null) {
                                if (typeof object.bigQueryField !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.LargeCustomDictionaryConfig.bigQueryField: object expected");
                                message.bigQueryField = $root.google.privacy.dlp.v2.BigQueryField.fromObject(object.bigQueryField);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LargeCustomDictionaryConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @static
                         * @param {google.privacy.dlp.v2.LargeCustomDictionaryConfig} message LargeCustomDictionaryConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LargeCustomDictionaryConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.outputPath = null;
                            if (message.outputPath != null && message.hasOwnProperty("outputPath"))
                                object.outputPath = $root.google.privacy.dlp.v2.CloudStoragePath.toObject(message.outputPath, options);
                            if (message.cloudStorageFileSet != null && message.hasOwnProperty("cloudStorageFileSet")) {
                                object.cloudStorageFileSet = $root.google.privacy.dlp.v2.CloudStorageFileSet.toObject(message.cloudStorageFileSet, options);
                                if (options.oneofs)
                                    object.source = "cloudStorageFileSet";
                            }
                            if (message.bigQueryField != null && message.hasOwnProperty("bigQueryField")) {
                                object.bigQueryField = $root.google.privacy.dlp.v2.BigQueryField.toObject(message.bigQueryField, options);
                                if (options.oneofs)
                                    object.source = "bigQueryField";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LargeCustomDictionaryConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LargeCustomDictionaryConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return LargeCustomDictionaryConfig;
                    })();
    
                    v2.LargeCustomDictionaryStats = (function() {
    
                        /**
                         * Properties of a LargeCustomDictionaryStats.
                         * @memberof google.privacy.dlp.v2
                         * @interface ILargeCustomDictionaryStats
                         * @property {number|Long|null} [approxNumPhrases] LargeCustomDictionaryStats approxNumPhrases
                         */
    
                        /**
                         * Constructs a new LargeCustomDictionaryStats.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a LargeCustomDictionaryStats.
                         * @implements ILargeCustomDictionaryStats
                         * @constructor
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryStats=} [properties] Properties to set
                         */
                        function LargeCustomDictionaryStats(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LargeCustomDictionaryStats approxNumPhrases.
                         * @member {number|Long} approxNumPhrases
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @instance
                         */
                        LargeCustomDictionaryStats.prototype.approxNumPhrases = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new LargeCustomDictionaryStats instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryStats=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryStats} LargeCustomDictionaryStats instance
                         */
                        LargeCustomDictionaryStats.create = function create(properties) {
                            return new LargeCustomDictionaryStats(properties);
                        };
    
                        /**
                         * Encodes the specified LargeCustomDictionaryStats message. Does not implicitly {@link google.privacy.dlp.v2.LargeCustomDictionaryStats.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryStats} message LargeCustomDictionaryStats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LargeCustomDictionaryStats.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.approxNumPhrases != null && Object.hasOwnProperty.call(message, "approxNumPhrases"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.approxNumPhrases);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LargeCustomDictionaryStats message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.LargeCustomDictionaryStats.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {google.privacy.dlp.v2.ILargeCustomDictionaryStats} message LargeCustomDictionaryStats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LargeCustomDictionaryStats.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LargeCustomDictionaryStats message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryStats} LargeCustomDictionaryStats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LargeCustomDictionaryStats.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.LargeCustomDictionaryStats();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.approxNumPhrases = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LargeCustomDictionaryStats message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryStats} LargeCustomDictionaryStats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LargeCustomDictionaryStats.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LargeCustomDictionaryStats message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LargeCustomDictionaryStats.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.approxNumPhrases != null && message.hasOwnProperty("approxNumPhrases"))
                                if (!$util.isInteger(message.approxNumPhrases) && !(message.approxNumPhrases && $util.isInteger(message.approxNumPhrases.low) && $util.isInteger(message.approxNumPhrases.high)))
                                    return "approxNumPhrases: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a LargeCustomDictionaryStats message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.LargeCustomDictionaryStats} LargeCustomDictionaryStats
                         */
                        LargeCustomDictionaryStats.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.LargeCustomDictionaryStats)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.LargeCustomDictionaryStats();
                            if (object.approxNumPhrases != null)
                                if ($util.Long)
                                    (message.approxNumPhrases = $util.Long.fromValue(object.approxNumPhrases)).unsigned = false;
                                else if (typeof object.approxNumPhrases === "string")
                                    message.approxNumPhrases = parseInt(object.approxNumPhrases, 10);
                                else if (typeof object.approxNumPhrases === "number")
                                    message.approxNumPhrases = object.approxNumPhrases;
                                else if (typeof object.approxNumPhrases === "object")
                                    message.approxNumPhrases = new $util.LongBits(object.approxNumPhrases.low >>> 0, object.approxNumPhrases.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LargeCustomDictionaryStats message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @static
                         * @param {google.privacy.dlp.v2.LargeCustomDictionaryStats} message LargeCustomDictionaryStats
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LargeCustomDictionaryStats.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.approxNumPhrases = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.approxNumPhrases = options.longs === String ? "0" : 0;
                            if (message.approxNumPhrases != null && message.hasOwnProperty("approxNumPhrases"))
                                if (typeof message.approxNumPhrases === "number")
                                    object.approxNumPhrases = options.longs === String ? String(message.approxNumPhrases) : message.approxNumPhrases;
                                else
                                    object.approxNumPhrases = options.longs === String ? $util.Long.prototype.toString.call(message.approxNumPhrases) : options.longs === Number ? new $util.LongBits(message.approxNumPhrases.low >>> 0, message.approxNumPhrases.high >>> 0).toNumber() : message.approxNumPhrases;
                            return object;
                        };
    
                        /**
                         * Converts this LargeCustomDictionaryStats to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.LargeCustomDictionaryStats
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LargeCustomDictionaryStats.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return LargeCustomDictionaryStats;
                    })();
    
                    v2.StoredInfoTypeConfig = (function() {
    
                        /**
                         * Properties of a StoredInfoTypeConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStoredInfoTypeConfig
                         * @property {string|null} [displayName] StoredInfoTypeConfig displayName
                         * @property {string|null} [description] StoredInfoTypeConfig description
                         * @property {google.privacy.dlp.v2.ILargeCustomDictionaryConfig|null} [largeCustomDictionary] StoredInfoTypeConfig largeCustomDictionary
                         * @property {google.privacy.dlp.v2.CustomInfoType.IDictionary|null} [dictionary] StoredInfoTypeConfig dictionary
                         * @property {google.privacy.dlp.v2.CustomInfoType.IRegex|null} [regex] StoredInfoTypeConfig regex
                         */
    
                        /**
                         * Constructs a new StoredInfoTypeConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StoredInfoTypeConfig.
                         * @implements IStoredInfoTypeConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeConfig=} [properties] Properties to set
                         */
                        function StoredInfoTypeConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StoredInfoTypeConfig displayName.
                         * @member {string} displayName
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         */
                        StoredInfoTypeConfig.prototype.displayName = "";
    
                        /**
                         * StoredInfoTypeConfig description.
                         * @member {string} description
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         */
                        StoredInfoTypeConfig.prototype.description = "";
    
                        /**
                         * StoredInfoTypeConfig largeCustomDictionary.
                         * @member {google.privacy.dlp.v2.ILargeCustomDictionaryConfig|null|undefined} largeCustomDictionary
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         */
                        StoredInfoTypeConfig.prototype.largeCustomDictionary = null;
    
                        /**
                         * StoredInfoTypeConfig dictionary.
                         * @member {google.privacy.dlp.v2.CustomInfoType.IDictionary|null|undefined} dictionary
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         */
                        StoredInfoTypeConfig.prototype.dictionary = null;
    
                        /**
                         * StoredInfoTypeConfig regex.
                         * @member {google.privacy.dlp.v2.CustomInfoType.IRegex|null|undefined} regex
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         */
                        StoredInfoTypeConfig.prototype.regex = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * StoredInfoTypeConfig type.
                         * @member {"largeCustomDictionary"|"dictionary"|"regex"|undefined} type
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         */
                        Object.defineProperty(StoredInfoTypeConfig.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["largeCustomDictionary", "dictionary", "regex"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new StoredInfoTypeConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeConfig} StoredInfoTypeConfig instance
                         */
                        StoredInfoTypeConfig.create = function create(properties) {
                            return new StoredInfoTypeConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StoredInfoTypeConfig message. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoTypeConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeConfig} message StoredInfoTypeConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoTypeConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayName);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.largeCustomDictionary != null && Object.hasOwnProperty.call(message, "largeCustomDictionary"))
                                $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig.encode(message.largeCustomDictionary, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.dictionary != null && Object.hasOwnProperty.call(message, "dictionary"))
                                $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.encode(message.dictionary, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.regex != null && Object.hasOwnProperty.call(message, "regex"))
                                $root.google.privacy.dlp.v2.CustomInfoType.Regex.encode(message.regex, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StoredInfoTypeConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoTypeConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeConfig} message StoredInfoTypeConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoTypeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StoredInfoTypeConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeConfig} StoredInfoTypeConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoTypeConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StoredInfoTypeConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.displayName = reader.string();
                                    break;
                                case 2:
                                    message.description = reader.string();
                                    break;
                                case 3:
                                    message.largeCustomDictionary = $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StoredInfoTypeConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeConfig} StoredInfoTypeConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoTypeConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StoredInfoTypeConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StoredInfoTypeConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.largeCustomDictionary != null && message.hasOwnProperty("largeCustomDictionary")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig.verify(message.largeCustomDictionary);
                                    if (error)
                                        return "largeCustomDictionary." + error;
                                }
                            }
                            if (message.dictionary != null && message.hasOwnProperty("dictionary")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.verify(message.dictionary);
                                    if (error)
                                        return "dictionary." + error;
                                }
                            }
                            if (message.regex != null && message.hasOwnProperty("regex")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.Regex.verify(message.regex);
                                    if (error)
                                        return "regex." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StoredInfoTypeConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeConfig} StoredInfoTypeConfig
                         */
                        StoredInfoTypeConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StoredInfoTypeConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StoredInfoTypeConfig();
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.largeCustomDictionary != null) {
                                if (typeof object.largeCustomDictionary !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeConfig.largeCustomDictionary: object expected");
                                message.largeCustomDictionary = $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig.fromObject(object.largeCustomDictionary);
                            }
                            if (object.dictionary != null) {
                                if (typeof object.dictionary !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeConfig.dictionary: object expected");
                                message.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.fromObject(object.dictionary);
                            }
                            if (object.regex != null) {
                                if (typeof object.regex !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeConfig.regex: object expected");
                                message.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.fromObject(object.regex);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StoredInfoTypeConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @static
                         * @param {google.privacy.dlp.v2.StoredInfoTypeConfig} message StoredInfoTypeConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StoredInfoTypeConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.displayName = "";
                                object.description = "";
                            }
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.largeCustomDictionary != null && message.hasOwnProperty("largeCustomDictionary")) {
                                object.largeCustomDictionary = $root.google.privacy.dlp.v2.LargeCustomDictionaryConfig.toObject(message.largeCustomDictionary, options);
                                if (options.oneofs)
                                    object.type = "largeCustomDictionary";
                            }
                            if (message.dictionary != null && message.hasOwnProperty("dictionary")) {
                                object.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.toObject(message.dictionary, options);
                                if (options.oneofs)
                                    object.type = "dictionary";
                            }
                            if (message.regex != null && message.hasOwnProperty("regex")) {
                                object.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.toObject(message.regex, options);
                                if (options.oneofs)
                                    object.type = "regex";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this StoredInfoTypeConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StoredInfoTypeConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return StoredInfoTypeConfig;
                    })();
    
                    v2.StoredInfoTypeStats = (function() {
    
                        /**
                         * Properties of a StoredInfoTypeStats.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStoredInfoTypeStats
                         * @property {google.privacy.dlp.v2.ILargeCustomDictionaryStats|null} [largeCustomDictionary] StoredInfoTypeStats largeCustomDictionary
                         */
    
                        /**
                         * Constructs a new StoredInfoTypeStats.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StoredInfoTypeStats.
                         * @implements IStoredInfoTypeStats
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeStats=} [properties] Properties to set
                         */
                        function StoredInfoTypeStats(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StoredInfoTypeStats largeCustomDictionary.
                         * @member {google.privacy.dlp.v2.ILargeCustomDictionaryStats|null|undefined} largeCustomDictionary
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @instance
                         */
                        StoredInfoTypeStats.prototype.largeCustomDictionary = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * StoredInfoTypeStats type.
                         * @member {"largeCustomDictionary"|undefined} type
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @instance
                         */
                        Object.defineProperty(StoredInfoTypeStats.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["largeCustomDictionary"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new StoredInfoTypeStats instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeStats=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeStats} StoredInfoTypeStats instance
                         */
                        StoredInfoTypeStats.create = function create(properties) {
                            return new StoredInfoTypeStats(properties);
                        };
    
                        /**
                         * Encodes the specified StoredInfoTypeStats message. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoTypeStats.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeStats} message StoredInfoTypeStats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoTypeStats.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.largeCustomDictionary != null && Object.hasOwnProperty.call(message, "largeCustomDictionary"))
                                $root.google.privacy.dlp.v2.LargeCustomDictionaryStats.encode(message.largeCustomDictionary, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StoredInfoTypeStats message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoTypeStats.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeStats} message StoredInfoTypeStats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoTypeStats.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StoredInfoTypeStats message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeStats} StoredInfoTypeStats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoTypeStats.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StoredInfoTypeStats();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.largeCustomDictionary = $root.google.privacy.dlp.v2.LargeCustomDictionaryStats.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StoredInfoTypeStats message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeStats} StoredInfoTypeStats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoTypeStats.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StoredInfoTypeStats message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StoredInfoTypeStats.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.largeCustomDictionary != null && message.hasOwnProperty("largeCustomDictionary")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.LargeCustomDictionaryStats.verify(message.largeCustomDictionary);
                                    if (error)
                                        return "largeCustomDictionary." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StoredInfoTypeStats message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeStats} StoredInfoTypeStats
                         */
                        StoredInfoTypeStats.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StoredInfoTypeStats)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StoredInfoTypeStats();
                            if (object.largeCustomDictionary != null) {
                                if (typeof object.largeCustomDictionary !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeStats.largeCustomDictionary: object expected");
                                message.largeCustomDictionary = $root.google.privacy.dlp.v2.LargeCustomDictionaryStats.fromObject(object.largeCustomDictionary);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StoredInfoTypeStats message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @static
                         * @param {google.privacy.dlp.v2.StoredInfoTypeStats} message StoredInfoTypeStats
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StoredInfoTypeStats.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.largeCustomDictionary != null && message.hasOwnProperty("largeCustomDictionary")) {
                                object.largeCustomDictionary = $root.google.privacy.dlp.v2.LargeCustomDictionaryStats.toObject(message.largeCustomDictionary, options);
                                if (options.oneofs)
                                    object.type = "largeCustomDictionary";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this StoredInfoTypeStats to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeStats
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StoredInfoTypeStats.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return StoredInfoTypeStats;
                    })();
    
                    v2.StoredInfoTypeVersion = (function() {
    
                        /**
                         * Properties of a StoredInfoTypeVersion.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStoredInfoTypeVersion
                         * @property {google.privacy.dlp.v2.IStoredInfoTypeConfig|null} [config] StoredInfoTypeVersion config
                         * @property {google.protobuf.ITimestamp|null} [createTime] StoredInfoTypeVersion createTime
                         * @property {google.privacy.dlp.v2.StoredInfoTypeState|null} [state] StoredInfoTypeVersion state
                         * @property {Array.<google.privacy.dlp.v2.IError>|null} [errors] StoredInfoTypeVersion errors
                         * @property {google.privacy.dlp.v2.IStoredInfoTypeStats|null} [stats] StoredInfoTypeVersion stats
                         */
    
                        /**
                         * Constructs a new StoredInfoTypeVersion.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StoredInfoTypeVersion.
                         * @implements IStoredInfoTypeVersion
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeVersion=} [properties] Properties to set
                         */
                        function StoredInfoTypeVersion(properties) {
                            this.errors = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StoredInfoTypeVersion config.
                         * @member {google.privacy.dlp.v2.IStoredInfoTypeConfig|null|undefined} config
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @instance
                         */
                        StoredInfoTypeVersion.prototype.config = null;
    
                        /**
                         * StoredInfoTypeVersion createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @instance
                         */
                        StoredInfoTypeVersion.prototype.createTime = null;
    
                        /**
                         * StoredInfoTypeVersion state.
                         * @member {google.privacy.dlp.v2.StoredInfoTypeState} state
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @instance
                         */
                        StoredInfoTypeVersion.prototype.state = 0;
    
                        /**
                         * StoredInfoTypeVersion errors.
                         * @member {Array.<google.privacy.dlp.v2.IError>} errors
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @instance
                         */
                        StoredInfoTypeVersion.prototype.errors = $util.emptyArray;
    
                        /**
                         * StoredInfoTypeVersion stats.
                         * @member {google.privacy.dlp.v2.IStoredInfoTypeStats|null|undefined} stats
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @instance
                         */
                        StoredInfoTypeVersion.prototype.stats = null;
    
                        /**
                         * Creates a new StoredInfoTypeVersion instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeVersion=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeVersion} StoredInfoTypeVersion instance
                         */
                        StoredInfoTypeVersion.create = function create(properties) {
                            return new StoredInfoTypeVersion(properties);
                        };
    
                        /**
                         * Encodes the specified StoredInfoTypeVersion message. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoTypeVersion.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeVersion} message StoredInfoTypeVersion message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoTypeVersion.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                                $root.google.privacy.dlp.v2.StoredInfoTypeConfig.encode(message.config, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                            if (message.errors != null && message.errors.length)
                                for (var i = 0; i < message.errors.length; ++i)
                                    $root.google.privacy.dlp.v2.Error.encode(message.errors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.stats != null && Object.hasOwnProperty.call(message, "stats"))
                                $root.google.privacy.dlp.v2.StoredInfoTypeStats.encode(message.stats, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StoredInfoTypeVersion message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoTypeVersion.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoTypeVersion} message StoredInfoTypeVersion message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoTypeVersion.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StoredInfoTypeVersion message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeVersion} StoredInfoTypeVersion
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoTypeVersion.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StoredInfoTypeVersion();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.state = reader.int32();
                                    break;
                                case 4:
                                    if (!(message.errors && message.errors.length))
                                        message.errors = [];
                                    message.errors.push($root.google.privacy.dlp.v2.Error.decode(reader, reader.uint32()));
                                    break;
                                case 5:
                                    message.stats = $root.google.privacy.dlp.v2.StoredInfoTypeStats.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StoredInfoTypeVersion message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeVersion} StoredInfoTypeVersion
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoTypeVersion.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StoredInfoTypeVersion message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StoredInfoTypeVersion.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.config != null && message.hasOwnProperty("config")) {
                                var error = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.verify(message.config);
                                if (error)
                                    return "config." + error;
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.errors != null && message.hasOwnProperty("errors")) {
                                if (!Array.isArray(message.errors))
                                    return "errors: array expected";
                                for (var i = 0; i < message.errors.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Error.verify(message.errors[i]);
                                    if (error)
                                        return "errors." + error;
                                }
                            }
                            if (message.stats != null && message.hasOwnProperty("stats")) {
                                var error = $root.google.privacy.dlp.v2.StoredInfoTypeStats.verify(message.stats);
                                if (error)
                                    return "stats." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StoredInfoTypeVersion message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StoredInfoTypeVersion} StoredInfoTypeVersion
                         */
                        StoredInfoTypeVersion.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StoredInfoTypeVersion)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StoredInfoTypeVersion();
                            if (object.config != null) {
                                if (typeof object.config !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeVersion.config: object expected");
                                message.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.fromObject(object.config);
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeVersion.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            switch (object.state) {
                            case "STORED_INFO_TYPE_STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "PENDING":
                            case 1:
                                message.state = 1;
                                break;
                            case "READY":
                            case 2:
                                message.state = 2;
                                break;
                            case "FAILED":
                            case 3:
                                message.state = 3;
                                break;
                            case "INVALID":
                            case 4:
                                message.state = 4;
                                break;
                            }
                            if (object.errors) {
                                if (!Array.isArray(object.errors))
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeVersion.errors: array expected");
                                message.errors = [];
                                for (var i = 0; i < object.errors.length; ++i) {
                                    if (typeof object.errors[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeVersion.errors: object expected");
                                    message.errors[i] = $root.google.privacy.dlp.v2.Error.fromObject(object.errors[i]);
                                }
                            }
                            if (object.stats != null) {
                                if (typeof object.stats !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoTypeVersion.stats: object expected");
                                message.stats = $root.google.privacy.dlp.v2.StoredInfoTypeStats.fromObject(object.stats);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StoredInfoTypeVersion message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @static
                         * @param {google.privacy.dlp.v2.StoredInfoTypeVersion} message StoredInfoTypeVersion
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StoredInfoTypeVersion.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.errors = [];
                            if (options.defaults) {
                                object.config = null;
                                object.createTime = null;
                                object.state = options.enums === String ? "STORED_INFO_TYPE_STATE_UNSPECIFIED" : 0;
                                object.stats = null;
                            }
                            if (message.config != null && message.hasOwnProperty("config"))
                                object.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.toObject(message.config, options);
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.privacy.dlp.v2.StoredInfoTypeState[message.state] : message.state;
                            if (message.errors && message.errors.length) {
                                object.errors = [];
                                for (var j = 0; j < message.errors.length; ++j)
                                    object.errors[j] = $root.google.privacy.dlp.v2.Error.toObject(message.errors[j], options);
                            }
                            if (message.stats != null && message.hasOwnProperty("stats"))
                                object.stats = $root.google.privacy.dlp.v2.StoredInfoTypeStats.toObject(message.stats, options);
                            return object;
                        };
    
                        /**
                         * Converts this StoredInfoTypeVersion to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StoredInfoTypeVersion
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StoredInfoTypeVersion.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return StoredInfoTypeVersion;
                    })();
    
                    v2.StoredInfoType = (function() {
    
                        /**
                         * Properties of a StoredInfoType.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStoredInfoType
                         * @property {string|null} [name] StoredInfoType name
                         * @property {google.privacy.dlp.v2.IStoredInfoTypeVersion|null} [currentVersion] StoredInfoType currentVersion
                         * @property {Array.<google.privacy.dlp.v2.IStoredInfoTypeVersion>|null} [pendingVersions] StoredInfoType pendingVersions
                         */
    
                        /**
                         * Constructs a new StoredInfoType.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StoredInfoType.
                         * @implements IStoredInfoType
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStoredInfoType=} [properties] Properties to set
                         */
                        function StoredInfoType(properties) {
                            this.pendingVersions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StoredInfoType name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @instance
                         */
                        StoredInfoType.prototype.name = "";
    
                        /**
                         * StoredInfoType currentVersion.
                         * @member {google.privacy.dlp.v2.IStoredInfoTypeVersion|null|undefined} currentVersion
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @instance
                         */
                        StoredInfoType.prototype.currentVersion = null;
    
                        /**
                         * StoredInfoType pendingVersions.
                         * @member {Array.<google.privacy.dlp.v2.IStoredInfoTypeVersion>} pendingVersions
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @instance
                         */
                        StoredInfoType.prototype.pendingVersions = $util.emptyArray;
    
                        /**
                         * Creates a new StoredInfoType instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoType=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StoredInfoType} StoredInfoType instance
                         */
                        StoredInfoType.create = function create(properties) {
                            return new StoredInfoType(properties);
                        };
    
                        /**
                         * Encodes the specified StoredInfoType message. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoType.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoType} message StoredInfoType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoType.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.currentVersion != null && Object.hasOwnProperty.call(message, "currentVersion"))
                                $root.google.privacy.dlp.v2.StoredInfoTypeVersion.encode(message.currentVersion, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.pendingVersions != null && message.pendingVersions.length)
                                for (var i = 0; i < message.pendingVersions.length; ++i)
                                    $root.google.privacy.dlp.v2.StoredInfoTypeVersion.encode(message.pendingVersions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StoredInfoType message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StoredInfoType.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredInfoType} message StoredInfoType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredInfoType.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StoredInfoType message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StoredInfoType} StoredInfoType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoType.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StoredInfoType();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.currentVersion = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    if (!(message.pendingVersions && message.pendingVersions.length))
                                        message.pendingVersions = [];
                                    message.pendingVersions.push($root.google.privacy.dlp.v2.StoredInfoTypeVersion.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StoredInfoType message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StoredInfoType} StoredInfoType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredInfoType.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StoredInfoType message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StoredInfoType.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.currentVersion != null && message.hasOwnProperty("currentVersion")) {
                                var error = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.verify(message.currentVersion);
                                if (error)
                                    return "currentVersion." + error;
                            }
                            if (message.pendingVersions != null && message.hasOwnProperty("pendingVersions")) {
                                if (!Array.isArray(message.pendingVersions))
                                    return "pendingVersions: array expected";
                                for (var i = 0; i < message.pendingVersions.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.verify(message.pendingVersions[i]);
                                    if (error)
                                        return "pendingVersions." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StoredInfoType message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StoredInfoType} StoredInfoType
                         */
                        StoredInfoType.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StoredInfoType)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StoredInfoType();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.currentVersion != null) {
                                if (typeof object.currentVersion !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoType.currentVersion: object expected");
                                message.currentVersion = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.fromObject(object.currentVersion);
                            }
                            if (object.pendingVersions) {
                                if (!Array.isArray(object.pendingVersions))
                                    throw TypeError(".google.privacy.dlp.v2.StoredInfoType.pendingVersions: array expected");
                                message.pendingVersions = [];
                                for (var i = 0; i < object.pendingVersions.length; ++i) {
                                    if (typeof object.pendingVersions[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StoredInfoType.pendingVersions: object expected");
                                    message.pendingVersions[i] = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.fromObject(object.pendingVersions[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StoredInfoType message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.StoredInfoType} message StoredInfoType
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StoredInfoType.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.pendingVersions = [];
                            if (options.defaults) {
                                object.name = "";
                                object.currentVersion = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.currentVersion != null && message.hasOwnProperty("currentVersion"))
                                object.currentVersion = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.toObject(message.currentVersion, options);
                            if (message.pendingVersions && message.pendingVersions.length) {
                                object.pendingVersions = [];
                                for (var j = 0; j < message.pendingVersions.length; ++j)
                                    object.pendingVersions[j] = $root.google.privacy.dlp.v2.StoredInfoTypeVersion.toObject(message.pendingVersions[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this StoredInfoType to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StoredInfoType
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StoredInfoType.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return StoredInfoType;
                    })();
    
                    v2.CreateStoredInfoTypeRequest = (function() {
    
                        /**
                         * Properties of a CreateStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICreateStoredInfoTypeRequest
                         * @property {string|null} [parent] CreateStoredInfoTypeRequest parent
                         * @property {google.privacy.dlp.v2.IStoredInfoTypeConfig|null} [config] CreateStoredInfoTypeRequest config
                         * @property {string|null} [storedInfoTypeId] CreateStoredInfoTypeRequest storedInfoTypeId
                         * @property {string|null} [locationId] CreateStoredInfoTypeRequest locationId
                         */
    
                        /**
                         * Constructs a new CreateStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CreateStoredInfoTypeRequest.
                         * @implements ICreateStoredInfoTypeRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICreateStoredInfoTypeRequest=} [properties] Properties to set
                         */
                        function CreateStoredInfoTypeRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateStoredInfoTypeRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @instance
                         */
                        CreateStoredInfoTypeRequest.prototype.parent = "";
    
                        /**
                         * CreateStoredInfoTypeRequest config.
                         * @member {google.privacy.dlp.v2.IStoredInfoTypeConfig|null|undefined} config
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @instance
                         */
                        CreateStoredInfoTypeRequest.prototype.config = null;
    
                        /**
                         * CreateStoredInfoTypeRequest storedInfoTypeId.
                         * @member {string} storedInfoTypeId
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @instance
                         */
                        CreateStoredInfoTypeRequest.prototype.storedInfoTypeId = "";
    
                        /**
                         * CreateStoredInfoTypeRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @instance
                         */
                        CreateStoredInfoTypeRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new CreateStoredInfoTypeRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateStoredInfoTypeRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CreateStoredInfoTypeRequest} CreateStoredInfoTypeRequest instance
                         */
                        CreateStoredInfoTypeRequest.create = function create(properties) {
                            return new CreateStoredInfoTypeRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateStoredInfoTypeRequest message. Does not implicitly {@link google.privacy.dlp.v2.CreateStoredInfoTypeRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateStoredInfoTypeRequest} message CreateStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateStoredInfoTypeRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                                $root.google.privacy.dlp.v2.StoredInfoTypeConfig.encode(message.config, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.storedInfoTypeId != null && Object.hasOwnProperty.call(message, "storedInfoTypeId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.storedInfoTypeId);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateStoredInfoTypeRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CreateStoredInfoTypeRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ICreateStoredInfoTypeRequest} message CreateStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateStoredInfoTypeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateStoredInfoTypeRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CreateStoredInfoTypeRequest} CreateStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateStoredInfoTypeRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CreateStoredInfoTypeRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.storedInfoTypeId = reader.string();
                                    break;
                                case 4:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateStoredInfoTypeRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CreateStoredInfoTypeRequest} CreateStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateStoredInfoTypeRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateStoredInfoTypeRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateStoredInfoTypeRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.config != null && message.hasOwnProperty("config")) {
                                var error = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.verify(message.config);
                                if (error)
                                    return "config." + error;
                            }
                            if (message.storedInfoTypeId != null && message.hasOwnProperty("storedInfoTypeId"))
                                if (!$util.isString(message.storedInfoTypeId))
                                    return "storedInfoTypeId: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateStoredInfoTypeRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CreateStoredInfoTypeRequest} CreateStoredInfoTypeRequest
                         */
                        CreateStoredInfoTypeRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CreateStoredInfoTypeRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.config != null) {
                                if (typeof object.config !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CreateStoredInfoTypeRequest.config: object expected");
                                message.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.fromObject(object.config);
                            }
                            if (object.storedInfoTypeId != null)
                                message.storedInfoTypeId = String(object.storedInfoTypeId);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateStoredInfoTypeRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.CreateStoredInfoTypeRequest} message CreateStoredInfoTypeRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateStoredInfoTypeRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.config = null;
                                object.storedInfoTypeId = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.config != null && message.hasOwnProperty("config"))
                                object.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.toObject(message.config, options);
                            if (message.storedInfoTypeId != null && message.hasOwnProperty("storedInfoTypeId"))
                                object.storedInfoTypeId = message.storedInfoTypeId;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateStoredInfoTypeRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CreateStoredInfoTypeRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateStoredInfoTypeRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateStoredInfoTypeRequest;
                    })();
    
                    v2.UpdateStoredInfoTypeRequest = (function() {
    
                        /**
                         * Properties of an UpdateStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IUpdateStoredInfoTypeRequest
                         * @property {string|null} [name] UpdateStoredInfoTypeRequest name
                         * @property {google.privacy.dlp.v2.IStoredInfoTypeConfig|null} [config] UpdateStoredInfoTypeRequest config
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateStoredInfoTypeRequest updateMask
                         */
    
                        /**
                         * Constructs a new UpdateStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an UpdateStoredInfoTypeRequest.
                         * @implements IUpdateStoredInfoTypeRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest=} [properties] Properties to set
                         */
                        function UpdateStoredInfoTypeRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateStoredInfoTypeRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @instance
                         */
                        UpdateStoredInfoTypeRequest.prototype.name = "";
    
                        /**
                         * UpdateStoredInfoTypeRequest config.
                         * @member {google.privacy.dlp.v2.IStoredInfoTypeConfig|null|undefined} config
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @instance
                         */
                        UpdateStoredInfoTypeRequest.prototype.config = null;
    
                        /**
                         * UpdateStoredInfoTypeRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @instance
                         */
                        UpdateStoredInfoTypeRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new UpdateStoredInfoTypeRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.UpdateStoredInfoTypeRequest} UpdateStoredInfoTypeRequest instance
                         */
                        UpdateStoredInfoTypeRequest.create = function create(properties) {
                            return new UpdateStoredInfoTypeRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateStoredInfoTypeRequest message. Does not implicitly {@link google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest} message UpdateStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateStoredInfoTypeRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                                $root.google.privacy.dlp.v2.StoredInfoTypeConfig.encode(message.config, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateStoredInfoTypeRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest} message UpdateStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateStoredInfoTypeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateStoredInfoTypeRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.UpdateStoredInfoTypeRequest} UpdateStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateStoredInfoTypeRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.UpdateStoredInfoTypeRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateStoredInfoTypeRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.UpdateStoredInfoTypeRequest} UpdateStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateStoredInfoTypeRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateStoredInfoTypeRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateStoredInfoTypeRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.config != null && message.hasOwnProperty("config")) {
                                var error = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.verify(message.config);
                                if (error)
                                    return "config." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateStoredInfoTypeRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.UpdateStoredInfoTypeRequest} UpdateStoredInfoTypeRequest
                         */
                        UpdateStoredInfoTypeRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.UpdateStoredInfoTypeRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.config != null) {
                                if (typeof object.config !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.config: object expected");
                                message.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.fromObject(object.config);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateStoredInfoTypeRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.UpdateStoredInfoTypeRequest} message UpdateStoredInfoTypeRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateStoredInfoTypeRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.config = null;
                                object.updateMask = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.config != null && message.hasOwnProperty("config"))
                                object.config = $root.google.privacy.dlp.v2.StoredInfoTypeConfig.toObject(message.config, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateStoredInfoTypeRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateStoredInfoTypeRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateStoredInfoTypeRequest;
                    })();
    
                    v2.GetStoredInfoTypeRequest = (function() {
    
                        /**
                         * Properties of a GetStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IGetStoredInfoTypeRequest
                         * @property {string|null} [name] GetStoredInfoTypeRequest name
                         */
    
                        /**
                         * Constructs a new GetStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a GetStoredInfoTypeRequest.
                         * @implements IGetStoredInfoTypeRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IGetStoredInfoTypeRequest=} [properties] Properties to set
                         */
                        function GetStoredInfoTypeRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetStoredInfoTypeRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @instance
                         */
                        GetStoredInfoTypeRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetStoredInfoTypeRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetStoredInfoTypeRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.GetStoredInfoTypeRequest} GetStoredInfoTypeRequest instance
                         */
                        GetStoredInfoTypeRequest.create = function create(properties) {
                            return new GetStoredInfoTypeRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetStoredInfoTypeRequest message. Does not implicitly {@link google.privacy.dlp.v2.GetStoredInfoTypeRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetStoredInfoTypeRequest} message GetStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetStoredInfoTypeRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetStoredInfoTypeRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.GetStoredInfoTypeRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IGetStoredInfoTypeRequest} message GetStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetStoredInfoTypeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetStoredInfoTypeRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.GetStoredInfoTypeRequest} GetStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetStoredInfoTypeRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.GetStoredInfoTypeRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetStoredInfoTypeRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.GetStoredInfoTypeRequest} GetStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetStoredInfoTypeRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetStoredInfoTypeRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetStoredInfoTypeRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetStoredInfoTypeRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.GetStoredInfoTypeRequest} GetStoredInfoTypeRequest
                         */
                        GetStoredInfoTypeRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.GetStoredInfoTypeRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.GetStoredInfoTypeRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetStoredInfoTypeRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.GetStoredInfoTypeRequest} message GetStoredInfoTypeRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetStoredInfoTypeRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetStoredInfoTypeRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.GetStoredInfoTypeRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetStoredInfoTypeRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetStoredInfoTypeRequest;
                    })();
    
                    v2.ListStoredInfoTypesRequest = (function() {
    
                        /**
                         * Properties of a ListStoredInfoTypesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListStoredInfoTypesRequest
                         * @property {string|null} [parent] ListStoredInfoTypesRequest parent
                         * @property {string|null} [pageToken] ListStoredInfoTypesRequest pageToken
                         * @property {number|null} [pageSize] ListStoredInfoTypesRequest pageSize
                         * @property {string|null} [orderBy] ListStoredInfoTypesRequest orderBy
                         * @property {string|null} [locationId] ListStoredInfoTypesRequest locationId
                         */
    
                        /**
                         * Constructs a new ListStoredInfoTypesRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListStoredInfoTypesRequest.
                         * @implements IListStoredInfoTypesRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesRequest=} [properties] Properties to set
                         */
                        function ListStoredInfoTypesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListStoredInfoTypesRequest parent.
                         * @member {string} parent
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @instance
                         */
                        ListStoredInfoTypesRequest.prototype.parent = "";
    
                        /**
                         * ListStoredInfoTypesRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @instance
                         */
                        ListStoredInfoTypesRequest.prototype.pageToken = "";
    
                        /**
                         * ListStoredInfoTypesRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @instance
                         */
                        ListStoredInfoTypesRequest.prototype.pageSize = 0;
    
                        /**
                         * ListStoredInfoTypesRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @instance
                         */
                        ListStoredInfoTypesRequest.prototype.orderBy = "";
    
                        /**
                         * ListStoredInfoTypesRequest locationId.
                         * @member {string} locationId
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @instance
                         */
                        ListStoredInfoTypesRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new ListStoredInfoTypesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesRequest} ListStoredInfoTypesRequest instance
                         */
                        ListStoredInfoTypesRequest.create = function create(properties) {
                            return new ListStoredInfoTypesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListStoredInfoTypesRequest message. Does not implicitly {@link google.privacy.dlp.v2.ListStoredInfoTypesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesRequest} message ListStoredInfoTypesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListStoredInfoTypesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderBy);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListStoredInfoTypesRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListStoredInfoTypesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesRequest} message ListStoredInfoTypesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListStoredInfoTypesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListStoredInfoTypesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesRequest} ListStoredInfoTypesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListStoredInfoTypesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListStoredInfoTypesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                case 3:
                                    message.pageSize = reader.int32();
                                    break;
                                case 4:
                                    message.orderBy = reader.string();
                                    break;
                                case 5:
                                    message.locationId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListStoredInfoTypesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesRequest} ListStoredInfoTypesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListStoredInfoTypesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListStoredInfoTypesRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListStoredInfoTypesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListStoredInfoTypesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesRequest} ListStoredInfoTypesRequest
                         */
                        ListStoredInfoTypesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListStoredInfoTypesRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListStoredInfoTypesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListStoredInfoTypesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @static
                         * @param {google.privacy.dlp.v2.ListStoredInfoTypesRequest} message ListStoredInfoTypesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListStoredInfoTypesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.locationId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            return object;
                        };
    
                        /**
                         * Converts this ListStoredInfoTypesRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListStoredInfoTypesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListStoredInfoTypesRequest;
                    })();
    
                    v2.ListStoredInfoTypesResponse = (function() {
    
                        /**
                         * Properties of a ListStoredInfoTypesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IListStoredInfoTypesResponse
                         * @property {Array.<google.privacy.dlp.v2.IStoredInfoType>|null} [storedInfoTypes] ListStoredInfoTypesResponse storedInfoTypes
                         * @property {string|null} [nextPageToken] ListStoredInfoTypesResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListStoredInfoTypesResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a ListStoredInfoTypesResponse.
                         * @implements IListStoredInfoTypesResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesResponse=} [properties] Properties to set
                         */
                        function ListStoredInfoTypesResponse(properties) {
                            this.storedInfoTypes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListStoredInfoTypesResponse storedInfoTypes.
                         * @member {Array.<google.privacy.dlp.v2.IStoredInfoType>} storedInfoTypes
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @instance
                         */
                        ListStoredInfoTypesResponse.prototype.storedInfoTypes = $util.emptyArray;
    
                        /**
                         * ListStoredInfoTypesResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @instance
                         */
                        ListStoredInfoTypesResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListStoredInfoTypesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesResponse} ListStoredInfoTypesResponse instance
                         */
                        ListStoredInfoTypesResponse.create = function create(properties) {
                            return new ListStoredInfoTypesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListStoredInfoTypesResponse message. Does not implicitly {@link google.privacy.dlp.v2.ListStoredInfoTypesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesResponse} message ListStoredInfoTypesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListStoredInfoTypesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.storedInfoTypes != null && message.storedInfoTypes.length)
                                for (var i = 0; i < message.storedInfoTypes.length; ++i)
                                    $root.google.privacy.dlp.v2.StoredInfoType.encode(message.storedInfoTypes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListStoredInfoTypesResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.ListStoredInfoTypesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IListStoredInfoTypesResponse} message ListStoredInfoTypesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListStoredInfoTypesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListStoredInfoTypesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesResponse} ListStoredInfoTypesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListStoredInfoTypesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.ListStoredInfoTypesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.storedInfoTypes && message.storedInfoTypes.length))
                                        message.storedInfoTypes = [];
                                    message.storedInfoTypes.push($root.google.privacy.dlp.v2.StoredInfoType.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListStoredInfoTypesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesResponse} ListStoredInfoTypesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListStoredInfoTypesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListStoredInfoTypesResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListStoredInfoTypesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.storedInfoTypes != null && message.hasOwnProperty("storedInfoTypes")) {
                                if (!Array.isArray(message.storedInfoTypes))
                                    return "storedInfoTypes: array expected";
                                for (var i = 0; i < message.storedInfoTypes.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.StoredInfoType.verify(message.storedInfoTypes[i]);
                                    if (error)
                                        return "storedInfoTypes." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListStoredInfoTypesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.ListStoredInfoTypesResponse} ListStoredInfoTypesResponse
                         */
                        ListStoredInfoTypesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.ListStoredInfoTypesResponse)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.ListStoredInfoTypesResponse();
                            if (object.storedInfoTypes) {
                                if (!Array.isArray(object.storedInfoTypes))
                                    throw TypeError(".google.privacy.dlp.v2.ListStoredInfoTypesResponse.storedInfoTypes: array expected");
                                message.storedInfoTypes = [];
                                for (var i = 0; i < object.storedInfoTypes.length; ++i) {
                                    if (typeof object.storedInfoTypes[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.ListStoredInfoTypesResponse.storedInfoTypes: object expected");
                                    message.storedInfoTypes[i] = $root.google.privacy.dlp.v2.StoredInfoType.fromObject(object.storedInfoTypes[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListStoredInfoTypesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @static
                         * @param {google.privacy.dlp.v2.ListStoredInfoTypesResponse} message ListStoredInfoTypesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListStoredInfoTypesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.storedInfoTypes = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.storedInfoTypes && message.storedInfoTypes.length) {
                                object.storedInfoTypes = [];
                                for (var j = 0; j < message.storedInfoTypes.length; ++j)
                                    object.storedInfoTypes[j] = $root.google.privacy.dlp.v2.StoredInfoType.toObject(message.storedInfoTypes[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListStoredInfoTypesResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.ListStoredInfoTypesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListStoredInfoTypesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListStoredInfoTypesResponse;
                    })();
    
                    v2.DeleteStoredInfoTypeRequest = (function() {
    
                        /**
                         * Properties of a DeleteStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDeleteStoredInfoTypeRequest
                         * @property {string|null} [name] DeleteStoredInfoTypeRequest name
                         */
    
                        /**
                         * Constructs a new DeleteStoredInfoTypeRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DeleteStoredInfoTypeRequest.
                         * @implements IDeleteStoredInfoTypeRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest=} [properties] Properties to set
                         */
                        function DeleteStoredInfoTypeRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteStoredInfoTypeRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @instance
                         */
                        DeleteStoredInfoTypeRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteStoredInfoTypeRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DeleteStoredInfoTypeRequest} DeleteStoredInfoTypeRequest instance
                         */
                        DeleteStoredInfoTypeRequest.create = function create(properties) {
                            return new DeleteStoredInfoTypeRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteStoredInfoTypeRequest message. Does not implicitly {@link google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest} message DeleteStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteStoredInfoTypeRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteStoredInfoTypeRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest} message DeleteStoredInfoTypeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteStoredInfoTypeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteStoredInfoTypeRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DeleteStoredInfoTypeRequest} DeleteStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteStoredInfoTypeRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DeleteStoredInfoTypeRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteStoredInfoTypeRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DeleteStoredInfoTypeRequest} DeleteStoredInfoTypeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteStoredInfoTypeRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteStoredInfoTypeRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteStoredInfoTypeRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteStoredInfoTypeRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DeleteStoredInfoTypeRequest} DeleteStoredInfoTypeRequest
                         */
                        DeleteStoredInfoTypeRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DeleteStoredInfoTypeRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteStoredInfoTypeRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @static
                         * @param {google.privacy.dlp.v2.DeleteStoredInfoTypeRequest} message DeleteStoredInfoTypeRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteStoredInfoTypeRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteStoredInfoTypeRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteStoredInfoTypeRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteStoredInfoTypeRequest;
                    })();
    
                    v2.HybridInspectJobTriggerRequest = (function() {
    
                        /**
                         * Properties of a HybridInspectJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridInspectJobTriggerRequest
                         * @property {string|null} [name] HybridInspectJobTriggerRequest name
                         * @property {google.privacy.dlp.v2.IHybridContentItem|null} [hybridItem] HybridInspectJobTriggerRequest hybridItem
                         */
    
                        /**
                         * Constructs a new HybridInspectJobTriggerRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridInspectJobTriggerRequest.
                         * @implements IHybridInspectJobTriggerRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridInspectJobTriggerRequest=} [properties] Properties to set
                         */
                        function HybridInspectJobTriggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HybridInspectJobTriggerRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @instance
                         */
                        HybridInspectJobTriggerRequest.prototype.name = "";
    
                        /**
                         * HybridInspectJobTriggerRequest hybridItem.
                         * @member {google.privacy.dlp.v2.IHybridContentItem|null|undefined} hybridItem
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @instance
                         */
                        HybridInspectJobTriggerRequest.prototype.hybridItem = null;
    
                        /**
                         * Creates a new HybridInspectJobTriggerRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectJobTriggerRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridInspectJobTriggerRequest} HybridInspectJobTriggerRequest instance
                         */
                        HybridInspectJobTriggerRequest.create = function create(properties) {
                            return new HybridInspectJobTriggerRequest(properties);
                        };
    
                        /**
                         * Encodes the specified HybridInspectJobTriggerRequest message. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectJobTriggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectJobTriggerRequest} message HybridInspectJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectJobTriggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.hybridItem != null && Object.hasOwnProperty.call(message, "hybridItem"))
                                $root.google.privacy.dlp.v2.HybridContentItem.encode(message.hybridItem, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridInspectJobTriggerRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectJobTriggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectJobTriggerRequest} message HybridInspectJobTriggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectJobTriggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridInspectJobTriggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridInspectJobTriggerRequest} HybridInspectJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectJobTriggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridInspectJobTriggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.hybridItem = $root.google.privacy.dlp.v2.HybridContentItem.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridInspectJobTriggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridInspectJobTriggerRequest} HybridInspectJobTriggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectJobTriggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridInspectJobTriggerRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridInspectJobTriggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.hybridItem != null && message.hasOwnProperty("hybridItem")) {
                                var error = $root.google.privacy.dlp.v2.HybridContentItem.verify(message.hybridItem);
                                if (error)
                                    return "hybridItem." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a HybridInspectJobTriggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridInspectJobTriggerRequest} HybridInspectJobTriggerRequest
                         */
                        HybridInspectJobTriggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.HybridInspectJobTriggerRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.hybridItem != null) {
                                if (typeof object.hybridItem !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridInspectJobTriggerRequest.hybridItem: object expected");
                                message.hybridItem = $root.google.privacy.dlp.v2.HybridContentItem.fromObject(object.hybridItem);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HybridInspectJobTriggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @static
                         * @param {google.privacy.dlp.v2.HybridInspectJobTriggerRequest} message HybridInspectJobTriggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridInspectJobTriggerRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.hybridItem = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.hybridItem != null && message.hasOwnProperty("hybridItem"))
                                object.hybridItem = $root.google.privacy.dlp.v2.HybridContentItem.toObject(message.hybridItem, options);
                            return object;
                        };
    
                        /**
                         * Converts this HybridInspectJobTriggerRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridInspectJobTriggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridInspectJobTriggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridInspectJobTriggerRequest;
                    })();
    
                    v2.HybridInspectDlpJobRequest = (function() {
    
                        /**
                         * Properties of a HybridInspectDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridInspectDlpJobRequest
                         * @property {string|null} [name] HybridInspectDlpJobRequest name
                         * @property {google.privacy.dlp.v2.IHybridContentItem|null} [hybridItem] HybridInspectDlpJobRequest hybridItem
                         */
    
                        /**
                         * Constructs a new HybridInspectDlpJobRequest.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridInspectDlpJobRequest.
                         * @implements IHybridInspectDlpJobRequest
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridInspectDlpJobRequest=} [properties] Properties to set
                         */
                        function HybridInspectDlpJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HybridInspectDlpJobRequest name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @instance
                         */
                        HybridInspectDlpJobRequest.prototype.name = "";
    
                        /**
                         * HybridInspectDlpJobRequest hybridItem.
                         * @member {google.privacy.dlp.v2.IHybridContentItem|null|undefined} hybridItem
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @instance
                         */
                        HybridInspectDlpJobRequest.prototype.hybridItem = null;
    
                        /**
                         * Creates a new HybridInspectDlpJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectDlpJobRequest=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridInspectDlpJobRequest} HybridInspectDlpJobRequest instance
                         */
                        HybridInspectDlpJobRequest.create = function create(properties) {
                            return new HybridInspectDlpJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified HybridInspectDlpJobRequest message. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectDlpJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectDlpJobRequest} message HybridInspectDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectDlpJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.hybridItem != null && Object.hasOwnProperty.call(message, "hybridItem"))
                                $root.google.privacy.dlp.v2.HybridContentItem.encode(message.hybridItem, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridInspectDlpJobRequest message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectDlpJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectDlpJobRequest} message HybridInspectDlpJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectDlpJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridInspectDlpJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridInspectDlpJobRequest} HybridInspectDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectDlpJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridInspectDlpJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.hybridItem = $root.google.privacy.dlp.v2.HybridContentItem.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridInspectDlpJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridInspectDlpJobRequest} HybridInspectDlpJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectDlpJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridInspectDlpJobRequest message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridInspectDlpJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.hybridItem != null && message.hasOwnProperty("hybridItem")) {
                                var error = $root.google.privacy.dlp.v2.HybridContentItem.verify(message.hybridItem);
                                if (error)
                                    return "hybridItem." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a HybridInspectDlpJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridInspectDlpJobRequest} HybridInspectDlpJobRequest
                         */
                        HybridInspectDlpJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridInspectDlpJobRequest)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.HybridInspectDlpJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.hybridItem != null) {
                                if (typeof object.hybridItem !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridInspectDlpJobRequest.hybridItem: object expected");
                                message.hybridItem = $root.google.privacy.dlp.v2.HybridContentItem.fromObject(object.hybridItem);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HybridInspectDlpJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @static
                         * @param {google.privacy.dlp.v2.HybridInspectDlpJobRequest} message HybridInspectDlpJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridInspectDlpJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.hybridItem = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.hybridItem != null && message.hasOwnProperty("hybridItem"))
                                object.hybridItem = $root.google.privacy.dlp.v2.HybridContentItem.toObject(message.hybridItem, options);
                            return object;
                        };
    
                        /**
                         * Converts this HybridInspectDlpJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridInspectDlpJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridInspectDlpJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridInspectDlpJobRequest;
                    })();
    
                    v2.HybridContentItem = (function() {
    
                        /**
                         * Properties of a HybridContentItem.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridContentItem
                         * @property {google.privacy.dlp.v2.IContentItem|null} [item] HybridContentItem item
                         * @property {google.privacy.dlp.v2.IHybridFindingDetails|null} [findingDetails] HybridContentItem findingDetails
                         */
    
                        /**
                         * Constructs a new HybridContentItem.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridContentItem.
                         * @implements IHybridContentItem
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridContentItem=} [properties] Properties to set
                         */
                        function HybridContentItem(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HybridContentItem item.
                         * @member {google.privacy.dlp.v2.IContentItem|null|undefined} item
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @instance
                         */
                        HybridContentItem.prototype.item = null;
    
                        /**
                         * HybridContentItem findingDetails.
                         * @member {google.privacy.dlp.v2.IHybridFindingDetails|null|undefined} findingDetails
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @instance
                         */
                        HybridContentItem.prototype.findingDetails = null;
    
                        /**
                         * Creates a new HybridContentItem instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridContentItem=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridContentItem} HybridContentItem instance
                         */
                        HybridContentItem.create = function create(properties) {
                            return new HybridContentItem(properties);
                        };
    
                        /**
                         * Encodes the specified HybridContentItem message. Does not implicitly {@link google.privacy.dlp.v2.HybridContentItem.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridContentItem} message HybridContentItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridContentItem.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                                $root.google.privacy.dlp.v2.ContentItem.encode(message.item, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.findingDetails != null && Object.hasOwnProperty.call(message, "findingDetails"))
                                $root.google.privacy.dlp.v2.HybridFindingDetails.encode(message.findingDetails, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridContentItem message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridContentItem.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridContentItem} message HybridContentItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridContentItem.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridContentItem message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridContentItem} HybridContentItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridContentItem.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridContentItem();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.item = $root.google.privacy.dlp.v2.ContentItem.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.findingDetails = $root.google.privacy.dlp.v2.HybridFindingDetails.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridContentItem message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridContentItem} HybridContentItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridContentItem.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridContentItem message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridContentItem.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.item != null && message.hasOwnProperty("item")) {
                                var error = $root.google.privacy.dlp.v2.ContentItem.verify(message.item);
                                if (error)
                                    return "item." + error;
                            }
                            if (message.findingDetails != null && message.hasOwnProperty("findingDetails")) {
                                var error = $root.google.privacy.dlp.v2.HybridFindingDetails.verify(message.findingDetails);
                                if (error)
                                    return "findingDetails." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a HybridContentItem message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridContentItem} HybridContentItem
                         */
                        HybridContentItem.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridContentItem)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.HybridContentItem();
                            if (object.item != null) {
                                if (typeof object.item !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridContentItem.item: object expected");
                                message.item = $root.google.privacy.dlp.v2.ContentItem.fromObject(object.item);
                            }
                            if (object.findingDetails != null) {
                                if (typeof object.findingDetails !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridContentItem.findingDetails: object expected");
                                message.findingDetails = $root.google.privacy.dlp.v2.HybridFindingDetails.fromObject(object.findingDetails);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HybridContentItem message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @static
                         * @param {google.privacy.dlp.v2.HybridContentItem} message HybridContentItem
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridContentItem.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.item = null;
                                object.findingDetails = null;
                            }
                            if (message.item != null && message.hasOwnProperty("item"))
                                object.item = $root.google.privacy.dlp.v2.ContentItem.toObject(message.item, options);
                            if (message.findingDetails != null && message.hasOwnProperty("findingDetails"))
                                object.findingDetails = $root.google.privacy.dlp.v2.HybridFindingDetails.toObject(message.findingDetails, options);
                            return object;
                        };
    
                        /**
                         * Converts this HybridContentItem to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridContentItem
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridContentItem.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridContentItem;
                    })();
    
                    v2.HybridFindingDetails = (function() {
    
                        /**
                         * Properties of a HybridFindingDetails.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridFindingDetails
                         * @property {google.privacy.dlp.v2.IContainer|null} [containerDetails] HybridFindingDetails containerDetails
                         * @property {number|Long|null} [fileOffset] HybridFindingDetails fileOffset
                         * @property {number|Long|null} [rowOffset] HybridFindingDetails rowOffset
                         * @property {google.privacy.dlp.v2.ITableOptions|null} [tableOptions] HybridFindingDetails tableOptions
                         * @property {Object.<string,string>|null} [labels] HybridFindingDetails labels
                         */
    
                        /**
                         * Constructs a new HybridFindingDetails.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridFindingDetails.
                         * @implements IHybridFindingDetails
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridFindingDetails=} [properties] Properties to set
                         */
                        function HybridFindingDetails(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HybridFindingDetails containerDetails.
                         * @member {google.privacy.dlp.v2.IContainer|null|undefined} containerDetails
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @instance
                         */
                        HybridFindingDetails.prototype.containerDetails = null;
    
                        /**
                         * HybridFindingDetails fileOffset.
                         * @member {number|Long} fileOffset
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @instance
                         */
                        HybridFindingDetails.prototype.fileOffset = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HybridFindingDetails rowOffset.
                         * @member {number|Long} rowOffset
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @instance
                         */
                        HybridFindingDetails.prototype.rowOffset = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HybridFindingDetails tableOptions.
                         * @member {google.privacy.dlp.v2.ITableOptions|null|undefined} tableOptions
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @instance
                         */
                        HybridFindingDetails.prototype.tableOptions = null;
    
                        /**
                         * HybridFindingDetails labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @instance
                         */
                        HybridFindingDetails.prototype.labels = $util.emptyObject;
    
                        /**
                         * Creates a new HybridFindingDetails instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridFindingDetails=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridFindingDetails} HybridFindingDetails instance
                         */
                        HybridFindingDetails.create = function create(properties) {
                            return new HybridFindingDetails(properties);
                        };
    
                        /**
                         * Encodes the specified HybridFindingDetails message. Does not implicitly {@link google.privacy.dlp.v2.HybridFindingDetails.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridFindingDetails} message HybridFindingDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridFindingDetails.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.containerDetails != null && Object.hasOwnProperty.call(message, "containerDetails"))
                                $root.google.privacy.dlp.v2.Container.encode(message.containerDetails, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.fileOffset != null && Object.hasOwnProperty.call(message, "fileOffset"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.fileOffset);
                            if (message.rowOffset != null && Object.hasOwnProperty.call(message, "rowOffset"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.rowOffset);
                            if (message.tableOptions != null && Object.hasOwnProperty.call(message, "tableOptions"))
                                $root.google.privacy.dlp.v2.TableOptions.encode(message.tableOptions, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridFindingDetails message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridFindingDetails.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridFindingDetails} message HybridFindingDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridFindingDetails.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridFindingDetails message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridFindingDetails} HybridFindingDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridFindingDetails.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridFindingDetails(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.containerDetails = $root.google.privacy.dlp.v2.Container.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.fileOffset = reader.int64();
                                    break;
                                case 3:
                                    message.rowOffset = reader.int64();
                                    break;
                                case 4:
                                    message.tableOptions = $root.google.privacy.dlp.v2.TableOptions.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (message.labels === $util.emptyObject)
                                        message.labels = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.labels[key] = value;
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridFindingDetails message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridFindingDetails} HybridFindingDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridFindingDetails.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridFindingDetails message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridFindingDetails.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.containerDetails != null && message.hasOwnProperty("containerDetails")) {
                                var error = $root.google.privacy.dlp.v2.Container.verify(message.containerDetails);
                                if (error)
                                    return "containerDetails." + error;
                            }
                            if (message.fileOffset != null && message.hasOwnProperty("fileOffset"))
                                if (!$util.isInteger(message.fileOffset) && !(message.fileOffset && $util.isInteger(message.fileOffset.low) && $util.isInteger(message.fileOffset.high)))
                                    return "fileOffset: integer|Long expected";
                            if (message.rowOffset != null && message.hasOwnProperty("rowOffset"))
                                if (!$util.isInteger(message.rowOffset) && !(message.rowOffset && $util.isInteger(message.rowOffset.low) && $util.isInteger(message.rowOffset.high)))
                                    return "rowOffset: integer|Long expected";
                            if (message.tableOptions != null && message.hasOwnProperty("tableOptions")) {
                                var error = $root.google.privacy.dlp.v2.TableOptions.verify(message.tableOptions);
                                if (error)
                                    return "tableOptions." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a HybridFindingDetails message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridFindingDetails} HybridFindingDetails
                         */
                        HybridFindingDetails.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridFindingDetails)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.HybridFindingDetails();
                            if (object.containerDetails != null) {
                                if (typeof object.containerDetails !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridFindingDetails.containerDetails: object expected");
                                message.containerDetails = $root.google.privacy.dlp.v2.Container.fromObject(object.containerDetails);
                            }
                            if (object.fileOffset != null)
                                if ($util.Long)
                                    (message.fileOffset = $util.Long.fromValue(object.fileOffset)).unsigned = false;
                                else if (typeof object.fileOffset === "string")
                                    message.fileOffset = parseInt(object.fileOffset, 10);
                                else if (typeof object.fileOffset === "number")
                                    message.fileOffset = object.fileOffset;
                                else if (typeof object.fileOffset === "object")
                                    message.fileOffset = new $util.LongBits(object.fileOffset.low >>> 0, object.fileOffset.high >>> 0).toNumber();
                            if (object.rowOffset != null)
                                if ($util.Long)
                                    (message.rowOffset = $util.Long.fromValue(object.rowOffset)).unsigned = false;
                                else if (typeof object.rowOffset === "string")
                                    message.rowOffset = parseInt(object.rowOffset, 10);
                                else if (typeof object.rowOffset === "number")
                                    message.rowOffset = object.rowOffset;
                                else if (typeof object.rowOffset === "object")
                                    message.rowOffset = new $util.LongBits(object.rowOffset.low >>> 0, object.rowOffset.high >>> 0).toNumber();
                            if (object.tableOptions != null) {
                                if (typeof object.tableOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridFindingDetails.tableOptions: object expected");
                                message.tableOptions = $root.google.privacy.dlp.v2.TableOptions.fromObject(object.tableOptions);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridFindingDetails.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HybridFindingDetails message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @static
                         * @param {google.privacy.dlp.v2.HybridFindingDetails} message HybridFindingDetails
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridFindingDetails.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.containerDetails = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.fileOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.fileOffset = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.rowOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.rowOffset = options.longs === String ? "0" : 0;
                                object.tableOptions = null;
                            }
                            if (message.containerDetails != null && message.hasOwnProperty("containerDetails"))
                                object.containerDetails = $root.google.privacy.dlp.v2.Container.toObject(message.containerDetails, options);
                            if (message.fileOffset != null && message.hasOwnProperty("fileOffset"))
                                if (typeof message.fileOffset === "number")
                                    object.fileOffset = options.longs === String ? String(message.fileOffset) : message.fileOffset;
                                else
                                    object.fileOffset = options.longs === String ? $util.Long.prototype.toString.call(message.fileOffset) : options.longs === Number ? new $util.LongBits(message.fileOffset.low >>> 0, message.fileOffset.high >>> 0).toNumber() : message.fileOffset;
                            if (message.rowOffset != null && message.hasOwnProperty("rowOffset"))
                                if (typeof message.rowOffset === "number")
                                    object.rowOffset = options.longs === String ? String(message.rowOffset) : message.rowOffset;
                                else
                                    object.rowOffset = options.longs === String ? $util.Long.prototype.toString.call(message.rowOffset) : options.longs === Number ? new $util.LongBits(message.rowOffset.low >>> 0, message.rowOffset.high >>> 0).toNumber() : message.rowOffset;
                            if (message.tableOptions != null && message.hasOwnProperty("tableOptions"))
                                object.tableOptions = $root.google.privacy.dlp.v2.TableOptions.toObject(message.tableOptions, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this HybridFindingDetails to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridFindingDetails
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridFindingDetails.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridFindingDetails;
                    })();
    
                    v2.HybridInspectResponse = (function() {
    
                        /**
                         * Properties of a HybridInspectResponse.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridInspectResponse
                         */
    
                        /**
                         * Constructs a new HybridInspectResponse.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridInspectResponse.
                         * @implements IHybridInspectResponse
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridInspectResponse=} [properties] Properties to set
                         */
                        function HybridInspectResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new HybridInspectResponse instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectResponse=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridInspectResponse} HybridInspectResponse instance
                         */
                        HybridInspectResponse.create = function create(properties) {
                            return new HybridInspectResponse(properties);
                        };
    
                        /**
                         * Encodes the specified HybridInspectResponse message. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectResponse} message HybridInspectResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridInspectResponse message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridInspectResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridInspectResponse} message HybridInspectResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridInspectResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridInspectResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridInspectResponse} HybridInspectResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridInspectResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridInspectResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridInspectResponse} HybridInspectResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridInspectResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridInspectResponse message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridInspectResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a HybridInspectResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridInspectResponse} HybridInspectResponse
                         */
                        HybridInspectResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridInspectResponse)
                                return object;
                            return new $root.google.privacy.dlp.v2.HybridInspectResponse();
                        };
    
                        /**
                         * Creates a plain object from a HybridInspectResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @static
                         * @param {google.privacy.dlp.v2.HybridInspectResponse} message HybridInspectResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridInspectResponse.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this HybridInspectResponse to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridInspectResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridInspectResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridInspectResponse;
                    })();
    
                    /**
                     * RelationalOperator enum.
                     * @name google.privacy.dlp.v2.RelationalOperator
                     * @enum {number}
                     * @property {number} RELATIONAL_OPERATOR_UNSPECIFIED=0 RELATIONAL_OPERATOR_UNSPECIFIED value
                     * @property {number} EQUAL_TO=1 EQUAL_TO value
                     * @property {number} NOT_EQUAL_TO=2 NOT_EQUAL_TO value
                     * @property {number} GREATER_THAN=3 GREATER_THAN value
                     * @property {number} LESS_THAN=4 LESS_THAN value
                     * @property {number} GREATER_THAN_OR_EQUALS=5 GREATER_THAN_OR_EQUALS value
                     * @property {number} LESS_THAN_OR_EQUALS=6 LESS_THAN_OR_EQUALS value
                     * @property {number} EXISTS=7 EXISTS value
                     */
                    v2.RelationalOperator = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "RELATIONAL_OPERATOR_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "EQUAL_TO"] = 1;
                        values[valuesById[2] = "NOT_EQUAL_TO"] = 2;
                        values[valuesById[3] = "GREATER_THAN"] = 3;
                        values[valuesById[4] = "LESS_THAN"] = 4;
                        values[valuesById[5] = "GREATER_THAN_OR_EQUALS"] = 5;
                        values[valuesById[6] = "LESS_THAN_OR_EQUALS"] = 6;
                        values[valuesById[7] = "EXISTS"] = 7;
                        return values;
                    })();
    
                    /**
                     * MatchingType enum.
                     * @name google.privacy.dlp.v2.MatchingType
                     * @enum {number}
                     * @property {number} MATCHING_TYPE_UNSPECIFIED=0 MATCHING_TYPE_UNSPECIFIED value
                     * @property {number} MATCHING_TYPE_FULL_MATCH=1 MATCHING_TYPE_FULL_MATCH value
                     * @property {number} MATCHING_TYPE_PARTIAL_MATCH=2 MATCHING_TYPE_PARTIAL_MATCH value
                     * @property {number} MATCHING_TYPE_INVERSE_MATCH=3 MATCHING_TYPE_INVERSE_MATCH value
                     */
                    v2.MatchingType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "MATCHING_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "MATCHING_TYPE_FULL_MATCH"] = 1;
                        values[valuesById[2] = "MATCHING_TYPE_PARTIAL_MATCH"] = 2;
                        values[valuesById[3] = "MATCHING_TYPE_INVERSE_MATCH"] = 3;
                        return values;
                    })();
    
                    /**
                     * ContentOption enum.
                     * @name google.privacy.dlp.v2.ContentOption
                     * @enum {number}
                     * @property {number} CONTENT_UNSPECIFIED=0 CONTENT_UNSPECIFIED value
                     * @property {number} CONTENT_TEXT=1 CONTENT_TEXT value
                     * @property {number} CONTENT_IMAGE=2 CONTENT_IMAGE value
                     */
                    v2.ContentOption = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CONTENT_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "CONTENT_TEXT"] = 1;
                        values[valuesById[2] = "CONTENT_IMAGE"] = 2;
                        return values;
                    })();
    
                    /**
                     * MetadataType enum.
                     * @name google.privacy.dlp.v2.MetadataType
                     * @enum {number}
                     * @property {number} METADATATYPE_UNSPECIFIED=0 METADATATYPE_UNSPECIFIED value
                     * @property {number} STORAGE_METADATA=2 STORAGE_METADATA value
                     */
                    v2.MetadataType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "METADATATYPE_UNSPECIFIED"] = 0;
                        values[valuesById[2] = "STORAGE_METADATA"] = 2;
                        return values;
                    })();
    
                    /**
                     * InfoTypeSupportedBy enum.
                     * @name google.privacy.dlp.v2.InfoTypeSupportedBy
                     * @enum {number}
                     * @property {number} ENUM_TYPE_UNSPECIFIED=0 ENUM_TYPE_UNSPECIFIED value
                     * @property {number} INSPECT=1 INSPECT value
                     * @property {number} RISK_ANALYSIS=2 RISK_ANALYSIS value
                     */
                    v2.InfoTypeSupportedBy = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ENUM_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "INSPECT"] = 1;
                        values[valuesById[2] = "RISK_ANALYSIS"] = 2;
                        return values;
                    })();
    
                    /**
                     * DlpJobType enum.
                     * @name google.privacy.dlp.v2.DlpJobType
                     * @enum {number}
                     * @property {number} DLP_JOB_TYPE_UNSPECIFIED=0 DLP_JOB_TYPE_UNSPECIFIED value
                     * @property {number} INSPECT_JOB=1 INSPECT_JOB value
                     * @property {number} RISK_ANALYSIS_JOB=2 RISK_ANALYSIS_JOB value
                     */
                    v2.DlpJobType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DLP_JOB_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "INSPECT_JOB"] = 1;
                        values[valuesById[2] = "RISK_ANALYSIS_JOB"] = 2;
                        return values;
                    })();
    
                    /**
                     * StoredInfoTypeState enum.
                     * @name google.privacy.dlp.v2.StoredInfoTypeState
                     * @enum {number}
                     * @property {number} STORED_INFO_TYPE_STATE_UNSPECIFIED=0 STORED_INFO_TYPE_STATE_UNSPECIFIED value
                     * @property {number} PENDING=1 PENDING value
                     * @property {number} READY=2 READY value
                     * @property {number} FAILED=3 FAILED value
                     * @property {number} INVALID=4 INVALID value
                     */
                    v2.StoredInfoTypeState = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STORED_INFO_TYPE_STATE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PENDING"] = 1;
                        values[valuesById[2] = "READY"] = 2;
                        values[valuesById[3] = "FAILED"] = 3;
                        values[valuesById[4] = "INVALID"] = 4;
                        return values;
                    })();
    
                    v2.InfoType = (function() {
    
                        /**
                         * Properties of an InfoType.
                         * @memberof google.privacy.dlp.v2
                         * @interface IInfoType
                         * @property {string|null} [name] InfoType name
                         */
    
                        /**
                         * Constructs a new InfoType.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an InfoType.
                         * @implements IInfoType
                         * @constructor
                         * @param {google.privacy.dlp.v2.IInfoType=} [properties] Properties to set
                         */
                        function InfoType(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * InfoType name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @instance
                         */
                        InfoType.prototype.name = "";
    
                        /**
                         * Creates a new InfoType instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoType=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.InfoType} InfoType instance
                         */
                        InfoType.create = function create(properties) {
                            return new InfoType(properties);
                        };
    
                        /**
                         * Encodes the specified InfoType message. Does not implicitly {@link google.privacy.dlp.v2.InfoType.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoType} message InfoType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoType.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified InfoType message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.InfoType.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {google.privacy.dlp.v2.IInfoType} message InfoType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InfoType.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an InfoType message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.InfoType} InfoType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoType.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.InfoType();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an InfoType message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.InfoType} InfoType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InfoType.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an InfoType message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InfoType.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an InfoType message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.InfoType} InfoType
                         */
                        InfoType.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.InfoType)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.InfoType();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an InfoType message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @static
                         * @param {google.privacy.dlp.v2.InfoType} message InfoType
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InfoType.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this InfoType to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.InfoType
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InfoType.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return InfoType;
                    })();
    
                    v2.StoredType = (function() {
    
                        /**
                         * Properties of a StoredType.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStoredType
                         * @property {string|null} [name] StoredType name
                         * @property {google.protobuf.ITimestamp|null} [createTime] StoredType createTime
                         */
    
                        /**
                         * Constructs a new StoredType.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StoredType.
                         * @implements IStoredType
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStoredType=} [properties] Properties to set
                         */
                        function StoredType(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StoredType name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @instance
                         */
                        StoredType.prototype.name = "";
    
                        /**
                         * StoredType createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @instance
                         */
                        StoredType.prototype.createTime = null;
    
                        /**
                         * Creates a new StoredType instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredType=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StoredType} StoredType instance
                         */
                        StoredType.create = function create(properties) {
                            return new StoredType(properties);
                        };
    
                        /**
                         * Encodes the specified StoredType message. Does not implicitly {@link google.privacy.dlp.v2.StoredType.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredType} message StoredType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredType.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StoredType message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StoredType.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {google.privacy.dlp.v2.IStoredType} message StoredType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StoredType.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StoredType message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StoredType} StoredType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredType.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StoredType();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StoredType message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StoredType} StoredType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StoredType.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StoredType message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StoredType.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StoredType message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StoredType} StoredType
                         */
                        StoredType.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StoredType)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StoredType();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StoredType.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StoredType message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @static
                         * @param {google.privacy.dlp.v2.StoredType} message StoredType
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StoredType.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.createTime = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this StoredType to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StoredType
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StoredType.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return StoredType;
                    })();
    
                    /**
                     * Likelihood enum.
                     * @name google.privacy.dlp.v2.Likelihood
                     * @enum {number}
                     * @property {number} LIKELIHOOD_UNSPECIFIED=0 LIKELIHOOD_UNSPECIFIED value
                     * @property {number} VERY_UNLIKELY=1 VERY_UNLIKELY value
                     * @property {number} UNLIKELY=2 UNLIKELY value
                     * @property {number} POSSIBLE=3 POSSIBLE value
                     * @property {number} LIKELY=4 LIKELY value
                     * @property {number} VERY_LIKELY=5 VERY_LIKELY value
                     */
                    v2.Likelihood = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LIKELIHOOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "VERY_UNLIKELY"] = 1;
                        values[valuesById[2] = "UNLIKELY"] = 2;
                        values[valuesById[3] = "POSSIBLE"] = 3;
                        values[valuesById[4] = "LIKELY"] = 4;
                        values[valuesById[5] = "VERY_LIKELY"] = 5;
                        return values;
                    })();
    
                    v2.CustomInfoType = (function() {
    
                        /**
                         * Properties of a CustomInfoType.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICustomInfoType
                         * @property {google.privacy.dlp.v2.IInfoType|null} [infoType] CustomInfoType infoType
                         * @property {google.privacy.dlp.v2.Likelihood|null} [likelihood] CustomInfoType likelihood
                         * @property {google.privacy.dlp.v2.CustomInfoType.IDictionary|null} [dictionary] CustomInfoType dictionary
                         * @property {google.privacy.dlp.v2.CustomInfoType.IRegex|null} [regex] CustomInfoType regex
                         * @property {google.privacy.dlp.v2.CustomInfoType.ISurrogateType|null} [surrogateType] CustomInfoType surrogateType
                         * @property {google.privacy.dlp.v2.IStoredType|null} [storedType] CustomInfoType storedType
                         * @property {Array.<google.privacy.dlp.v2.CustomInfoType.IDetectionRule>|null} [detectionRules] CustomInfoType detectionRules
                         * @property {google.privacy.dlp.v2.CustomInfoType.ExclusionType|null} [exclusionType] CustomInfoType exclusionType
                         */
    
                        /**
                         * Constructs a new CustomInfoType.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CustomInfoType.
                         * @implements ICustomInfoType
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICustomInfoType=} [properties] Properties to set
                         */
                        function CustomInfoType(properties) {
                            this.detectionRules = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CustomInfoType infoType.
                         * @member {google.privacy.dlp.v2.IInfoType|null|undefined} infoType
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.infoType = null;
    
                        /**
                         * CustomInfoType likelihood.
                         * @member {google.privacy.dlp.v2.Likelihood} likelihood
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.likelihood = 0;
    
                        /**
                         * CustomInfoType dictionary.
                         * @member {google.privacy.dlp.v2.CustomInfoType.IDictionary|null|undefined} dictionary
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.dictionary = null;
    
                        /**
                         * CustomInfoType regex.
                         * @member {google.privacy.dlp.v2.CustomInfoType.IRegex|null|undefined} regex
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.regex = null;
    
                        /**
                         * CustomInfoType surrogateType.
                         * @member {google.privacy.dlp.v2.CustomInfoType.ISurrogateType|null|undefined} surrogateType
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.surrogateType = null;
    
                        /**
                         * CustomInfoType storedType.
                         * @member {google.privacy.dlp.v2.IStoredType|null|undefined} storedType
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.storedType = null;
    
                        /**
                         * CustomInfoType detectionRules.
                         * @member {Array.<google.privacy.dlp.v2.CustomInfoType.IDetectionRule>} detectionRules
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.detectionRules = $util.emptyArray;
    
                        /**
                         * CustomInfoType exclusionType.
                         * @member {google.privacy.dlp.v2.CustomInfoType.ExclusionType} exclusionType
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        CustomInfoType.prototype.exclusionType = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * CustomInfoType type.
                         * @member {"dictionary"|"regex"|"surrogateType"|"storedType"|undefined} type
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         */
                        Object.defineProperty(CustomInfoType.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["dictionary", "regex", "surrogateType", "storedType"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new CustomInfoType instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.ICustomInfoType=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CustomInfoType} CustomInfoType instance
                         */
                        CustomInfoType.create = function create(properties) {
                            return new CustomInfoType(properties);
                        };
    
                        /**
                         * Encodes the specified CustomInfoType message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.ICustomInfoType} message CustomInfoType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CustomInfoType.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.infoType != null && Object.hasOwnProperty.call(message, "infoType"))
                                $root.google.privacy.dlp.v2.InfoType.encode(message.infoType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.dictionary != null && Object.hasOwnProperty.call(message, "dictionary"))
                                $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.encode(message.dictionary, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.regex != null && Object.hasOwnProperty.call(message, "regex"))
                                $root.google.privacy.dlp.v2.CustomInfoType.Regex.encode(message.regex, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.surrogateType != null && Object.hasOwnProperty.call(message, "surrogateType"))
                                $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType.encode(message.surrogateType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.storedType != null && Object.hasOwnProperty.call(message, "storedType"))
                                $root.google.privacy.dlp.v2.StoredType.encode(message.storedType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.likelihood != null && Object.hasOwnProperty.call(message, "likelihood"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.likelihood);
                            if (message.detectionRules != null && message.detectionRules.length)
                                for (var i = 0; i < message.detectionRules.length; ++i)
                                    $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.encode(message.detectionRules[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.exclusionType != null && Object.hasOwnProperty.call(message, "exclusionType"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.exclusionType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CustomInfoType message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.ICustomInfoType} message CustomInfoType message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CustomInfoType.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CustomInfoType message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CustomInfoType} CustomInfoType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CustomInfoType.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.infoType = $root.google.privacy.dlp.v2.InfoType.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.likelihood = reader.int32();
                                    break;
                                case 2:
                                    message.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.surrogateType = $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.storedType = $root.google.privacy.dlp.v2.StoredType.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    if (!(message.detectionRules && message.detectionRules.length))
                                        message.detectionRules = [];
                                    message.detectionRules.push($root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.decode(reader, reader.uint32()));
                                    break;
                                case 8:
                                    message.exclusionType = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CustomInfoType message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CustomInfoType} CustomInfoType
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CustomInfoType.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CustomInfoType message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CustomInfoType.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.infoType != null && message.hasOwnProperty("infoType")) {
                                var error = $root.google.privacy.dlp.v2.InfoType.verify(message.infoType);
                                if (error)
                                    return "infoType." + error;
                            }
                            if (message.likelihood != null && message.hasOwnProperty("likelihood"))
                                switch (message.likelihood) {
                                default:
                                    return "likelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            if (message.dictionary != null && message.hasOwnProperty("dictionary")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.verify(message.dictionary);
                                    if (error)
                                        return "dictionary." + error;
                                }
                            }
                            if (message.regex != null && message.hasOwnProperty("regex")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.Regex.verify(message.regex);
                                    if (error)
                                        return "regex." + error;
                                }
                            }
                            if (message.surrogateType != null && message.hasOwnProperty("surrogateType")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType.verify(message.surrogateType);
                                    if (error)
                                        return "surrogateType." + error;
                                }
                            }
                            if (message.storedType != null && message.hasOwnProperty("storedType")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.StoredType.verify(message.storedType);
                                    if (error)
                                        return "storedType." + error;
                                }
                            }
                            if (message.detectionRules != null && message.hasOwnProperty("detectionRules")) {
                                if (!Array.isArray(message.detectionRules))
                                    return "detectionRules: array expected";
                                for (var i = 0; i < message.detectionRules.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.verify(message.detectionRules[i]);
                                    if (error)
                                        return "detectionRules." + error;
                                }
                            }
                            if (message.exclusionType != null && message.hasOwnProperty("exclusionType"))
                                switch (message.exclusionType) {
                                default:
                                    return "exclusionType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a CustomInfoType message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CustomInfoType} CustomInfoType
                         */
                        CustomInfoType.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CustomInfoType();
                            if (object.infoType != null) {
                                if (typeof object.infoType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CustomInfoType.infoType: object expected");
                                message.infoType = $root.google.privacy.dlp.v2.InfoType.fromObject(object.infoType);
                            }
                            switch (object.likelihood) {
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.likelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.likelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.likelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.likelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.likelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.likelihood = 5;
                                break;
                            }
                            if (object.dictionary != null) {
                                if (typeof object.dictionary !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CustomInfoType.dictionary: object expected");
                                message.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.fromObject(object.dictionary);
                            }
                            if (object.regex != null) {
                                if (typeof object.regex !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CustomInfoType.regex: object expected");
                                message.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.fromObject(object.regex);
                            }
                            if (object.surrogateType != null) {
                                if (typeof object.surrogateType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CustomInfoType.surrogateType: object expected");
                                message.surrogateType = $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType.fromObject(object.surrogateType);
                            }
                            if (object.storedType != null) {
                                if (typeof object.storedType !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CustomInfoType.storedType: object expected");
                                message.storedType = $root.google.privacy.dlp.v2.StoredType.fromObject(object.storedType);
                            }
                            if (object.detectionRules) {
                                if (!Array.isArray(object.detectionRules))
                                    throw TypeError(".google.privacy.dlp.v2.CustomInfoType.detectionRules: array expected");
                                message.detectionRules = [];
                                for (var i = 0; i < object.detectionRules.length; ++i) {
                                    if (typeof object.detectionRules[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.CustomInfoType.detectionRules: object expected");
                                    message.detectionRules[i] = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.fromObject(object.detectionRules[i]);
                                }
                            }
                            switch (object.exclusionType) {
                            case "EXCLUSION_TYPE_UNSPECIFIED":
                            case 0:
                                message.exclusionType = 0;
                                break;
                            case "EXCLUSION_TYPE_EXCLUDE":
                            case 1:
                                message.exclusionType = 1;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CustomInfoType message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @static
                         * @param {google.privacy.dlp.v2.CustomInfoType} message CustomInfoType
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CustomInfoType.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.detectionRules = [];
                            if (options.defaults) {
                                object.infoType = null;
                                object.likelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                                object.exclusionType = options.enums === String ? "EXCLUSION_TYPE_UNSPECIFIED" : 0;
                            }
                            if (message.infoType != null && message.hasOwnProperty("infoType"))
                                object.infoType = $root.google.privacy.dlp.v2.InfoType.toObject(message.infoType, options);
                            if (message.dictionary != null && message.hasOwnProperty("dictionary")) {
                                object.dictionary = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.toObject(message.dictionary, options);
                                if (options.oneofs)
                                    object.type = "dictionary";
                            }
                            if (message.regex != null && message.hasOwnProperty("regex")) {
                                object.regex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.toObject(message.regex, options);
                                if (options.oneofs)
                                    object.type = "regex";
                            }
                            if (message.surrogateType != null && message.hasOwnProperty("surrogateType")) {
                                object.surrogateType = $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType.toObject(message.surrogateType, options);
                                if (options.oneofs)
                                    object.type = "surrogateType";
                            }
                            if (message.storedType != null && message.hasOwnProperty("storedType")) {
                                object.storedType = $root.google.privacy.dlp.v2.StoredType.toObject(message.storedType, options);
                                if (options.oneofs)
                                    object.type = "storedType";
                            }
                            if (message.likelihood != null && message.hasOwnProperty("likelihood"))
                                object.likelihood = options.enums === String ? $root.google.privacy.dlp.v2.Likelihood[message.likelihood] : message.likelihood;
                            if (message.detectionRules && message.detectionRules.length) {
                                object.detectionRules = [];
                                for (var j = 0; j < message.detectionRules.length; ++j)
                                    object.detectionRules[j] = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.toObject(message.detectionRules[j], options);
                            }
                            if (message.exclusionType != null && message.hasOwnProperty("exclusionType"))
                                object.exclusionType = options.enums === String ? $root.google.privacy.dlp.v2.CustomInfoType.ExclusionType[message.exclusionType] : message.exclusionType;
                            return object;
                        };
    
                        /**
                         * Converts this CustomInfoType to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CustomInfoType
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CustomInfoType.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        CustomInfoType.Dictionary = (function() {
    
                            /**
                             * Properties of a Dictionary.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @interface IDictionary
                             * @property {google.privacy.dlp.v2.CustomInfoType.Dictionary.IWordList|null} [wordList] Dictionary wordList
                             * @property {google.privacy.dlp.v2.ICloudStoragePath|null} [cloudStoragePath] Dictionary cloudStoragePath
                             */
    
                            /**
                             * Constructs a new Dictionary.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @classdesc Represents a Dictionary.
                             * @implements IDictionary
                             * @constructor
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDictionary=} [properties] Properties to set
                             */
                            function Dictionary(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Dictionary wordList.
                             * @member {google.privacy.dlp.v2.CustomInfoType.Dictionary.IWordList|null|undefined} wordList
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @instance
                             */
                            Dictionary.prototype.wordList = null;
    
                            /**
                             * Dictionary cloudStoragePath.
                             * @member {google.privacy.dlp.v2.ICloudStoragePath|null|undefined} cloudStoragePath
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @instance
                             */
                            Dictionary.prototype.cloudStoragePath = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Dictionary source.
                             * @member {"wordList"|"cloudStoragePath"|undefined} source
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @instance
                             */
                            Object.defineProperty(Dictionary.prototype, "source", {
                                get: $util.oneOfGetter($oneOfFields = ["wordList", "cloudStoragePath"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Dictionary instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDictionary=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary} Dictionary instance
                             */
                            Dictionary.create = function create(properties) {
                                return new Dictionary(properties);
                            };
    
                            /**
                             * Encodes the specified Dictionary message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.Dictionary.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDictionary} message Dictionary message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Dictionary.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.wordList != null && Object.hasOwnProperty.call(message, "wordList"))
                                    $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.encode(message.wordList, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.cloudStoragePath != null && Object.hasOwnProperty.call(message, "cloudStoragePath"))
                                    $root.google.privacy.dlp.v2.CloudStoragePath.encode(message.cloudStoragePath, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Dictionary message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.Dictionary.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDictionary} message Dictionary message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Dictionary.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Dictionary message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary} Dictionary
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Dictionary.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.Dictionary();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.wordList = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.cloudStoragePath = $root.google.privacy.dlp.v2.CloudStoragePath.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Dictionary message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary} Dictionary
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Dictionary.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Dictionary message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Dictionary.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.wordList != null && message.hasOwnProperty("wordList")) {
                                    properties.source = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.verify(message.wordList);
                                        if (error)
                                            return "wordList." + error;
                                    }
                                }
                                if (message.cloudStoragePath != null && message.hasOwnProperty("cloudStoragePath")) {
                                    if (properties.source === 1)
                                        return "source: multiple values";
                                    properties.source = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.CloudStoragePath.verify(message.cloudStoragePath);
                                        if (error)
                                            return "cloudStoragePath." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Dictionary message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary} Dictionary
                             */
                            Dictionary.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.Dictionary)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.CustomInfoType.Dictionary();
                                if (object.wordList != null) {
                                    if (typeof object.wordList !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.CustomInfoType.Dictionary.wordList: object expected");
                                    message.wordList = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.fromObject(object.wordList);
                                }
                                if (object.cloudStoragePath != null) {
                                    if (typeof object.cloudStoragePath !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.CustomInfoType.Dictionary.cloudStoragePath: object expected");
                                    message.cloudStoragePath = $root.google.privacy.dlp.v2.CloudStoragePath.fromObject(object.cloudStoragePath);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Dictionary message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.Dictionary} message Dictionary
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Dictionary.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.wordList != null && message.hasOwnProperty("wordList")) {
                                    object.wordList = $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.toObject(message.wordList, options);
                                    if (options.oneofs)
                                        object.source = "wordList";
                                }
                                if (message.cloudStoragePath != null && message.hasOwnProperty("cloudStoragePath")) {
                                    object.cloudStoragePath = $root.google.privacy.dlp.v2.CloudStoragePath.toObject(message.cloudStoragePath, options);
                                    if (options.oneofs)
                                        object.source = "cloudStoragePath";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Dictionary to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Dictionary.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            Dictionary.WordList = (function() {
    
                                /**
                                 * Properties of a WordList.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                                 * @interface IWordList
                                 * @property {Array.<string>|null} [words] WordList words
                                 */
    
                                /**
                                 * Constructs a new WordList.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary
                                 * @classdesc Represents a WordList.
                                 * @implements IWordList
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.CustomInfoType.Dictionary.IWordList=} [properties] Properties to set
                                 */
                                function WordList(properties) {
                                    this.words = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * WordList words.
                                 * @member {Array.<string>} words
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @instance
                                 */
                                WordList.prototype.words = $util.emptyArray;
    
                                /**
                                 * Creates a new WordList instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.Dictionary.IWordList=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList} WordList instance
                                 */
                                WordList.create = function create(properties) {
                                    return new WordList(properties);
                                };
    
                                /**
                                 * Encodes the specified WordList message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.Dictionary.IWordList} message WordList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                WordList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.words != null && message.words.length)
                                        for (var i = 0; i < message.words.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.words[i]);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified WordList message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.Dictionary.IWordList} message WordList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                WordList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a WordList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList} WordList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                WordList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.words && message.words.length))
                                                message.words = [];
                                            message.words.push(reader.string());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a WordList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList} WordList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                WordList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a WordList message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                WordList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.words != null && message.hasOwnProperty("words")) {
                                        if (!Array.isArray(message.words))
                                            return "words: array expected";
                                        for (var i = 0; i < message.words.length; ++i)
                                            if (!$util.isString(message.words[i]))
                                                return "words: string[] expected";
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a WordList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList} WordList
                                 */
                                WordList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList();
                                    if (object.words) {
                                        if (!Array.isArray(object.words))
                                            throw TypeError(".google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.words: array expected");
                                        message.words = [];
                                        for (var i = 0; i < object.words.length; ++i)
                                            message.words[i] = String(object.words[i]);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a WordList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList} message WordList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                WordList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.words = [];
                                    if (message.words && message.words.length) {
                                        object.words = [];
                                        for (var j = 0; j < message.words.length; ++j)
                                            object.words[j] = message.words[j];
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this WordList to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                WordList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return WordList;
                            })();
    
                            return Dictionary;
                        })();
    
                        CustomInfoType.Regex = (function() {
    
                            /**
                             * Properties of a Regex.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @interface IRegex
                             * @property {string|null} [pattern] Regex pattern
                             * @property {Array.<number>|null} [groupIndexes] Regex groupIndexes
                             */
    
                            /**
                             * Constructs a new Regex.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @classdesc Represents a Regex.
                             * @implements IRegex
                             * @constructor
                             * @param {google.privacy.dlp.v2.CustomInfoType.IRegex=} [properties] Properties to set
                             */
                            function Regex(properties) {
                                this.groupIndexes = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Regex pattern.
                             * @member {string} pattern
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @instance
                             */
                            Regex.prototype.pattern = "";
    
                            /**
                             * Regex groupIndexes.
                             * @member {Array.<number>} groupIndexes
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @instance
                             */
                            Regex.prototype.groupIndexes = $util.emptyArray;
    
                            /**
                             * Creates a new Regex instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IRegex=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Regex} Regex instance
                             */
                            Regex.create = function create(properties) {
                                return new Regex(properties);
                            };
    
                            /**
                             * Encodes the specified Regex message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.Regex.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IRegex} message Regex message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Regex.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.pattern != null && Object.hasOwnProperty.call(message, "pattern"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pattern);
                                if (message.groupIndexes != null && message.groupIndexes.length) {
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                    for (var i = 0; i < message.groupIndexes.length; ++i)
                                        writer.int32(message.groupIndexes[i]);
                                    writer.ldelim();
                                }
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Regex message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.Regex.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IRegex} message Regex message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Regex.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Regex message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Regex} Regex
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Regex.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.Regex();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.pattern = reader.string();
                                        break;
                                    case 2:
                                        if (!(message.groupIndexes && message.groupIndexes.length))
                                            message.groupIndexes = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.groupIndexes.push(reader.int32());
                                        } else
                                            message.groupIndexes.push(reader.int32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Regex message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Regex} Regex
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Regex.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Regex message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Regex.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.pattern != null && message.hasOwnProperty("pattern"))
                                    if (!$util.isString(message.pattern))
                                        return "pattern: string expected";
                                if (message.groupIndexes != null && message.hasOwnProperty("groupIndexes")) {
                                    if (!Array.isArray(message.groupIndexes))
                                        return "groupIndexes: array expected";
                                    for (var i = 0; i < message.groupIndexes.length; ++i)
                                        if (!$util.isInteger(message.groupIndexes[i]))
                                            return "groupIndexes: integer[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Regex message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.CustomInfoType.Regex} Regex
                             */
                            Regex.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.Regex)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.CustomInfoType.Regex();
                                if (object.pattern != null)
                                    message.pattern = String(object.pattern);
                                if (object.groupIndexes) {
                                    if (!Array.isArray(object.groupIndexes))
                                        throw TypeError(".google.privacy.dlp.v2.CustomInfoType.Regex.groupIndexes: array expected");
                                    message.groupIndexes = [];
                                    for (var i = 0; i < object.groupIndexes.length; ++i)
                                        message.groupIndexes[i] = object.groupIndexes[i] | 0;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Regex message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.Regex} message Regex
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Regex.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.groupIndexes = [];
                                if (options.defaults)
                                    object.pattern = "";
                                if (message.pattern != null && message.hasOwnProperty("pattern"))
                                    object.pattern = message.pattern;
                                if (message.groupIndexes && message.groupIndexes.length) {
                                    object.groupIndexes = [];
                                    for (var j = 0; j < message.groupIndexes.length; ++j)
                                        object.groupIndexes[j] = message.groupIndexes[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Regex to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.CustomInfoType.Regex
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Regex.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Regex;
                        })();
    
                        CustomInfoType.SurrogateType = (function() {
    
                            /**
                             * Properties of a SurrogateType.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @interface ISurrogateType
                             */
    
                            /**
                             * Constructs a new SurrogateType.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @classdesc Represents a SurrogateType.
                             * @implements ISurrogateType
                             * @constructor
                             * @param {google.privacy.dlp.v2.CustomInfoType.ISurrogateType=} [properties] Properties to set
                             */
                            function SurrogateType(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new SurrogateType instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.ISurrogateType=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.CustomInfoType.SurrogateType} SurrogateType instance
                             */
                            SurrogateType.create = function create(properties) {
                                return new SurrogateType(properties);
                            };
    
                            /**
                             * Encodes the specified SurrogateType message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.SurrogateType.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.ISurrogateType} message SurrogateType message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SurrogateType.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SurrogateType message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.SurrogateType.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.ISurrogateType} message SurrogateType message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SurrogateType.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SurrogateType message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.CustomInfoType.SurrogateType} SurrogateType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SurrogateType.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SurrogateType message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.CustomInfoType.SurrogateType} SurrogateType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SurrogateType.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SurrogateType message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SurrogateType.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a SurrogateType message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.CustomInfoType.SurrogateType} SurrogateType
                             */
                            SurrogateType.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType)
                                    return object;
                                return new $root.google.privacy.dlp.v2.CustomInfoType.SurrogateType();
                            };
    
                            /**
                             * Creates a plain object from a SurrogateType message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.SurrogateType} message SurrogateType
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SurrogateType.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this SurrogateType to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.CustomInfoType.SurrogateType
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SurrogateType.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return SurrogateType;
                        })();
    
                        CustomInfoType.DetectionRule = (function() {
    
                            /**
                             * Properties of a DetectionRule.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @interface IDetectionRule
                             * @property {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule|null} [hotwordRule] DetectionRule hotwordRule
                             */
    
                            /**
                             * Constructs a new DetectionRule.
                             * @memberof google.privacy.dlp.v2.CustomInfoType
                             * @classdesc Represents a DetectionRule.
                             * @implements IDetectionRule
                             * @constructor
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDetectionRule=} [properties] Properties to set
                             */
                            function DetectionRule(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DetectionRule hotwordRule.
                             * @member {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule|null|undefined} hotwordRule
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @instance
                             */
                            DetectionRule.prototype.hotwordRule = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * DetectionRule type.
                             * @member {"hotwordRule"|undefined} type
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @instance
                             */
                            Object.defineProperty(DetectionRule.prototype, "type", {
                                get: $util.oneOfGetter($oneOfFields = ["hotwordRule"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new DetectionRule instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDetectionRule=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule} DetectionRule instance
                             */
                            DetectionRule.create = function create(properties) {
                                return new DetectionRule(properties);
                            };
    
                            /**
                             * Encodes the specified DetectionRule message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDetectionRule} message DetectionRule message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DetectionRule.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.hotwordRule != null && Object.hasOwnProperty.call(message, "hotwordRule"))
                                    $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.encode(message.hotwordRule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DetectionRule message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.IDetectionRule} message DetectionRule message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DetectionRule.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DetectionRule message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule} DetectionRule
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DetectionRule.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.hotwordRule = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DetectionRule message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule} DetectionRule
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DetectionRule.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DetectionRule message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DetectionRule.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.hotwordRule != null && message.hasOwnProperty("hotwordRule")) {
                                    properties.type = 1;
                                    {
                                        var error = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.verify(message.hotwordRule);
                                        if (error)
                                            return "hotwordRule." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a DetectionRule message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule} DetectionRule
                             */
                            DetectionRule.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule();
                                if (object.hotwordRule != null) {
                                    if (typeof object.hotwordRule !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.CustomInfoType.DetectionRule.hotwordRule: object expected");
                                    message.hotwordRule = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.fromObject(object.hotwordRule);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DetectionRule message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @static
                             * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule} message DetectionRule
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DetectionRule.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.hotwordRule != null && message.hasOwnProperty("hotwordRule")) {
                                    object.hotwordRule = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.toObject(message.hotwordRule, options);
                                    if (options.oneofs)
                                        object.type = "hotwordRule";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this DetectionRule to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DetectionRule.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            DetectionRule.Proximity = (function() {
    
                                /**
                                 * Properties of a Proximity.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                                 * @interface IProximity
                                 * @property {number|null} [windowBefore] Proximity windowBefore
                                 * @property {number|null} [windowAfter] Proximity windowAfter
                                 */
    
                                /**
                                 * Constructs a new Proximity.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                                 * @classdesc Represents a Proximity.
                                 * @implements IProximity
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IProximity=} [properties] Properties to set
                                 */
                                function Proximity(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Proximity windowBefore.
                                 * @member {number} windowBefore
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @instance
                                 */
                                Proximity.prototype.windowBefore = 0;
    
                                /**
                                 * Proximity windowAfter.
                                 * @member {number} windowAfter
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @instance
                                 */
                                Proximity.prototype.windowAfter = 0;
    
                                /**
                                 * Creates a new Proximity instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IProximity=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity} Proximity instance
                                 */
                                Proximity.create = function create(properties) {
                                    return new Proximity(properties);
                                };
    
                                /**
                                 * Encodes the specified Proximity message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IProximity} message Proximity message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Proximity.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.windowBefore != null && Object.hasOwnProperty.call(message, "windowBefore"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.windowBefore);
                                    if (message.windowAfter != null && Object.hasOwnProperty.call(message, "windowAfter"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.windowAfter);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Proximity message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IProximity} message Proximity message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Proximity.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Proximity message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity} Proximity
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Proximity.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.windowBefore = reader.int32();
                                            break;
                                        case 2:
                                            message.windowAfter = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Proximity message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity} Proximity
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Proximity.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Proximity message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Proximity.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.windowBefore != null && message.hasOwnProperty("windowBefore"))
                                        if (!$util.isInteger(message.windowBefore))
                                            return "windowBefore: integer expected";
                                    if (message.windowAfter != null && message.hasOwnProperty("windowAfter"))
                                        if (!$util.isInteger(message.windowAfter))
                                            return "windowAfter: integer expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a Proximity message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity} Proximity
                                 */
                                Proximity.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity();
                                    if (object.windowBefore != null)
                                        message.windowBefore = object.windowBefore | 0;
                                    if (object.windowAfter != null)
                                        message.windowAfter = object.windowAfter | 0;
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Proximity message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity} message Proximity
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Proximity.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.windowBefore = 0;
                                        object.windowAfter = 0;
                                    }
                                    if (message.windowBefore != null && message.hasOwnProperty("windowBefore"))
                                        object.windowBefore = message.windowBefore;
                                    if (message.windowAfter != null && message.hasOwnProperty("windowAfter"))
                                        object.windowAfter = message.windowAfter;
                                    return object;
                                };
    
                                /**
                                 * Converts this Proximity to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Proximity.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return Proximity;
                            })();
    
                            DetectionRule.LikelihoodAdjustment = (function() {
    
                                /**
                                 * Properties of a LikelihoodAdjustment.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                                 * @interface ILikelihoodAdjustment
                                 * @property {google.privacy.dlp.v2.Likelihood|null} [fixedLikelihood] LikelihoodAdjustment fixedLikelihood
                                 * @property {number|null} [relativeLikelihood] LikelihoodAdjustment relativeLikelihood
                                 */
    
                                /**
                                 * Constructs a new LikelihoodAdjustment.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                                 * @classdesc Represents a LikelihoodAdjustment.
                                 * @implements ILikelihoodAdjustment
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.ILikelihoodAdjustment=} [properties] Properties to set
                                 */
                                function LikelihoodAdjustment(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * LikelihoodAdjustment fixedLikelihood.
                                 * @member {google.privacy.dlp.v2.Likelihood} fixedLikelihood
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @instance
                                 */
                                LikelihoodAdjustment.prototype.fixedLikelihood = 0;
    
                                /**
                                 * LikelihoodAdjustment relativeLikelihood.
                                 * @member {number} relativeLikelihood
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @instance
                                 */
                                LikelihoodAdjustment.prototype.relativeLikelihood = 0;
    
                                // OneOf field names bound to virtual getters and setters
                                var $oneOfFields;
    
                                /**
                                 * LikelihoodAdjustment adjustment.
                                 * @member {"fixedLikelihood"|"relativeLikelihood"|undefined} adjustment
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @instance
                                 */
                                Object.defineProperty(LikelihoodAdjustment.prototype, "adjustment", {
                                    get: $util.oneOfGetter($oneOfFields = ["fixedLikelihood", "relativeLikelihood"]),
                                    set: $util.oneOfSetter($oneOfFields)
                                });
    
                                /**
                                 * Creates a new LikelihoodAdjustment instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.ILikelihoodAdjustment=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment} LikelihoodAdjustment instance
                                 */
                                LikelihoodAdjustment.create = function create(properties) {
                                    return new LikelihoodAdjustment(properties);
                                };
    
                                /**
                                 * Encodes the specified LikelihoodAdjustment message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.ILikelihoodAdjustment} message LikelihoodAdjustment message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LikelihoodAdjustment.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.fixedLikelihood != null && Object.hasOwnProperty.call(message, "fixedLikelihood"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.fixedLikelihood);
                                    if (message.relativeLikelihood != null && Object.hasOwnProperty.call(message, "relativeLikelihood"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relativeLikelihood);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified LikelihoodAdjustment message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.ILikelihoodAdjustment} message LikelihoodAdjustment message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LikelihoodAdjustment.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a LikelihoodAdjustment message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment} LikelihoodAdjustment
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LikelihoodAdjustment.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.fixedLikelihood = reader.int32();
                                            break;
                                        case 2:
                                            message.relativeLikelihood = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a LikelihoodAdjustment message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment} LikelihoodAdjustment
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LikelihoodAdjustment.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a LikelihoodAdjustment message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LikelihoodAdjustment.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    var properties = {};
                                    if (message.fixedLikelihood != null && message.hasOwnProperty("fixedLikelihood")) {
                                        properties.adjustment = 1;
                                        switch (message.fixedLikelihood) {
                                        default:
                                            return "fixedLikelihood: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                        case 5:
                                            break;
                                        }
                                    }
                                    if (message.relativeLikelihood != null && message.hasOwnProperty("relativeLikelihood")) {
                                        if (properties.adjustment === 1)
                                            return "adjustment: multiple values";
                                        properties.adjustment = 1;
                                        if (!$util.isInteger(message.relativeLikelihood))
                                            return "relativeLikelihood: integer expected";
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a LikelihoodAdjustment message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment} LikelihoodAdjustment
                                 */
                                LikelihoodAdjustment.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment();
                                    switch (object.fixedLikelihood) {
                                    case "LIKELIHOOD_UNSPECIFIED":
                                    case 0:
                                        message.fixedLikelihood = 0;
                                        break;
                                    case "VERY_UNLIKELY":
                                    case 1:
                                        message.fixedLikelihood = 1;
                                        break;
                                    case "UNLIKELY":
                                    case 2:
                                        message.fixedLikelihood = 2;
                                        break;
                                    case "POSSIBLE":
                                    case 3:
                                        message.fixedLikelihood = 3;
                                        break;
                                    case "LIKELY":
                                    case 4:
                                        message.fixedLikelihood = 4;
                                        break;
                                    case "VERY_LIKELY":
                                    case 5:
                                        message.fixedLikelihood = 5;
                                        break;
                                    }
                                    if (object.relativeLikelihood != null)
                                        message.relativeLikelihood = object.relativeLikelihood | 0;
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a LikelihoodAdjustment message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment} message LikelihoodAdjustment
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LikelihoodAdjustment.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (message.fixedLikelihood != null && message.hasOwnProperty("fixedLikelihood")) {
                                        object.fixedLikelihood = options.enums === String ? $root.google.privacy.dlp.v2.Likelihood[message.fixedLikelihood] : message.fixedLikelihood;
                                        if (options.oneofs)
                                            object.adjustment = "fixedLikelihood";
                                    }
                                    if (message.relativeLikelihood != null && message.hasOwnProperty("relativeLikelihood")) {
                                        object.relativeLikelihood = message.relativeLikelihood;
                                        if (options.oneofs)
                                            object.adjustment = "relativeLikelihood";
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this LikelihoodAdjustment to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LikelihoodAdjustment.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return LikelihoodAdjustment;
                            })();
    
                            DetectionRule.HotwordRule = (function() {
    
                                /**
                                 * Properties of a HotwordRule.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                                 * @interface IHotwordRule
                                 * @property {google.privacy.dlp.v2.CustomInfoType.IRegex|null} [hotwordRegex] HotwordRule hotwordRegex
                                 * @property {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IProximity|null} [proximity] HotwordRule proximity
                                 * @property {google.privacy.dlp.v2.CustomInfoType.DetectionRule.ILikelihoodAdjustment|null} [likelihoodAdjustment] HotwordRule likelihoodAdjustment
                                 */
    
                                /**
                                 * Constructs a new HotwordRule.
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule
                                 * @classdesc Represents a HotwordRule.
                                 * @implements IHotwordRule
                                 * @constructor
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule=} [properties] Properties to set
                                 */
                                function HotwordRule(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * HotwordRule hotwordRegex.
                                 * @member {google.privacy.dlp.v2.CustomInfoType.IRegex|null|undefined} hotwordRegex
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @instance
                                 */
                                HotwordRule.prototype.hotwordRegex = null;
    
                                /**
                                 * HotwordRule proximity.
                                 * @member {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IProximity|null|undefined} proximity
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @instance
                                 */
                                HotwordRule.prototype.proximity = null;
    
                                /**
                                 * HotwordRule likelihoodAdjustment.
                                 * @member {google.privacy.dlp.v2.CustomInfoType.DetectionRule.ILikelihoodAdjustment|null|undefined} likelihoodAdjustment
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @instance
                                 */
                                HotwordRule.prototype.likelihoodAdjustment = null;
    
                                /**
                                 * Creates a new HotwordRule instance using the specified properties.
                                 * @function create
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule=} [properties] Properties to set
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule} HotwordRule instance
                                 */
                                HotwordRule.create = function create(properties) {
                                    return new HotwordRule(properties);
                                };
    
                                /**
                                 * Encodes the specified HotwordRule message. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule} message HotwordRule message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                HotwordRule.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.hotwordRegex != null && Object.hasOwnProperty.call(message, "hotwordRegex"))
                                        $root.google.privacy.dlp.v2.CustomInfoType.Regex.encode(message.hotwordRegex, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.proximity != null && Object.hasOwnProperty.call(message, "proximity"))
                                        $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.encode(message.proximity, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.likelihoodAdjustment != null && Object.hasOwnProperty.call(message, "likelihoodAdjustment"))
                                        $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.encode(message.likelihoodAdjustment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified HotwordRule message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.IHotwordRule} message HotwordRule message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                HotwordRule.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a HotwordRule message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule} HotwordRule
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                HotwordRule.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.hotwordRegex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.proximity = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.decode(reader, reader.uint32());
                                            break;
                                        case 3:
                                            message.likelihoodAdjustment = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a HotwordRule message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule} HotwordRule
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                HotwordRule.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a HotwordRule message.
                                 * @function verify
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                HotwordRule.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.hotwordRegex != null && message.hasOwnProperty("hotwordRegex")) {
                                        var error = $root.google.privacy.dlp.v2.CustomInfoType.Regex.verify(message.hotwordRegex);
                                        if (error)
                                            return "hotwordRegex." + error;
                                    }
                                    if (message.proximity != null && message.hasOwnProperty("proximity")) {
                                        var error = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.verify(message.proximity);
                                        if (error)
                                            return "proximity." + error;
                                    }
                                    if (message.likelihoodAdjustment != null && message.hasOwnProperty("likelihoodAdjustment")) {
                                        var error = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.verify(message.likelihoodAdjustment);
                                        if (error)
                                            return "likelihoodAdjustment." + error;
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a HotwordRule message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule} HotwordRule
                                 */
                                HotwordRule.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
                                        return object;
                                    var message = new $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule();
                                    if (object.hotwordRegex != null) {
                                        if (typeof object.hotwordRegex !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.hotwordRegex: object expected");
                                        message.hotwordRegex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.fromObject(object.hotwordRegex);
                                    }
                                    if (object.proximity != null) {
                                        if (typeof object.proximity !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.proximity: object expected");
                                        message.proximity = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.fromObject(object.proximity);
                                    }
                                    if (object.likelihoodAdjustment != null) {
                                        if (typeof object.likelihoodAdjustment !== "object")
                                            throw TypeError(".google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule.likelihoodAdjustment: object expected");
                                        message.likelihoodAdjustment = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.fromObject(object.likelihoodAdjustment);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a HotwordRule message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @static
                                 * @param {google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule} message HotwordRule
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                HotwordRule.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.hotwordRegex = null;
                                        object.proximity = null;
                                        object.likelihoodAdjustment = null;
                                    }
                                    if (message.hotwordRegex != null && message.hasOwnProperty("hotwordRegex"))
                                        object.hotwordRegex = $root.google.privacy.dlp.v2.CustomInfoType.Regex.toObject(message.hotwordRegex, options);
                                    if (message.proximity != null && message.hasOwnProperty("proximity"))
                                        object.proximity = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity.toObject(message.proximity, options);
                                    if (message.likelihoodAdjustment != null && message.hasOwnProperty("likelihoodAdjustment"))
                                        object.likelihoodAdjustment = $root.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment.toObject(message.likelihoodAdjustment, options);
                                    return object;
                                };
    
                                /**
                                 * Converts this HotwordRule to JSON.
                                 * @function toJSON
                                 * @memberof google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                HotwordRule.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                return HotwordRule;
                            })();
    
                            return DetectionRule;
                        })();
    
                        /**
                         * ExclusionType enum.
                         * @name google.privacy.dlp.v2.CustomInfoType.ExclusionType
                         * @enum {number}
                         * @property {number} EXCLUSION_TYPE_UNSPECIFIED=0 EXCLUSION_TYPE_UNSPECIFIED value
                         * @property {number} EXCLUSION_TYPE_EXCLUDE=1 EXCLUSION_TYPE_EXCLUDE value
                         */
                        CustomInfoType.ExclusionType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "EXCLUSION_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "EXCLUSION_TYPE_EXCLUDE"] = 1;
                            return values;
                        })();
    
                        return CustomInfoType;
                    })();
    
                    v2.FieldId = (function() {
    
                        /**
                         * Properties of a FieldId.
                         * @memberof google.privacy.dlp.v2
                         * @interface IFieldId
                         * @property {string|null} [name] FieldId name
                         */
    
                        /**
                         * Constructs a new FieldId.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a FieldId.
                         * @implements IFieldId
                         * @constructor
                         * @param {google.privacy.dlp.v2.IFieldId=} [properties] Properties to set
                         */
                        function FieldId(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FieldId name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @instance
                         */
                        FieldId.prototype.name = "";
    
                        /**
                         * Creates a new FieldId instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {google.privacy.dlp.v2.IFieldId=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.FieldId} FieldId instance
                         */
                        FieldId.create = function create(properties) {
                            return new FieldId(properties);
                        };
    
                        /**
                         * Encodes the specified FieldId message. Does not implicitly {@link google.privacy.dlp.v2.FieldId.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {google.privacy.dlp.v2.IFieldId} message FieldId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FieldId.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FieldId message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.FieldId.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {google.privacy.dlp.v2.IFieldId} message FieldId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FieldId.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FieldId message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.FieldId} FieldId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FieldId.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.FieldId();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FieldId message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.FieldId} FieldId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FieldId.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FieldId message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FieldId.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a FieldId message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.FieldId} FieldId
                         */
                        FieldId.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.FieldId)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.FieldId();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FieldId message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @static
                         * @param {google.privacy.dlp.v2.FieldId} message FieldId
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FieldId.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this FieldId to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.FieldId
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FieldId.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return FieldId;
                    })();
    
                    v2.PartitionId = (function() {
    
                        /**
                         * Properties of a PartitionId.
                         * @memberof google.privacy.dlp.v2
                         * @interface IPartitionId
                         * @property {string|null} [projectId] PartitionId projectId
                         * @property {string|null} [namespaceId] PartitionId namespaceId
                         */
    
                        /**
                         * Constructs a new PartitionId.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a PartitionId.
                         * @implements IPartitionId
                         * @constructor
                         * @param {google.privacy.dlp.v2.IPartitionId=} [properties] Properties to set
                         */
                        function PartitionId(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PartitionId projectId.
                         * @member {string} projectId
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @instance
                         */
                        PartitionId.prototype.projectId = "";
    
                        /**
                         * PartitionId namespaceId.
                         * @member {string} namespaceId
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @instance
                         */
                        PartitionId.prototype.namespaceId = "";
    
                        /**
                         * Creates a new PartitionId instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {google.privacy.dlp.v2.IPartitionId=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.PartitionId} PartitionId instance
                         */
                        PartitionId.create = function create(properties) {
                            return new PartitionId(properties);
                        };
    
                        /**
                         * Encodes the specified PartitionId message. Does not implicitly {@link google.privacy.dlp.v2.PartitionId.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {google.privacy.dlp.v2.IPartitionId} message PartitionId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartitionId.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.projectId);
                            if (message.namespaceId != null && Object.hasOwnProperty.call(message, "namespaceId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.namespaceId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PartitionId message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.PartitionId.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {google.privacy.dlp.v2.IPartitionId} message PartitionId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartitionId.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PartitionId message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.PartitionId} PartitionId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartitionId.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.PartitionId();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.projectId = reader.string();
                                    break;
                                case 4:
                                    message.namespaceId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PartitionId message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.PartitionId} PartitionId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartitionId.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PartitionId message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PartitionId.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.projectId != null && message.hasOwnProperty("projectId"))
                                if (!$util.isString(message.projectId))
                                    return "projectId: string expected";
                            if (message.namespaceId != null && message.hasOwnProperty("namespaceId"))
                                if (!$util.isString(message.namespaceId))
                                    return "namespaceId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a PartitionId message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.PartitionId} PartitionId
                         */
                        PartitionId.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.PartitionId)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.PartitionId();
                            if (object.projectId != null)
                                message.projectId = String(object.projectId);
                            if (object.namespaceId != null)
                                message.namespaceId = String(object.namespaceId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PartitionId message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @static
                         * @param {google.privacy.dlp.v2.PartitionId} message PartitionId
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PartitionId.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.projectId = "";
                                object.namespaceId = "";
                            }
                            if (message.projectId != null && message.hasOwnProperty("projectId"))
                                object.projectId = message.projectId;
                            if (message.namespaceId != null && message.hasOwnProperty("namespaceId"))
                                object.namespaceId = message.namespaceId;
                            return object;
                        };
    
                        /**
                         * Converts this PartitionId to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.PartitionId
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PartitionId.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PartitionId;
                    })();
    
                    v2.KindExpression = (function() {
    
                        /**
                         * Properties of a KindExpression.
                         * @memberof google.privacy.dlp.v2
                         * @interface IKindExpression
                         * @property {string|null} [name] KindExpression name
                         */
    
                        /**
                         * Constructs a new KindExpression.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a KindExpression.
                         * @implements IKindExpression
                         * @constructor
                         * @param {google.privacy.dlp.v2.IKindExpression=} [properties] Properties to set
                         */
                        function KindExpression(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * KindExpression name.
                         * @member {string} name
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @instance
                         */
                        KindExpression.prototype.name = "";
    
                        /**
                         * Creates a new KindExpression instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {google.privacy.dlp.v2.IKindExpression=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.KindExpression} KindExpression instance
                         */
                        KindExpression.create = function create(properties) {
                            return new KindExpression(properties);
                        };
    
                        /**
                         * Encodes the specified KindExpression message. Does not implicitly {@link google.privacy.dlp.v2.KindExpression.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {google.privacy.dlp.v2.IKindExpression} message KindExpression message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KindExpression.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified KindExpression message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.KindExpression.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {google.privacy.dlp.v2.IKindExpression} message KindExpression message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KindExpression.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a KindExpression message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.KindExpression} KindExpression
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KindExpression.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.KindExpression();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a KindExpression message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.KindExpression} KindExpression
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KindExpression.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a KindExpression message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        KindExpression.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a KindExpression message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.KindExpression} KindExpression
                         */
                        KindExpression.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.KindExpression)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.KindExpression();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a KindExpression message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @static
                         * @param {google.privacy.dlp.v2.KindExpression} message KindExpression
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        KindExpression.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this KindExpression to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.KindExpression
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        KindExpression.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return KindExpression;
                    })();
    
                    v2.DatastoreOptions = (function() {
    
                        /**
                         * Properties of a DatastoreOptions.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDatastoreOptions
                         * @property {google.privacy.dlp.v2.IPartitionId|null} [partitionId] DatastoreOptions partitionId
                         * @property {google.privacy.dlp.v2.IKindExpression|null} [kind] DatastoreOptions kind
                         */
    
                        /**
                         * Constructs a new DatastoreOptions.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DatastoreOptions.
                         * @implements IDatastoreOptions
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDatastoreOptions=} [properties] Properties to set
                         */
                        function DatastoreOptions(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DatastoreOptions partitionId.
                         * @member {google.privacy.dlp.v2.IPartitionId|null|undefined} partitionId
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @instance
                         */
                        DatastoreOptions.prototype.partitionId = null;
    
                        /**
                         * DatastoreOptions kind.
                         * @member {google.privacy.dlp.v2.IKindExpression|null|undefined} kind
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @instance
                         */
                        DatastoreOptions.prototype.kind = null;
    
                        /**
                         * Creates a new DatastoreOptions instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IDatastoreOptions=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DatastoreOptions} DatastoreOptions instance
                         */
                        DatastoreOptions.create = function create(properties) {
                            return new DatastoreOptions(properties);
                        };
    
                        /**
                         * Encodes the specified DatastoreOptions message. Does not implicitly {@link google.privacy.dlp.v2.DatastoreOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IDatastoreOptions} message DatastoreOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DatastoreOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.partitionId != null && Object.hasOwnProperty.call(message, "partitionId"))
                                $root.google.privacy.dlp.v2.PartitionId.encode(message.partitionId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                $root.google.privacy.dlp.v2.KindExpression.encode(message.kind, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DatastoreOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DatastoreOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IDatastoreOptions} message DatastoreOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DatastoreOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DatastoreOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DatastoreOptions} DatastoreOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DatastoreOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DatastoreOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.partitionId = $root.google.privacy.dlp.v2.PartitionId.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.kind = $root.google.privacy.dlp.v2.KindExpression.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DatastoreOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DatastoreOptions} DatastoreOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DatastoreOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DatastoreOptions message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DatastoreOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.partitionId != null && message.hasOwnProperty("partitionId")) {
                                var error = $root.google.privacy.dlp.v2.PartitionId.verify(message.partitionId);
                                if (error)
                                    return "partitionId." + error;
                            }
                            if (message.kind != null && message.hasOwnProperty("kind")) {
                                var error = $root.google.privacy.dlp.v2.KindExpression.verify(message.kind);
                                if (error)
                                    return "kind." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DatastoreOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DatastoreOptions} DatastoreOptions
                         */
                        DatastoreOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DatastoreOptions)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DatastoreOptions();
                            if (object.partitionId != null) {
                                if (typeof object.partitionId !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DatastoreOptions.partitionId: object expected");
                                message.partitionId = $root.google.privacy.dlp.v2.PartitionId.fromObject(object.partitionId);
                            }
                            if (object.kind != null) {
                                if (typeof object.kind !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DatastoreOptions.kind: object expected");
                                message.kind = $root.google.privacy.dlp.v2.KindExpression.fromObject(object.kind);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DatastoreOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @static
                         * @param {google.privacy.dlp.v2.DatastoreOptions} message DatastoreOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DatastoreOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.partitionId = null;
                                object.kind = null;
                            }
                            if (message.partitionId != null && message.hasOwnProperty("partitionId"))
                                object.partitionId = $root.google.privacy.dlp.v2.PartitionId.toObject(message.partitionId, options);
                            if (message.kind != null && message.hasOwnProperty("kind"))
                                object.kind = $root.google.privacy.dlp.v2.KindExpression.toObject(message.kind, options);
                            return object;
                        };
    
                        /**
                         * Converts this DatastoreOptions to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DatastoreOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DatastoreOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DatastoreOptions;
                    })();
    
                    v2.CloudStorageRegexFileSet = (function() {
    
                        /**
                         * Properties of a CloudStorageRegexFileSet.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICloudStorageRegexFileSet
                         * @property {string|null} [bucketName] CloudStorageRegexFileSet bucketName
                         * @property {Array.<string>|null} [includeRegex] CloudStorageRegexFileSet includeRegex
                         * @property {Array.<string>|null} [excludeRegex] CloudStorageRegexFileSet excludeRegex
                         */
    
                        /**
                         * Constructs a new CloudStorageRegexFileSet.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CloudStorageRegexFileSet.
                         * @implements ICloudStorageRegexFileSet
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICloudStorageRegexFileSet=} [properties] Properties to set
                         */
                        function CloudStorageRegexFileSet(properties) {
                            this.includeRegex = [];
                            this.excludeRegex = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CloudStorageRegexFileSet bucketName.
                         * @member {string} bucketName
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @instance
                         */
                        CloudStorageRegexFileSet.prototype.bucketName = "";
    
                        /**
                         * CloudStorageRegexFileSet includeRegex.
                         * @member {Array.<string>} includeRegex
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @instance
                         */
                        CloudStorageRegexFileSet.prototype.includeRegex = $util.emptyArray;
    
                        /**
                         * CloudStorageRegexFileSet excludeRegex.
                         * @member {Array.<string>} excludeRegex
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @instance
                         */
                        CloudStorageRegexFileSet.prototype.excludeRegex = $util.emptyArray;
    
                        /**
                         * Creates a new CloudStorageRegexFileSet instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageRegexFileSet=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CloudStorageRegexFileSet} CloudStorageRegexFileSet instance
                         */
                        CloudStorageRegexFileSet.create = function create(properties) {
                            return new CloudStorageRegexFileSet(properties);
                        };
    
                        /**
                         * Encodes the specified CloudStorageRegexFileSet message. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageRegexFileSet.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageRegexFileSet} message CloudStorageRegexFileSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStorageRegexFileSet.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.bucketName != null && Object.hasOwnProperty.call(message, "bucketName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.bucketName);
                            if (message.includeRegex != null && message.includeRegex.length)
                                for (var i = 0; i < message.includeRegex.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.includeRegex[i]);
                            if (message.excludeRegex != null && message.excludeRegex.length)
                                for (var i = 0; i < message.excludeRegex.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.excludeRegex[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CloudStorageRegexFileSet message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageRegexFileSet.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageRegexFileSet} message CloudStorageRegexFileSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStorageRegexFileSet.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CloudStorageRegexFileSet message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CloudStorageRegexFileSet} CloudStorageRegexFileSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStorageRegexFileSet.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CloudStorageRegexFileSet();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.bucketName = reader.string();
                                    break;
                                case 2:
                                    if (!(message.includeRegex && message.includeRegex.length))
                                        message.includeRegex = [];
                                    message.includeRegex.push(reader.string());
                                    break;
                                case 3:
                                    if (!(message.excludeRegex && message.excludeRegex.length))
                                        message.excludeRegex = [];
                                    message.excludeRegex.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CloudStorageRegexFileSet message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CloudStorageRegexFileSet} CloudStorageRegexFileSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStorageRegexFileSet.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CloudStorageRegexFileSet message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CloudStorageRegexFileSet.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.bucketName != null && message.hasOwnProperty("bucketName"))
                                if (!$util.isString(message.bucketName))
                                    return "bucketName: string expected";
                            if (message.includeRegex != null && message.hasOwnProperty("includeRegex")) {
                                if (!Array.isArray(message.includeRegex))
                                    return "includeRegex: array expected";
                                for (var i = 0; i < message.includeRegex.length; ++i)
                                    if (!$util.isString(message.includeRegex[i]))
                                        return "includeRegex: string[] expected";
                            }
                            if (message.excludeRegex != null && message.hasOwnProperty("excludeRegex")) {
                                if (!Array.isArray(message.excludeRegex))
                                    return "excludeRegex: array expected";
                                for (var i = 0; i < message.excludeRegex.length; ++i)
                                    if (!$util.isString(message.excludeRegex[i]))
                                        return "excludeRegex: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CloudStorageRegexFileSet message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CloudStorageRegexFileSet} CloudStorageRegexFileSet
                         */
                        CloudStorageRegexFileSet.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CloudStorageRegexFileSet)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CloudStorageRegexFileSet();
                            if (object.bucketName != null)
                                message.bucketName = String(object.bucketName);
                            if (object.includeRegex) {
                                if (!Array.isArray(object.includeRegex))
                                    throw TypeError(".google.privacy.dlp.v2.CloudStorageRegexFileSet.includeRegex: array expected");
                                message.includeRegex = [];
                                for (var i = 0; i < object.includeRegex.length; ++i)
                                    message.includeRegex[i] = String(object.includeRegex[i]);
                            }
                            if (object.excludeRegex) {
                                if (!Array.isArray(object.excludeRegex))
                                    throw TypeError(".google.privacy.dlp.v2.CloudStorageRegexFileSet.excludeRegex: array expected");
                                message.excludeRegex = [];
                                for (var i = 0; i < object.excludeRegex.length; ++i)
                                    message.excludeRegex[i] = String(object.excludeRegex[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CloudStorageRegexFileSet message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.CloudStorageRegexFileSet} message CloudStorageRegexFileSet
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CloudStorageRegexFileSet.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.includeRegex = [];
                                object.excludeRegex = [];
                            }
                            if (options.defaults)
                                object.bucketName = "";
                            if (message.bucketName != null && message.hasOwnProperty("bucketName"))
                                object.bucketName = message.bucketName;
                            if (message.includeRegex && message.includeRegex.length) {
                                object.includeRegex = [];
                                for (var j = 0; j < message.includeRegex.length; ++j)
                                    object.includeRegex[j] = message.includeRegex[j];
                            }
                            if (message.excludeRegex && message.excludeRegex.length) {
                                object.excludeRegex = [];
                                for (var j = 0; j < message.excludeRegex.length; ++j)
                                    object.excludeRegex[j] = message.excludeRegex[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CloudStorageRegexFileSet to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CloudStorageRegexFileSet
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CloudStorageRegexFileSet.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CloudStorageRegexFileSet;
                    })();
    
                    v2.CloudStorageOptions = (function() {
    
                        /**
                         * Properties of a CloudStorageOptions.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICloudStorageOptions
                         * @property {google.privacy.dlp.v2.CloudStorageOptions.IFileSet|null} [fileSet] CloudStorageOptions fileSet
                         * @property {number|Long|null} [bytesLimitPerFile] CloudStorageOptions bytesLimitPerFile
                         * @property {number|null} [bytesLimitPerFilePercent] CloudStorageOptions bytesLimitPerFilePercent
                         * @property {Array.<google.privacy.dlp.v2.FileType>|null} [fileTypes] CloudStorageOptions fileTypes
                         * @property {google.privacy.dlp.v2.CloudStorageOptions.SampleMethod|null} [sampleMethod] CloudStorageOptions sampleMethod
                         * @property {number|null} [filesLimitPercent] CloudStorageOptions filesLimitPercent
                         */
    
                        /**
                         * Constructs a new CloudStorageOptions.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CloudStorageOptions.
                         * @implements ICloudStorageOptions
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICloudStorageOptions=} [properties] Properties to set
                         */
                        function CloudStorageOptions(properties) {
                            this.fileTypes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CloudStorageOptions fileSet.
                         * @member {google.privacy.dlp.v2.CloudStorageOptions.IFileSet|null|undefined} fileSet
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         */
                        CloudStorageOptions.prototype.fileSet = null;
    
                        /**
                         * CloudStorageOptions bytesLimitPerFile.
                         * @member {number|Long} bytesLimitPerFile
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         */
                        CloudStorageOptions.prototype.bytesLimitPerFile = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * CloudStorageOptions bytesLimitPerFilePercent.
                         * @member {number} bytesLimitPerFilePercent
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         */
                        CloudStorageOptions.prototype.bytesLimitPerFilePercent = 0;
    
                        /**
                         * CloudStorageOptions fileTypes.
                         * @member {Array.<google.privacy.dlp.v2.FileType>} fileTypes
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         */
                        CloudStorageOptions.prototype.fileTypes = $util.emptyArray;
    
                        /**
                         * CloudStorageOptions sampleMethod.
                         * @member {google.privacy.dlp.v2.CloudStorageOptions.SampleMethod} sampleMethod
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         */
                        CloudStorageOptions.prototype.sampleMethod = 0;
    
                        /**
                         * CloudStorageOptions filesLimitPercent.
                         * @member {number} filesLimitPercent
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         */
                        CloudStorageOptions.prototype.filesLimitPercent = 0;
    
                        /**
                         * Creates a new CloudStorageOptions instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageOptions=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CloudStorageOptions} CloudStorageOptions instance
                         */
                        CloudStorageOptions.create = function create(properties) {
                            return new CloudStorageOptions(properties);
                        };
    
                        /**
                         * Encodes the specified CloudStorageOptions message. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageOptions} message CloudStorageOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStorageOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.fileSet != null && Object.hasOwnProperty.call(message, "fileSet"))
                                $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet.encode(message.fileSet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.bytesLimitPerFile != null && Object.hasOwnProperty.call(message, "bytesLimitPerFile"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.bytesLimitPerFile);
                            if (message.fileTypes != null && message.fileTypes.length) {
                                writer.uint32(/* id 5, wireType 2 =*/42).fork();
                                for (var i = 0; i < message.fileTypes.length; ++i)
                                    writer.int32(message.fileTypes[i]);
                                writer.ldelim();
                            }
                            if (message.sampleMethod != null && Object.hasOwnProperty.call(message, "sampleMethod"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.sampleMethod);
                            if (message.filesLimitPercent != null && Object.hasOwnProperty.call(message, "filesLimitPercent"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.filesLimitPercent);
                            if (message.bytesLimitPerFilePercent != null && Object.hasOwnProperty.call(message, "bytesLimitPerFilePercent"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.bytesLimitPerFilePercent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CloudStorageOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageOptions} message CloudStorageOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStorageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CloudStorageOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CloudStorageOptions} CloudStorageOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStorageOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CloudStorageOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.fileSet = $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.bytesLimitPerFile = reader.int64();
                                    break;
                                case 8:
                                    message.bytesLimitPerFilePercent = reader.int32();
                                    break;
                                case 5:
                                    if (!(message.fileTypes && message.fileTypes.length))
                                        message.fileTypes = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.fileTypes.push(reader.int32());
                                    } else
                                        message.fileTypes.push(reader.int32());
                                    break;
                                case 6:
                                    message.sampleMethod = reader.int32();
                                    break;
                                case 7:
                                    message.filesLimitPercent = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CloudStorageOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CloudStorageOptions} CloudStorageOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStorageOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CloudStorageOptions message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CloudStorageOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.fileSet != null && message.hasOwnProperty("fileSet")) {
                                var error = $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet.verify(message.fileSet);
                                if (error)
                                    return "fileSet." + error;
                            }
                            if (message.bytesLimitPerFile != null && message.hasOwnProperty("bytesLimitPerFile"))
                                if (!$util.isInteger(message.bytesLimitPerFile) && !(message.bytesLimitPerFile && $util.isInteger(message.bytesLimitPerFile.low) && $util.isInteger(message.bytesLimitPerFile.high)))
                                    return "bytesLimitPerFile: integer|Long expected";
                            if (message.bytesLimitPerFilePercent != null && message.hasOwnProperty("bytesLimitPerFilePercent"))
                                if (!$util.isInteger(message.bytesLimitPerFilePercent))
                                    return "bytesLimitPerFilePercent: integer expected";
                            if (message.fileTypes != null && message.hasOwnProperty("fileTypes")) {
                                if (!Array.isArray(message.fileTypes))
                                    return "fileTypes: array expected";
                                for (var i = 0; i < message.fileTypes.length; ++i)
                                    switch (message.fileTypes[i]) {
                                    default:
                                        return "fileTypes: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 5:
                                    case 6:
                                    case 7:
                                    case 8:
                                    case 9:
                                        break;
                                    }
                            }
                            if (message.sampleMethod != null && message.hasOwnProperty("sampleMethod"))
                                switch (message.sampleMethod) {
                                default:
                                    return "sampleMethod: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.filesLimitPercent != null && message.hasOwnProperty("filesLimitPercent"))
                                if (!$util.isInteger(message.filesLimitPercent))
                                    return "filesLimitPercent: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a CloudStorageOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CloudStorageOptions} CloudStorageOptions
                         */
                        CloudStorageOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CloudStorageOptions)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CloudStorageOptions();
                            if (object.fileSet != null) {
                                if (typeof object.fileSet !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.CloudStorageOptions.fileSet: object expected");
                                message.fileSet = $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet.fromObject(object.fileSet);
                            }
                            if (object.bytesLimitPerFile != null)
                                if ($util.Long)
                                    (message.bytesLimitPerFile = $util.Long.fromValue(object.bytesLimitPerFile)).unsigned = false;
                                else if (typeof object.bytesLimitPerFile === "string")
                                    message.bytesLimitPerFile = parseInt(object.bytesLimitPerFile, 10);
                                else if (typeof object.bytesLimitPerFile === "number")
                                    message.bytesLimitPerFile = object.bytesLimitPerFile;
                                else if (typeof object.bytesLimitPerFile === "object")
                                    message.bytesLimitPerFile = new $util.LongBits(object.bytesLimitPerFile.low >>> 0, object.bytesLimitPerFile.high >>> 0).toNumber();
                            if (object.bytesLimitPerFilePercent != null)
                                message.bytesLimitPerFilePercent = object.bytesLimitPerFilePercent | 0;
                            if (object.fileTypes) {
                                if (!Array.isArray(object.fileTypes))
                                    throw TypeError(".google.privacy.dlp.v2.CloudStorageOptions.fileTypes: array expected");
                                message.fileTypes = [];
                                for (var i = 0; i < object.fileTypes.length; ++i)
                                    switch (object.fileTypes[i]) {
                                    default:
                                    case "FILE_TYPE_UNSPECIFIED":
                                    case 0:
                                        message.fileTypes[i] = 0;
                                        break;
                                    case "BINARY_FILE":
                                    case 1:
                                        message.fileTypes[i] = 1;
                                        break;
                                    case "TEXT_FILE":
                                    case 2:
                                        message.fileTypes[i] = 2;
                                        break;
                                    case "IMAGE":
                                    case 3:
                                        message.fileTypes[i] = 3;
                                        break;
                                    case "WORD":
                                    case 5:
                                        message.fileTypes[i] = 5;
                                        break;
                                    case "PDF":
                                    case 6:
                                        message.fileTypes[i] = 6;
                                        break;
                                    case "AVRO":
                                    case 7:
                                        message.fileTypes[i] = 7;
                                        break;
                                    case "CSV":
                                    case 8:
                                        message.fileTypes[i] = 8;
                                        break;
                                    case "TSV":
                                    case 9:
                                        message.fileTypes[i] = 9;
                                        break;
                                    }
                            }
                            switch (object.sampleMethod) {
                            case "SAMPLE_METHOD_UNSPECIFIED":
                            case 0:
                                message.sampleMethod = 0;
                                break;
                            case "TOP":
                            case 1:
                                message.sampleMethod = 1;
                                break;
                            case "RANDOM_START":
                            case 2:
                                message.sampleMethod = 2;
                                break;
                            }
                            if (object.filesLimitPercent != null)
                                message.filesLimitPercent = object.filesLimitPercent | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CloudStorageOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @static
                         * @param {google.privacy.dlp.v2.CloudStorageOptions} message CloudStorageOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CloudStorageOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.fileTypes = [];
                            if (options.defaults) {
                                object.fileSet = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.bytesLimitPerFile = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.bytesLimitPerFile = options.longs === String ? "0" : 0;
                                object.sampleMethod = options.enums === String ? "SAMPLE_METHOD_UNSPECIFIED" : 0;
                                object.filesLimitPercent = 0;
                                object.bytesLimitPerFilePercent = 0;
                            }
                            if (message.fileSet != null && message.hasOwnProperty("fileSet"))
                                object.fileSet = $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet.toObject(message.fileSet, options);
                            if (message.bytesLimitPerFile != null && message.hasOwnProperty("bytesLimitPerFile"))
                                if (typeof message.bytesLimitPerFile === "number")
                                    object.bytesLimitPerFile = options.longs === String ? String(message.bytesLimitPerFile) : message.bytesLimitPerFile;
                                else
                                    object.bytesLimitPerFile = options.longs === String ? $util.Long.prototype.toString.call(message.bytesLimitPerFile) : options.longs === Number ? new $util.LongBits(message.bytesLimitPerFile.low >>> 0, message.bytesLimitPerFile.high >>> 0).toNumber() : message.bytesLimitPerFile;
                            if (message.fileTypes && message.fileTypes.length) {
                                object.fileTypes = [];
                                for (var j = 0; j < message.fileTypes.length; ++j)
                                    object.fileTypes[j] = options.enums === String ? $root.google.privacy.dlp.v2.FileType[message.fileTypes[j]] : message.fileTypes[j];
                            }
                            if (message.sampleMethod != null && message.hasOwnProperty("sampleMethod"))
                                object.sampleMethod = options.enums === String ? $root.google.privacy.dlp.v2.CloudStorageOptions.SampleMethod[message.sampleMethod] : message.sampleMethod;
                            if (message.filesLimitPercent != null && message.hasOwnProperty("filesLimitPercent"))
                                object.filesLimitPercent = message.filesLimitPercent;
                            if (message.bytesLimitPerFilePercent != null && message.hasOwnProperty("bytesLimitPerFilePercent"))
                                object.bytesLimitPerFilePercent = message.bytesLimitPerFilePercent;
                            return object;
                        };
    
                        /**
                         * Converts this CloudStorageOptions to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CloudStorageOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CloudStorageOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        CloudStorageOptions.FileSet = (function() {
    
                            /**
                             * Properties of a FileSet.
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions
                             * @interface IFileSet
                             * @property {string|null} [url] FileSet url
                             * @property {google.privacy.dlp.v2.ICloudStorageRegexFileSet|null} [regexFileSet] FileSet regexFileSet
                             */
    
                            /**
                             * Constructs a new FileSet.
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions
                             * @classdesc Represents a FileSet.
                             * @implements IFileSet
                             * @constructor
                             * @param {google.privacy.dlp.v2.CloudStorageOptions.IFileSet=} [properties] Properties to set
                             */
                            function FileSet(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * FileSet url.
                             * @member {string} url
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @instance
                             */
                            FileSet.prototype.url = "";
    
                            /**
                             * FileSet regexFileSet.
                             * @member {google.privacy.dlp.v2.ICloudStorageRegexFileSet|null|undefined} regexFileSet
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @instance
                             */
                            FileSet.prototype.regexFileSet = null;
    
                            /**
                             * Creates a new FileSet instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {google.privacy.dlp.v2.CloudStorageOptions.IFileSet=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.CloudStorageOptions.FileSet} FileSet instance
                             */
                            FileSet.create = function create(properties) {
                                return new FileSet(properties);
                            };
    
                            /**
                             * Encodes the specified FileSet message. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageOptions.FileSet.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {google.privacy.dlp.v2.CloudStorageOptions.IFileSet} message FileSet message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FileSet.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                                if (message.regexFileSet != null && Object.hasOwnProperty.call(message, "regexFileSet"))
                                    $root.google.privacy.dlp.v2.CloudStorageRegexFileSet.encode(message.regexFileSet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified FileSet message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageOptions.FileSet.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {google.privacy.dlp.v2.CloudStorageOptions.IFileSet} message FileSet message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FileSet.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a FileSet message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.CloudStorageOptions.FileSet} FileSet
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FileSet.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.url = reader.string();
                                        break;
                                    case 2:
                                        message.regexFileSet = $root.google.privacy.dlp.v2.CloudStorageRegexFileSet.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a FileSet message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.CloudStorageOptions.FileSet} FileSet
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FileSet.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a FileSet message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            FileSet.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.url != null && message.hasOwnProperty("url"))
                                    if (!$util.isString(message.url))
                                        return "url: string expected";
                                if (message.regexFileSet != null && message.hasOwnProperty("regexFileSet")) {
                                    var error = $root.google.privacy.dlp.v2.CloudStorageRegexFileSet.verify(message.regexFileSet);
                                    if (error)
                                        return "regexFileSet." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a FileSet message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.CloudStorageOptions.FileSet} FileSet
                             */
                            FileSet.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.CloudStorageOptions.FileSet();
                                if (object.url != null)
                                    message.url = String(object.url);
                                if (object.regexFileSet != null) {
                                    if (typeof object.regexFileSet !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.CloudStorageOptions.FileSet.regexFileSet: object expected");
                                    message.regexFileSet = $root.google.privacy.dlp.v2.CloudStorageRegexFileSet.fromObject(object.regexFileSet);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a FileSet message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @static
                             * @param {google.privacy.dlp.v2.CloudStorageOptions.FileSet} message FileSet
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            FileSet.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.url = "";
                                    object.regexFileSet = null;
                                }
                                if (message.url != null && message.hasOwnProperty("url"))
                                    object.url = message.url;
                                if (message.regexFileSet != null && message.hasOwnProperty("regexFileSet"))
                                    object.regexFileSet = $root.google.privacy.dlp.v2.CloudStorageRegexFileSet.toObject(message.regexFileSet, options);
                                return object;
                            };
    
                            /**
                             * Converts this FileSet to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.CloudStorageOptions.FileSet
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            FileSet.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return FileSet;
                        })();
    
                        /**
                         * SampleMethod enum.
                         * @name google.privacy.dlp.v2.CloudStorageOptions.SampleMethod
                         * @enum {number}
                         * @property {number} SAMPLE_METHOD_UNSPECIFIED=0 SAMPLE_METHOD_UNSPECIFIED value
                         * @property {number} TOP=1 TOP value
                         * @property {number} RANDOM_START=2 RANDOM_START value
                         */
                        CloudStorageOptions.SampleMethod = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SAMPLE_METHOD_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "TOP"] = 1;
                            values[valuesById[2] = "RANDOM_START"] = 2;
                            return values;
                        })();
    
                        return CloudStorageOptions;
                    })();
    
                    v2.CloudStorageFileSet = (function() {
    
                        /**
                         * Properties of a CloudStorageFileSet.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICloudStorageFileSet
                         * @property {string|null} [url] CloudStorageFileSet url
                         */
    
                        /**
                         * Constructs a new CloudStorageFileSet.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CloudStorageFileSet.
                         * @implements ICloudStorageFileSet
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICloudStorageFileSet=} [properties] Properties to set
                         */
                        function CloudStorageFileSet(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CloudStorageFileSet url.
                         * @member {string} url
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @instance
                         */
                        CloudStorageFileSet.prototype.url = "";
    
                        /**
                         * Creates a new CloudStorageFileSet instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageFileSet=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CloudStorageFileSet} CloudStorageFileSet instance
                         */
                        CloudStorageFileSet.create = function create(properties) {
                            return new CloudStorageFileSet(properties);
                        };
    
                        /**
                         * Encodes the specified CloudStorageFileSet message. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageFileSet.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageFileSet} message CloudStorageFileSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStorageFileSet.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CloudStorageFileSet message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CloudStorageFileSet.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStorageFileSet} message CloudStorageFileSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStorageFileSet.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CloudStorageFileSet message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CloudStorageFileSet} CloudStorageFileSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStorageFileSet.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CloudStorageFileSet();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.url = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CloudStorageFileSet message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CloudStorageFileSet} CloudStorageFileSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStorageFileSet.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CloudStorageFileSet message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CloudStorageFileSet.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CloudStorageFileSet message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CloudStorageFileSet} CloudStorageFileSet
                         */
                        CloudStorageFileSet.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CloudStorageFileSet)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CloudStorageFileSet();
                            if (object.url != null)
                                message.url = String(object.url);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CloudStorageFileSet message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @static
                         * @param {google.privacy.dlp.v2.CloudStorageFileSet} message CloudStorageFileSet
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CloudStorageFileSet.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.url = "";
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            return object;
                        };
    
                        /**
                         * Converts this CloudStorageFileSet to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CloudStorageFileSet
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CloudStorageFileSet.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CloudStorageFileSet;
                    })();
    
                    v2.CloudStoragePath = (function() {
    
                        /**
                         * Properties of a CloudStoragePath.
                         * @memberof google.privacy.dlp.v2
                         * @interface ICloudStoragePath
                         * @property {string|null} [path] CloudStoragePath path
                         */
    
                        /**
                         * Constructs a new CloudStoragePath.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a CloudStoragePath.
                         * @implements ICloudStoragePath
                         * @constructor
                         * @param {google.privacy.dlp.v2.ICloudStoragePath=} [properties] Properties to set
                         */
                        function CloudStoragePath(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CloudStoragePath path.
                         * @member {string} path
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @instance
                         */
                        CloudStoragePath.prototype.path = "";
    
                        /**
                         * Creates a new CloudStoragePath instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStoragePath=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.CloudStoragePath} CloudStoragePath instance
                         */
                        CloudStoragePath.create = function create(properties) {
                            return new CloudStoragePath(properties);
                        };
    
                        /**
                         * Encodes the specified CloudStoragePath message. Does not implicitly {@link google.privacy.dlp.v2.CloudStoragePath.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStoragePath} message CloudStoragePath message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStoragePath.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CloudStoragePath message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.CloudStoragePath.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {google.privacy.dlp.v2.ICloudStoragePath} message CloudStoragePath message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CloudStoragePath.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CloudStoragePath message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.CloudStoragePath} CloudStoragePath
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStoragePath.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.CloudStoragePath();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.path = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CloudStoragePath message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.CloudStoragePath} CloudStoragePath
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CloudStoragePath.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CloudStoragePath message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CloudStoragePath.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.path != null && message.hasOwnProperty("path"))
                                if (!$util.isString(message.path))
                                    return "path: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CloudStoragePath message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.CloudStoragePath} CloudStoragePath
                         */
                        CloudStoragePath.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.CloudStoragePath)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.CloudStoragePath();
                            if (object.path != null)
                                message.path = String(object.path);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CloudStoragePath message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @static
                         * @param {google.privacy.dlp.v2.CloudStoragePath} message CloudStoragePath
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CloudStoragePath.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.path = "";
                            if (message.path != null && message.hasOwnProperty("path"))
                                object.path = message.path;
                            return object;
                        };
    
                        /**
                         * Converts this CloudStoragePath to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.CloudStoragePath
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CloudStoragePath.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CloudStoragePath;
                    })();
    
                    v2.BigQueryOptions = (function() {
    
                        /**
                         * Properties of a BigQueryOptions.
                         * @memberof google.privacy.dlp.v2
                         * @interface IBigQueryOptions
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [tableReference] BigQueryOptions tableReference
                         * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [identifyingFields] BigQueryOptions identifyingFields
                         * @property {number|Long|null} [rowsLimit] BigQueryOptions rowsLimit
                         * @property {number|null} [rowsLimitPercent] BigQueryOptions rowsLimitPercent
                         * @property {google.privacy.dlp.v2.BigQueryOptions.SampleMethod|null} [sampleMethod] BigQueryOptions sampleMethod
                         * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [excludedFields] BigQueryOptions excludedFields
                         */
    
                        /**
                         * Constructs a new BigQueryOptions.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a BigQueryOptions.
                         * @implements IBigQueryOptions
                         * @constructor
                         * @param {google.privacy.dlp.v2.IBigQueryOptions=} [properties] Properties to set
                         */
                        function BigQueryOptions(properties) {
                            this.identifyingFields = [];
                            this.excludedFields = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BigQueryOptions tableReference.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} tableReference
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         */
                        BigQueryOptions.prototype.tableReference = null;
    
                        /**
                         * BigQueryOptions identifyingFields.
                         * @member {Array.<google.privacy.dlp.v2.IFieldId>} identifyingFields
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         */
                        BigQueryOptions.prototype.identifyingFields = $util.emptyArray;
    
                        /**
                         * BigQueryOptions rowsLimit.
                         * @member {number|Long} rowsLimit
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         */
                        BigQueryOptions.prototype.rowsLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * BigQueryOptions rowsLimitPercent.
                         * @member {number} rowsLimitPercent
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         */
                        BigQueryOptions.prototype.rowsLimitPercent = 0;
    
                        /**
                         * BigQueryOptions sampleMethod.
                         * @member {google.privacy.dlp.v2.BigQueryOptions.SampleMethod} sampleMethod
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         */
                        BigQueryOptions.prototype.sampleMethod = 0;
    
                        /**
                         * BigQueryOptions excludedFields.
                         * @member {Array.<google.privacy.dlp.v2.IFieldId>} excludedFields
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         */
                        BigQueryOptions.prototype.excludedFields = $util.emptyArray;
    
                        /**
                         * Creates a new BigQueryOptions instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryOptions=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.BigQueryOptions} BigQueryOptions instance
                         */
                        BigQueryOptions.create = function create(properties) {
                            return new BigQueryOptions(properties);
                        };
    
                        /**
                         * Encodes the specified BigQueryOptions message. Does not implicitly {@link google.privacy.dlp.v2.BigQueryOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryOptions} message BigQueryOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tableReference != null && Object.hasOwnProperty.call(message, "tableReference"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.tableReference, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.identifyingFields != null && message.identifyingFields.length)
                                for (var i = 0; i < message.identifyingFields.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.identifyingFields[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.rowsLimit != null && Object.hasOwnProperty.call(message, "rowsLimit"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.rowsLimit);
                            if (message.sampleMethod != null && Object.hasOwnProperty.call(message, "sampleMethod"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sampleMethod);
                            if (message.excludedFields != null && message.excludedFields.length)
                                for (var i = 0; i < message.excludedFields.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.excludedFields[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.rowsLimitPercent != null && Object.hasOwnProperty.call(message, "rowsLimitPercent"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.rowsLimitPercent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BigQueryOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BigQueryOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryOptions} message BigQueryOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BigQueryOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.BigQueryOptions} BigQueryOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BigQueryOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.tableReference = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    if (!(message.identifyingFields && message.identifyingFields.length))
                                        message.identifyingFields = [];
                                    message.identifyingFields.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                    break;
                                case 3:
                                    message.rowsLimit = reader.int64();
                                    break;
                                case 6:
                                    message.rowsLimitPercent = reader.int32();
                                    break;
                                case 4:
                                    message.sampleMethod = reader.int32();
                                    break;
                                case 5:
                                    if (!(message.excludedFields && message.excludedFields.length))
                                        message.excludedFields = [];
                                    message.excludedFields.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BigQueryOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.BigQueryOptions} BigQueryOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BigQueryOptions message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BigQueryOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tableReference != null && message.hasOwnProperty("tableReference")) {
                                var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.tableReference);
                                if (error)
                                    return "tableReference." + error;
                            }
                            if (message.identifyingFields != null && message.hasOwnProperty("identifyingFields")) {
                                if (!Array.isArray(message.identifyingFields))
                                    return "identifyingFields: array expected";
                                for (var i = 0; i < message.identifyingFields.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.identifyingFields[i]);
                                    if (error)
                                        return "identifyingFields." + error;
                                }
                            }
                            if (message.rowsLimit != null && message.hasOwnProperty("rowsLimit"))
                                if (!$util.isInteger(message.rowsLimit) && !(message.rowsLimit && $util.isInteger(message.rowsLimit.low) && $util.isInteger(message.rowsLimit.high)))
                                    return "rowsLimit: integer|Long expected";
                            if (message.rowsLimitPercent != null && message.hasOwnProperty("rowsLimitPercent"))
                                if (!$util.isInteger(message.rowsLimitPercent))
                                    return "rowsLimitPercent: integer expected";
                            if (message.sampleMethod != null && message.hasOwnProperty("sampleMethod"))
                                switch (message.sampleMethod) {
                                default:
                                    return "sampleMethod: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.excludedFields != null && message.hasOwnProperty("excludedFields")) {
                                if (!Array.isArray(message.excludedFields))
                                    return "excludedFields: array expected";
                                for (var i = 0; i < message.excludedFields.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.excludedFields[i]);
                                    if (error)
                                        return "excludedFields." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a BigQueryOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.BigQueryOptions} BigQueryOptions
                         */
                        BigQueryOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.BigQueryOptions)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.BigQueryOptions();
                            if (object.tableReference != null) {
                                if (typeof object.tableReference !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.BigQueryOptions.tableReference: object expected");
                                message.tableReference = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.tableReference);
                            }
                            if (object.identifyingFields) {
                                if (!Array.isArray(object.identifyingFields))
                                    throw TypeError(".google.privacy.dlp.v2.BigQueryOptions.identifyingFields: array expected");
                                message.identifyingFields = [];
                                for (var i = 0; i < object.identifyingFields.length; ++i) {
                                    if (typeof object.identifyingFields[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.BigQueryOptions.identifyingFields: object expected");
                                    message.identifyingFields[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.identifyingFields[i]);
                                }
                            }
                            if (object.rowsLimit != null)
                                if ($util.Long)
                                    (message.rowsLimit = $util.Long.fromValue(object.rowsLimit)).unsigned = false;
                                else if (typeof object.rowsLimit === "string")
                                    message.rowsLimit = parseInt(object.rowsLimit, 10);
                                else if (typeof object.rowsLimit === "number")
                                    message.rowsLimit = object.rowsLimit;
                                else if (typeof object.rowsLimit === "object")
                                    message.rowsLimit = new $util.LongBits(object.rowsLimit.low >>> 0, object.rowsLimit.high >>> 0).toNumber();
                            if (object.rowsLimitPercent != null)
                                message.rowsLimitPercent = object.rowsLimitPercent | 0;
                            switch (object.sampleMethod) {
                            case "SAMPLE_METHOD_UNSPECIFIED":
                            case 0:
                                message.sampleMethod = 0;
                                break;
                            case "TOP":
                            case 1:
                                message.sampleMethod = 1;
                                break;
                            case "RANDOM_START":
                            case 2:
                                message.sampleMethod = 2;
                                break;
                            }
                            if (object.excludedFields) {
                                if (!Array.isArray(object.excludedFields))
                                    throw TypeError(".google.privacy.dlp.v2.BigQueryOptions.excludedFields: array expected");
                                message.excludedFields = [];
                                for (var i = 0; i < object.excludedFields.length; ++i) {
                                    if (typeof object.excludedFields[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.BigQueryOptions.excludedFields: object expected");
                                    message.excludedFields[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.excludedFields[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BigQueryOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @static
                         * @param {google.privacy.dlp.v2.BigQueryOptions} message BigQueryOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BigQueryOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.identifyingFields = [];
                                object.excludedFields = [];
                            }
                            if (options.defaults) {
                                object.tableReference = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.rowsLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.rowsLimit = options.longs === String ? "0" : 0;
                                object.sampleMethod = options.enums === String ? "SAMPLE_METHOD_UNSPECIFIED" : 0;
                                object.rowsLimitPercent = 0;
                            }
                            if (message.tableReference != null && message.hasOwnProperty("tableReference"))
                                object.tableReference = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.tableReference, options);
                            if (message.identifyingFields && message.identifyingFields.length) {
                                object.identifyingFields = [];
                                for (var j = 0; j < message.identifyingFields.length; ++j)
                                    object.identifyingFields[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.identifyingFields[j], options);
                            }
                            if (message.rowsLimit != null && message.hasOwnProperty("rowsLimit"))
                                if (typeof message.rowsLimit === "number")
                                    object.rowsLimit = options.longs === String ? String(message.rowsLimit) : message.rowsLimit;
                                else
                                    object.rowsLimit = options.longs === String ? $util.Long.prototype.toString.call(message.rowsLimit) : options.longs === Number ? new $util.LongBits(message.rowsLimit.low >>> 0, message.rowsLimit.high >>> 0).toNumber() : message.rowsLimit;
                            if (message.sampleMethod != null && message.hasOwnProperty("sampleMethod"))
                                object.sampleMethod = options.enums === String ? $root.google.privacy.dlp.v2.BigQueryOptions.SampleMethod[message.sampleMethod] : message.sampleMethod;
                            if (message.excludedFields && message.excludedFields.length) {
                                object.excludedFields = [];
                                for (var j = 0; j < message.excludedFields.length; ++j)
                                    object.excludedFields[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.excludedFields[j], options);
                            }
                            if (message.rowsLimitPercent != null && message.hasOwnProperty("rowsLimitPercent"))
                                object.rowsLimitPercent = message.rowsLimitPercent;
                            return object;
                        };
    
                        /**
                         * Converts this BigQueryOptions to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.BigQueryOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BigQueryOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * SampleMethod enum.
                         * @name google.privacy.dlp.v2.BigQueryOptions.SampleMethod
                         * @enum {number}
                         * @property {number} SAMPLE_METHOD_UNSPECIFIED=0 SAMPLE_METHOD_UNSPECIFIED value
                         * @property {number} TOP=1 TOP value
                         * @property {number} RANDOM_START=2 RANDOM_START value
                         */
                        BigQueryOptions.SampleMethod = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SAMPLE_METHOD_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "TOP"] = 1;
                            values[valuesById[2] = "RANDOM_START"] = 2;
                            return values;
                        })();
    
                        return BigQueryOptions;
                    })();
    
                    v2.StorageConfig = (function() {
    
                        /**
                         * Properties of a StorageConfig.
                         * @memberof google.privacy.dlp.v2
                         * @interface IStorageConfig
                         * @property {google.privacy.dlp.v2.IDatastoreOptions|null} [datastoreOptions] StorageConfig datastoreOptions
                         * @property {google.privacy.dlp.v2.ICloudStorageOptions|null} [cloudStorageOptions] StorageConfig cloudStorageOptions
                         * @property {google.privacy.dlp.v2.IBigQueryOptions|null} [bigQueryOptions] StorageConfig bigQueryOptions
                         * @property {google.privacy.dlp.v2.IHybridOptions|null} [hybridOptions] StorageConfig hybridOptions
                         * @property {google.privacy.dlp.v2.StorageConfig.ITimespanConfig|null} [timespanConfig] StorageConfig timespanConfig
                         */
    
                        /**
                         * Constructs a new StorageConfig.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a StorageConfig.
                         * @implements IStorageConfig
                         * @constructor
                         * @param {google.privacy.dlp.v2.IStorageConfig=} [properties] Properties to set
                         */
                        function StorageConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StorageConfig datastoreOptions.
                         * @member {google.privacy.dlp.v2.IDatastoreOptions|null|undefined} datastoreOptions
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         */
                        StorageConfig.prototype.datastoreOptions = null;
    
                        /**
                         * StorageConfig cloudStorageOptions.
                         * @member {google.privacy.dlp.v2.ICloudStorageOptions|null|undefined} cloudStorageOptions
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         */
                        StorageConfig.prototype.cloudStorageOptions = null;
    
                        /**
                         * StorageConfig bigQueryOptions.
                         * @member {google.privacy.dlp.v2.IBigQueryOptions|null|undefined} bigQueryOptions
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         */
                        StorageConfig.prototype.bigQueryOptions = null;
    
                        /**
                         * StorageConfig hybridOptions.
                         * @member {google.privacy.dlp.v2.IHybridOptions|null|undefined} hybridOptions
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         */
                        StorageConfig.prototype.hybridOptions = null;
    
                        /**
                         * StorageConfig timespanConfig.
                         * @member {google.privacy.dlp.v2.StorageConfig.ITimespanConfig|null|undefined} timespanConfig
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         */
                        StorageConfig.prototype.timespanConfig = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * StorageConfig type.
                         * @member {"datastoreOptions"|"cloudStorageOptions"|"bigQueryOptions"|"hybridOptions"|undefined} type
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         */
                        Object.defineProperty(StorageConfig.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["datastoreOptions", "cloudStorageOptions", "bigQueryOptions", "hybridOptions"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new StorageConfig instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IStorageConfig=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.StorageConfig} StorageConfig instance
                         */
                        StorageConfig.create = function create(properties) {
                            return new StorageConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StorageConfig message. Does not implicitly {@link google.privacy.dlp.v2.StorageConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IStorageConfig} message StorageConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StorageConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.datastoreOptions != null && Object.hasOwnProperty.call(message, "datastoreOptions"))
                                $root.google.privacy.dlp.v2.DatastoreOptions.encode(message.datastoreOptions, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.cloudStorageOptions != null && Object.hasOwnProperty.call(message, "cloudStorageOptions"))
                                $root.google.privacy.dlp.v2.CloudStorageOptions.encode(message.cloudStorageOptions, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.bigQueryOptions != null && Object.hasOwnProperty.call(message, "bigQueryOptions"))
                                $root.google.privacy.dlp.v2.BigQueryOptions.encode(message.bigQueryOptions, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.timespanConfig != null && Object.hasOwnProperty.call(message, "timespanConfig"))
                                $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig.encode(message.timespanConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.hybridOptions != null && Object.hasOwnProperty.call(message, "hybridOptions"))
                                $root.google.privacy.dlp.v2.HybridOptions.encode(message.hybridOptions, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StorageConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StorageConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.IStorageConfig} message StorageConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StorageConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StorageConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.StorageConfig} StorageConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StorageConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StorageConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.datastoreOptions = $root.google.privacy.dlp.v2.DatastoreOptions.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.cloudStorageOptions = $root.google.privacy.dlp.v2.CloudStorageOptions.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.bigQueryOptions = $root.google.privacy.dlp.v2.BigQueryOptions.decode(reader, reader.uint32());
                                    break;
                                case 9:
                                    message.hybridOptions = $root.google.privacy.dlp.v2.HybridOptions.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.timespanConfig = $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StorageConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.StorageConfig} StorageConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StorageConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StorageConfig message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StorageConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.datastoreOptions != null && message.hasOwnProperty("datastoreOptions")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.DatastoreOptions.verify(message.datastoreOptions);
                                    if (error)
                                        return "datastoreOptions." + error;
                                }
                            }
                            if (message.cloudStorageOptions != null && message.hasOwnProperty("cloudStorageOptions")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.CloudStorageOptions.verify(message.cloudStorageOptions);
                                    if (error)
                                        return "cloudStorageOptions." + error;
                                }
                            }
                            if (message.bigQueryOptions != null && message.hasOwnProperty("bigQueryOptions")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.BigQueryOptions.verify(message.bigQueryOptions);
                                    if (error)
                                        return "bigQueryOptions." + error;
                                }
                            }
                            if (message.hybridOptions != null && message.hasOwnProperty("hybridOptions")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.HybridOptions.verify(message.hybridOptions);
                                    if (error)
                                        return "hybridOptions." + error;
                                }
                            }
                            if (message.timespanConfig != null && message.hasOwnProperty("timespanConfig")) {
                                var error = $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig.verify(message.timespanConfig);
                                if (error)
                                    return "timespanConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StorageConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.StorageConfig} StorageConfig
                         */
                        StorageConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.StorageConfig)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.StorageConfig();
                            if (object.datastoreOptions != null) {
                                if (typeof object.datastoreOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StorageConfig.datastoreOptions: object expected");
                                message.datastoreOptions = $root.google.privacy.dlp.v2.DatastoreOptions.fromObject(object.datastoreOptions);
                            }
                            if (object.cloudStorageOptions != null) {
                                if (typeof object.cloudStorageOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StorageConfig.cloudStorageOptions: object expected");
                                message.cloudStorageOptions = $root.google.privacy.dlp.v2.CloudStorageOptions.fromObject(object.cloudStorageOptions);
                            }
                            if (object.bigQueryOptions != null) {
                                if (typeof object.bigQueryOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StorageConfig.bigQueryOptions: object expected");
                                message.bigQueryOptions = $root.google.privacy.dlp.v2.BigQueryOptions.fromObject(object.bigQueryOptions);
                            }
                            if (object.hybridOptions != null) {
                                if (typeof object.hybridOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StorageConfig.hybridOptions: object expected");
                                message.hybridOptions = $root.google.privacy.dlp.v2.HybridOptions.fromObject(object.hybridOptions);
                            }
                            if (object.timespanConfig != null) {
                                if (typeof object.timespanConfig !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.StorageConfig.timespanConfig: object expected");
                                message.timespanConfig = $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig.fromObject(object.timespanConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StorageConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @static
                         * @param {google.privacy.dlp.v2.StorageConfig} message StorageConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StorageConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.timespanConfig = null;
                            if (message.datastoreOptions != null && message.hasOwnProperty("datastoreOptions")) {
                                object.datastoreOptions = $root.google.privacy.dlp.v2.DatastoreOptions.toObject(message.datastoreOptions, options);
                                if (options.oneofs)
                                    object.type = "datastoreOptions";
                            }
                            if (message.cloudStorageOptions != null && message.hasOwnProperty("cloudStorageOptions")) {
                                object.cloudStorageOptions = $root.google.privacy.dlp.v2.CloudStorageOptions.toObject(message.cloudStorageOptions, options);
                                if (options.oneofs)
                                    object.type = "cloudStorageOptions";
                            }
                            if (message.bigQueryOptions != null && message.hasOwnProperty("bigQueryOptions")) {
                                object.bigQueryOptions = $root.google.privacy.dlp.v2.BigQueryOptions.toObject(message.bigQueryOptions, options);
                                if (options.oneofs)
                                    object.type = "bigQueryOptions";
                            }
                            if (message.timespanConfig != null && message.hasOwnProperty("timespanConfig"))
                                object.timespanConfig = $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig.toObject(message.timespanConfig, options);
                            if (message.hybridOptions != null && message.hasOwnProperty("hybridOptions")) {
                                object.hybridOptions = $root.google.privacy.dlp.v2.HybridOptions.toObject(message.hybridOptions, options);
                                if (options.oneofs)
                                    object.type = "hybridOptions";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this StorageConfig to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.StorageConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StorageConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        StorageConfig.TimespanConfig = (function() {
    
                            /**
                             * Properties of a TimespanConfig.
                             * @memberof google.privacy.dlp.v2.StorageConfig
                             * @interface ITimespanConfig
                             * @property {google.protobuf.ITimestamp|null} [startTime] TimespanConfig startTime
                             * @property {google.protobuf.ITimestamp|null} [endTime] TimespanConfig endTime
                             * @property {google.privacy.dlp.v2.IFieldId|null} [timestampField] TimespanConfig timestampField
                             * @property {boolean|null} [enableAutoPopulationOfTimespanConfig] TimespanConfig enableAutoPopulationOfTimespanConfig
                             */
    
                            /**
                             * Constructs a new TimespanConfig.
                             * @memberof google.privacy.dlp.v2.StorageConfig
                             * @classdesc Represents a TimespanConfig.
                             * @implements ITimespanConfig
                             * @constructor
                             * @param {google.privacy.dlp.v2.StorageConfig.ITimespanConfig=} [properties] Properties to set
                             */
                            function TimespanConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TimespanConfig startTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} startTime
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @instance
                             */
                            TimespanConfig.prototype.startTime = null;
    
                            /**
                             * TimespanConfig endTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} endTime
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @instance
                             */
                            TimespanConfig.prototype.endTime = null;
    
                            /**
                             * TimespanConfig timestampField.
                             * @member {google.privacy.dlp.v2.IFieldId|null|undefined} timestampField
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @instance
                             */
                            TimespanConfig.prototype.timestampField = null;
    
                            /**
                             * TimespanConfig enableAutoPopulationOfTimespanConfig.
                             * @member {boolean} enableAutoPopulationOfTimespanConfig
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @instance
                             */
                            TimespanConfig.prototype.enableAutoPopulationOfTimespanConfig = false;
    
                            /**
                             * Creates a new TimespanConfig instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {google.privacy.dlp.v2.StorageConfig.ITimespanConfig=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.StorageConfig.TimespanConfig} TimespanConfig instance
                             */
                            TimespanConfig.create = function create(properties) {
                                return new TimespanConfig(properties);
                            };
    
                            /**
                             * Encodes the specified TimespanConfig message. Does not implicitly {@link google.privacy.dlp.v2.StorageConfig.TimespanConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {google.privacy.dlp.v2.StorageConfig.ITimespanConfig} message TimespanConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TimespanConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                    $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.timestampField != null && Object.hasOwnProperty.call(message, "timestampField"))
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.timestampField, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.enableAutoPopulationOfTimespanConfig != null && Object.hasOwnProperty.call(message, "enableAutoPopulationOfTimespanConfig"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.enableAutoPopulationOfTimespanConfig);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TimespanConfig message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.StorageConfig.TimespanConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {google.privacy.dlp.v2.StorageConfig.ITimespanConfig} message TimespanConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TimespanConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TimespanConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.StorageConfig.TimespanConfig} TimespanConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TimespanConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.timestampField = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.enableAutoPopulationOfTimespanConfig = reader.bool();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TimespanConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.StorageConfig.TimespanConfig} TimespanConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TimespanConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TimespanConfig message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TimespanConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                    if (error)
                                        return "startTime." + error;
                                }
                                if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                    if (error)
                                        return "endTime." + error;
                                }
                                if (message.timestampField != null && message.hasOwnProperty("timestampField")) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.timestampField);
                                    if (error)
                                        return "timestampField." + error;
                                }
                                if (message.enableAutoPopulationOfTimespanConfig != null && message.hasOwnProperty("enableAutoPopulationOfTimespanConfig"))
                                    if (typeof message.enableAutoPopulationOfTimespanConfig !== "boolean")
                                        return "enableAutoPopulationOfTimespanConfig: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a TimespanConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.StorageConfig.TimespanConfig} TimespanConfig
                             */
                            TimespanConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.StorageConfig.TimespanConfig();
                                if (object.startTime != null) {
                                    if (typeof object.startTime !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StorageConfig.TimespanConfig.startTime: object expected");
                                    message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                                }
                                if (object.endTime != null) {
                                    if (typeof object.endTime !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StorageConfig.TimespanConfig.endTime: object expected");
                                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                                }
                                if (object.timestampField != null) {
                                    if (typeof object.timestampField !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.StorageConfig.TimespanConfig.timestampField: object expected");
                                    message.timestampField = $root.google.privacy.dlp.v2.FieldId.fromObject(object.timestampField);
                                }
                                if (object.enableAutoPopulationOfTimespanConfig != null)
                                    message.enableAutoPopulationOfTimespanConfig = Boolean(object.enableAutoPopulationOfTimespanConfig);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TimespanConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @static
                             * @param {google.privacy.dlp.v2.StorageConfig.TimespanConfig} message TimespanConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TimespanConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.startTime = null;
                                    object.endTime = null;
                                    object.timestampField = null;
                                    object.enableAutoPopulationOfTimespanConfig = false;
                                }
                                if (message.startTime != null && message.hasOwnProperty("startTime"))
                                    object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                                if (message.endTime != null && message.hasOwnProperty("endTime"))
                                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                                if (message.timestampField != null && message.hasOwnProperty("timestampField"))
                                    object.timestampField = $root.google.privacy.dlp.v2.FieldId.toObject(message.timestampField, options);
                                if (message.enableAutoPopulationOfTimespanConfig != null && message.hasOwnProperty("enableAutoPopulationOfTimespanConfig"))
                                    object.enableAutoPopulationOfTimespanConfig = message.enableAutoPopulationOfTimespanConfig;
                                return object;
                            };
    
                            /**
                             * Converts this TimespanConfig to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.StorageConfig.TimespanConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TimespanConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return TimespanConfig;
                        })();
    
                        return StorageConfig;
                    })();
    
                    /**
                     * FileType enum.
                     * @name google.privacy.dlp.v2.FileType
                     * @enum {number}
                     * @property {number} FILE_TYPE_UNSPECIFIED=0 FILE_TYPE_UNSPECIFIED value
                     * @property {number} BINARY_FILE=1 BINARY_FILE value
                     * @property {number} TEXT_FILE=2 TEXT_FILE value
                     * @property {number} IMAGE=3 IMAGE value
                     * @property {number} WORD=5 WORD value
                     * @property {number} PDF=6 PDF value
                     * @property {number} AVRO=7 AVRO value
                     * @property {number} CSV=8 CSV value
                     * @property {number} TSV=9 TSV value
                     */
                    v2.FileType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "FILE_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "BINARY_FILE"] = 1;
                        values[valuesById[2] = "TEXT_FILE"] = 2;
                        values[valuesById[3] = "IMAGE"] = 3;
                        values[valuesById[5] = "WORD"] = 5;
                        values[valuesById[6] = "PDF"] = 6;
                        values[valuesById[7] = "AVRO"] = 7;
                        values[valuesById[8] = "CSV"] = 8;
                        values[valuesById[9] = "TSV"] = 9;
                        return values;
                    })();
    
                    v2.HybridOptions = (function() {
    
                        /**
                         * Properties of a HybridOptions.
                         * @memberof google.privacy.dlp.v2
                         * @interface IHybridOptions
                         * @property {string|null} [description] HybridOptions description
                         * @property {Array.<string>|null} [requiredFindingLabelKeys] HybridOptions requiredFindingLabelKeys
                         * @property {Object.<string,string>|null} [labels] HybridOptions labels
                         * @property {google.privacy.dlp.v2.ITableOptions|null} [tableOptions] HybridOptions tableOptions
                         */
    
                        /**
                         * Constructs a new HybridOptions.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a HybridOptions.
                         * @implements IHybridOptions
                         * @constructor
                         * @param {google.privacy.dlp.v2.IHybridOptions=} [properties] Properties to set
                         */
                        function HybridOptions(properties) {
                            this.requiredFindingLabelKeys = [];
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HybridOptions description.
                         * @member {string} description
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @instance
                         */
                        HybridOptions.prototype.description = "";
    
                        /**
                         * HybridOptions requiredFindingLabelKeys.
                         * @member {Array.<string>} requiredFindingLabelKeys
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @instance
                         */
                        HybridOptions.prototype.requiredFindingLabelKeys = $util.emptyArray;
    
                        /**
                         * HybridOptions labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @instance
                         */
                        HybridOptions.prototype.labels = $util.emptyObject;
    
                        /**
                         * HybridOptions tableOptions.
                         * @member {google.privacy.dlp.v2.ITableOptions|null|undefined} tableOptions
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @instance
                         */
                        HybridOptions.prototype.tableOptions = null;
    
                        /**
                         * Creates a new HybridOptions instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridOptions=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.HybridOptions} HybridOptions instance
                         */
                        HybridOptions.create = function create(properties) {
                            return new HybridOptions(properties);
                        };
    
                        /**
                         * Encodes the specified HybridOptions message. Does not implicitly {@link google.privacy.dlp.v2.HybridOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridOptions} message HybridOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                            if (message.requiredFindingLabelKeys != null && message.requiredFindingLabelKeys.length)
                                for (var i = 0; i < message.requiredFindingLabelKeys.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.requiredFindingLabelKeys[i]);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.tableOptions != null && Object.hasOwnProperty.call(message, "tableOptions"))
                                $root.google.privacy.dlp.v2.TableOptions.encode(message.tableOptions, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HybridOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.HybridOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {google.privacy.dlp.v2.IHybridOptions} message HybridOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HybridOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HybridOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.HybridOptions} HybridOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.HybridOptions(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.description = reader.string();
                                    break;
                                case 2:
                                    if (!(message.requiredFindingLabelKeys && message.requiredFindingLabelKeys.length))
                                        message.requiredFindingLabelKeys = [];
                                    message.requiredFindingLabelKeys.push(reader.string());
                                    break;
                                case 3:
                                    if (message.labels === $util.emptyObject)
                                        message.labels = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.labels[key] = value;
                                    break;
                                case 4:
                                    message.tableOptions = $root.google.privacy.dlp.v2.TableOptions.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HybridOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.HybridOptions} HybridOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HybridOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HybridOptions message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HybridOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.requiredFindingLabelKeys != null && message.hasOwnProperty("requiredFindingLabelKeys")) {
                                if (!Array.isArray(message.requiredFindingLabelKeys))
                                    return "requiredFindingLabelKeys: array expected";
                                for (var i = 0; i < message.requiredFindingLabelKeys.length; ++i)
                                    if (!$util.isString(message.requiredFindingLabelKeys[i]))
                                        return "requiredFindingLabelKeys: string[] expected";
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.tableOptions != null && message.hasOwnProperty("tableOptions")) {
                                var error = $root.google.privacy.dlp.v2.TableOptions.verify(message.tableOptions);
                                if (error)
                                    return "tableOptions." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a HybridOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.HybridOptions} HybridOptions
                         */
                        HybridOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.HybridOptions)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.HybridOptions();
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.requiredFindingLabelKeys) {
                                if (!Array.isArray(object.requiredFindingLabelKeys))
                                    throw TypeError(".google.privacy.dlp.v2.HybridOptions.requiredFindingLabelKeys: array expected");
                                message.requiredFindingLabelKeys = [];
                                for (var i = 0; i < object.requiredFindingLabelKeys.length; ++i)
                                    message.requiredFindingLabelKeys[i] = String(object.requiredFindingLabelKeys[i]);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridOptions.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.tableOptions != null) {
                                if (typeof object.tableOptions !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.HybridOptions.tableOptions: object expected");
                                message.tableOptions = $root.google.privacy.dlp.v2.TableOptions.fromObject(object.tableOptions);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HybridOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @static
                         * @param {google.privacy.dlp.v2.HybridOptions} message HybridOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HybridOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.requiredFindingLabelKeys = [];
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.description = "";
                                object.tableOptions = null;
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.requiredFindingLabelKeys && message.requiredFindingLabelKeys.length) {
                                object.requiredFindingLabelKeys = [];
                                for (var j = 0; j < message.requiredFindingLabelKeys.length; ++j)
                                    object.requiredFindingLabelKeys[j] = message.requiredFindingLabelKeys[j];
                            }
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.tableOptions != null && message.hasOwnProperty("tableOptions"))
                                object.tableOptions = $root.google.privacy.dlp.v2.TableOptions.toObject(message.tableOptions, options);
                            return object;
                        };
    
                        /**
                         * Converts this HybridOptions to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.HybridOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HybridOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return HybridOptions;
                    })();
    
                    v2.BigQueryKey = (function() {
    
                        /**
                         * Properties of a BigQueryKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface IBigQueryKey
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [tableReference] BigQueryKey tableReference
                         * @property {number|Long|null} [rowNumber] BigQueryKey rowNumber
                         */
    
                        /**
                         * Constructs a new BigQueryKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a BigQueryKey.
                         * @implements IBigQueryKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.IBigQueryKey=} [properties] Properties to set
                         */
                        function BigQueryKey(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BigQueryKey tableReference.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} tableReference
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @instance
                         */
                        BigQueryKey.prototype.tableReference = null;
    
                        /**
                         * BigQueryKey rowNumber.
                         * @member {number|Long} rowNumber
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @instance
                         */
                        BigQueryKey.prototype.rowNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new BigQueryKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.BigQueryKey} BigQueryKey instance
                         */
                        BigQueryKey.create = function create(properties) {
                            return new BigQueryKey(properties);
                        };
    
                        /**
                         * Encodes the specified BigQueryKey message. Does not implicitly {@link google.privacy.dlp.v2.BigQueryKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryKey} message BigQueryKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tableReference != null && Object.hasOwnProperty.call(message, "tableReference"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.tableReference, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.rowNumber != null && Object.hasOwnProperty.call(message, "rowNumber"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.rowNumber);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BigQueryKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BigQueryKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryKey} message BigQueryKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BigQueryKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.BigQueryKey} BigQueryKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BigQueryKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.tableReference = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.rowNumber = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BigQueryKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.BigQueryKey} BigQueryKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BigQueryKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BigQueryKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tableReference != null && message.hasOwnProperty("tableReference")) {
                                var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.tableReference);
                                if (error)
                                    return "tableReference." + error;
                            }
                            if (message.rowNumber != null && message.hasOwnProperty("rowNumber"))
                                if (!$util.isInteger(message.rowNumber) && !(message.rowNumber && $util.isInteger(message.rowNumber.low) && $util.isInteger(message.rowNumber.high)))
                                    return "rowNumber: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a BigQueryKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.BigQueryKey} BigQueryKey
                         */
                        BigQueryKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.BigQueryKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.BigQueryKey();
                            if (object.tableReference != null) {
                                if (typeof object.tableReference !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.BigQueryKey.tableReference: object expected");
                                message.tableReference = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.tableReference);
                            }
                            if (object.rowNumber != null)
                                if ($util.Long)
                                    (message.rowNumber = $util.Long.fromValue(object.rowNumber)).unsigned = false;
                                else if (typeof object.rowNumber === "string")
                                    message.rowNumber = parseInt(object.rowNumber, 10);
                                else if (typeof object.rowNumber === "number")
                                    message.rowNumber = object.rowNumber;
                                else if (typeof object.rowNumber === "object")
                                    message.rowNumber = new $util.LongBits(object.rowNumber.low >>> 0, object.rowNumber.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BigQueryKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @static
                         * @param {google.privacy.dlp.v2.BigQueryKey} message BigQueryKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BigQueryKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.tableReference = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.rowNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.rowNumber = options.longs === String ? "0" : 0;
                            }
                            if (message.tableReference != null && message.hasOwnProperty("tableReference"))
                                object.tableReference = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.tableReference, options);
                            if (message.rowNumber != null && message.hasOwnProperty("rowNumber"))
                                if (typeof message.rowNumber === "number")
                                    object.rowNumber = options.longs === String ? String(message.rowNumber) : message.rowNumber;
                                else
                                    object.rowNumber = options.longs === String ? $util.Long.prototype.toString.call(message.rowNumber) : options.longs === Number ? new $util.LongBits(message.rowNumber.low >>> 0, message.rowNumber.high >>> 0).toNumber() : message.rowNumber;
                            return object;
                        };
    
                        /**
                         * Converts this BigQueryKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.BigQueryKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BigQueryKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return BigQueryKey;
                    })();
    
                    v2.DatastoreKey = (function() {
    
                        /**
                         * Properties of a DatastoreKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface IDatastoreKey
                         * @property {google.privacy.dlp.v2.IKey|null} [entityKey] DatastoreKey entityKey
                         */
    
                        /**
                         * Constructs a new DatastoreKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a DatastoreKey.
                         * @implements IDatastoreKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.IDatastoreKey=} [properties] Properties to set
                         */
                        function DatastoreKey(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DatastoreKey entityKey.
                         * @member {google.privacy.dlp.v2.IKey|null|undefined} entityKey
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @instance
                         */
                        DatastoreKey.prototype.entityKey = null;
    
                        /**
                         * Creates a new DatastoreKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {google.privacy.dlp.v2.IDatastoreKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.DatastoreKey} DatastoreKey instance
                         */
                        DatastoreKey.create = function create(properties) {
                            return new DatastoreKey(properties);
                        };
    
                        /**
                         * Encodes the specified DatastoreKey message. Does not implicitly {@link google.privacy.dlp.v2.DatastoreKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {google.privacy.dlp.v2.IDatastoreKey} message DatastoreKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DatastoreKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entityKey != null && Object.hasOwnProperty.call(message, "entityKey"))
                                $root.google.privacy.dlp.v2.Key.encode(message.entityKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DatastoreKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.DatastoreKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {google.privacy.dlp.v2.IDatastoreKey} message DatastoreKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DatastoreKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DatastoreKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.DatastoreKey} DatastoreKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DatastoreKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.DatastoreKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.entityKey = $root.google.privacy.dlp.v2.Key.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DatastoreKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.DatastoreKey} DatastoreKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DatastoreKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DatastoreKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DatastoreKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entityKey != null && message.hasOwnProperty("entityKey")) {
                                var error = $root.google.privacy.dlp.v2.Key.verify(message.entityKey);
                                if (error)
                                    return "entityKey." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DatastoreKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.DatastoreKey} DatastoreKey
                         */
                        DatastoreKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.DatastoreKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.DatastoreKey();
                            if (object.entityKey != null) {
                                if (typeof object.entityKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.DatastoreKey.entityKey: object expected");
                                message.entityKey = $root.google.privacy.dlp.v2.Key.fromObject(object.entityKey);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DatastoreKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @static
                         * @param {google.privacy.dlp.v2.DatastoreKey} message DatastoreKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DatastoreKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.entityKey = null;
                            if (message.entityKey != null && message.hasOwnProperty("entityKey"))
                                object.entityKey = $root.google.privacy.dlp.v2.Key.toObject(message.entityKey, options);
                            return object;
                        };
    
                        /**
                         * Converts this DatastoreKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.DatastoreKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DatastoreKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DatastoreKey;
                    })();
    
                    v2.Key = (function() {
    
                        /**
                         * Properties of a Key.
                         * @memberof google.privacy.dlp.v2
                         * @interface IKey
                         * @property {google.privacy.dlp.v2.IPartitionId|null} [partitionId] Key partitionId
                         * @property {Array.<google.privacy.dlp.v2.Key.IPathElement>|null} [path] Key path
                         */
    
                        /**
                         * Constructs a new Key.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a Key.
                         * @implements IKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.IKey=} [properties] Properties to set
                         */
                        function Key(properties) {
                            this.path = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Key partitionId.
                         * @member {google.privacy.dlp.v2.IPartitionId|null|undefined} partitionId
                         * @memberof google.privacy.dlp.v2.Key
                         * @instance
                         */
                        Key.prototype.partitionId = null;
    
                        /**
                         * Key path.
                         * @member {Array.<google.privacy.dlp.v2.Key.IPathElement>} path
                         * @memberof google.privacy.dlp.v2.Key
                         * @instance
                         */
                        Key.prototype.path = $util.emptyArray;
    
                        /**
                         * Creates a new Key instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {google.privacy.dlp.v2.IKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.Key} Key instance
                         */
                        Key.create = function create(properties) {
                            return new Key(properties);
                        };
    
                        /**
                         * Encodes the specified Key message. Does not implicitly {@link google.privacy.dlp.v2.Key.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {google.privacy.dlp.v2.IKey} message Key message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Key.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.partitionId != null && Object.hasOwnProperty.call(message, "partitionId"))
                                $root.google.privacy.dlp.v2.PartitionId.encode(message.partitionId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.path != null && message.path.length)
                                for (var i = 0; i < message.path.length; ++i)
                                    $root.google.privacy.dlp.v2.Key.PathElement.encode(message.path[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Key message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Key.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {google.privacy.dlp.v2.IKey} message Key message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Key.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Key message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.Key} Key
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Key.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Key();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.partitionId = $root.google.privacy.dlp.v2.PartitionId.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    message.path.push($root.google.privacy.dlp.v2.Key.PathElement.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Key message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.Key} Key
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Key.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Key message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Key.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.partitionId != null && message.hasOwnProperty("partitionId")) {
                                var error = $root.google.privacy.dlp.v2.PartitionId.verify(message.partitionId);
                                if (error)
                                    return "partitionId." + error;
                            }
                            if (message.path != null && message.hasOwnProperty("path")) {
                                if (!Array.isArray(message.path))
                                    return "path: array expected";
                                for (var i = 0; i < message.path.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.Key.PathElement.verify(message.path[i]);
                                    if (error)
                                        return "path." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Key message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.Key} Key
                         */
                        Key.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.Key)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.Key();
                            if (object.partitionId != null) {
                                if (typeof object.partitionId !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.Key.partitionId: object expected");
                                message.partitionId = $root.google.privacy.dlp.v2.PartitionId.fromObject(object.partitionId);
                            }
                            if (object.path) {
                                if (!Array.isArray(object.path))
                                    throw TypeError(".google.privacy.dlp.v2.Key.path: array expected");
                                message.path = [];
                                for (var i = 0; i < object.path.length; ++i) {
                                    if (typeof object.path[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.Key.path: object expected");
                                    message.path[i] = $root.google.privacy.dlp.v2.Key.PathElement.fromObject(object.path[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Key message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.Key
                         * @static
                         * @param {google.privacy.dlp.v2.Key} message Key
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Key.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.path = [];
                            if (options.defaults)
                                object.partitionId = null;
                            if (message.partitionId != null && message.hasOwnProperty("partitionId"))
                                object.partitionId = $root.google.privacy.dlp.v2.PartitionId.toObject(message.partitionId, options);
                            if (message.path && message.path.length) {
                                object.path = [];
                                for (var j = 0; j < message.path.length; ++j)
                                    object.path[j] = $root.google.privacy.dlp.v2.Key.PathElement.toObject(message.path[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Key to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.Key
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Key.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        Key.PathElement = (function() {
    
                            /**
                             * Properties of a PathElement.
                             * @memberof google.privacy.dlp.v2.Key
                             * @interface IPathElement
                             * @property {string|null} [kind] PathElement kind
                             * @property {number|Long|null} [id] PathElement id
                             * @property {string|null} [name] PathElement name
                             */
    
                            /**
                             * Constructs a new PathElement.
                             * @memberof google.privacy.dlp.v2.Key
                             * @classdesc Represents a PathElement.
                             * @implements IPathElement
                             * @constructor
                             * @param {google.privacy.dlp.v2.Key.IPathElement=} [properties] Properties to set
                             */
                            function PathElement(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * PathElement kind.
                             * @member {string} kind
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @instance
                             */
                            PathElement.prototype.kind = "";
    
                            /**
                             * PathElement id.
                             * @member {number|Long} id
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @instance
                             */
                            PathElement.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * PathElement name.
                             * @member {string} name
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @instance
                             */
                            PathElement.prototype.name = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * PathElement idType.
                             * @member {"id"|"name"|undefined} idType
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @instance
                             */
                            Object.defineProperty(PathElement.prototype, "idType", {
                                get: $util.oneOfGetter($oneOfFields = ["id", "name"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new PathElement instance using the specified properties.
                             * @function create
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {google.privacy.dlp.v2.Key.IPathElement=} [properties] Properties to set
                             * @returns {google.privacy.dlp.v2.Key.PathElement} PathElement instance
                             */
                            PathElement.create = function create(properties) {
                                return new PathElement(properties);
                            };
    
                            /**
                             * Encodes the specified PathElement message. Does not implicitly {@link google.privacy.dlp.v2.Key.PathElement.verify|verify} messages.
                             * @function encode
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {google.privacy.dlp.v2.Key.IPathElement} message PathElement message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PathElement.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.id);
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PathElement message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.Key.PathElement.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {google.privacy.dlp.v2.Key.IPathElement} message PathElement message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PathElement.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PathElement message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.privacy.dlp.v2.Key.PathElement} PathElement
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PathElement.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.Key.PathElement();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.kind = reader.string();
                                        break;
                                    case 2:
                                        message.id = reader.int64();
                                        break;
                                    case 3:
                                        message.name = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PathElement message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.privacy.dlp.v2.Key.PathElement} PathElement
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PathElement.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PathElement message.
                             * @function verify
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PathElement.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.kind != null && message.hasOwnProperty("kind"))
                                    if (!$util.isString(message.kind))
                                        return "kind: string expected";
                                if (message.id != null && message.hasOwnProperty("id")) {
                                    properties.idType = 1;
                                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                        return "id: integer|Long expected";
                                }
                                if (message.name != null && message.hasOwnProperty("name")) {
                                    if (properties.idType === 1)
                                        return "idType: multiple values";
                                    properties.idType = 1;
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a PathElement message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.privacy.dlp.v2.Key.PathElement} PathElement
                             */
                            PathElement.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.privacy.dlp.v2.Key.PathElement)
                                    return object;
                                var message = new $root.google.privacy.dlp.v2.Key.PathElement();
                                if (object.kind != null)
                                    message.kind = String(object.kind);
                                if (object.id != null)
                                    if ($util.Long)
                                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                                    else if (typeof object.id === "string")
                                        message.id = parseInt(object.id, 10);
                                    else if (typeof object.id === "number")
                                        message.id = object.id;
                                    else if (typeof object.id === "object")
                                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a PathElement message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @static
                             * @param {google.privacy.dlp.v2.Key.PathElement} message PathElement
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PathElement.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.kind = "";
                                if (message.kind != null && message.hasOwnProperty("kind"))
                                    object.kind = message.kind;
                                if (message.id != null && message.hasOwnProperty("id")) {
                                    if (typeof message.id === "number")
                                        object.id = options.longs === String ? String(message.id) : message.id;
                                    else
                                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                                    if (options.oneofs)
                                        object.idType = "id";
                                }
                                if (message.name != null && message.hasOwnProperty("name")) {
                                    object.name = message.name;
                                    if (options.oneofs)
                                        object.idType = "name";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this PathElement to JSON.
                             * @function toJSON
                             * @memberof google.privacy.dlp.v2.Key.PathElement
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PathElement.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return PathElement;
                        })();
    
                        return Key;
                    })();
    
                    v2.RecordKey = (function() {
    
                        /**
                         * Properties of a RecordKey.
                         * @memberof google.privacy.dlp.v2
                         * @interface IRecordKey
                         * @property {google.privacy.dlp.v2.IDatastoreKey|null} [datastoreKey] RecordKey datastoreKey
                         * @property {google.privacy.dlp.v2.IBigQueryKey|null} [bigQueryKey] RecordKey bigQueryKey
                         * @property {Array.<string>|null} [idValues] RecordKey idValues
                         */
    
                        /**
                         * Constructs a new RecordKey.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a RecordKey.
                         * @implements IRecordKey
                         * @constructor
                         * @param {google.privacy.dlp.v2.IRecordKey=} [properties] Properties to set
                         */
                        function RecordKey(properties) {
                            this.idValues = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RecordKey datastoreKey.
                         * @member {google.privacy.dlp.v2.IDatastoreKey|null|undefined} datastoreKey
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @instance
                         */
                        RecordKey.prototype.datastoreKey = null;
    
                        /**
                         * RecordKey bigQueryKey.
                         * @member {google.privacy.dlp.v2.IBigQueryKey|null|undefined} bigQueryKey
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @instance
                         */
                        RecordKey.prototype.bigQueryKey = null;
    
                        /**
                         * RecordKey idValues.
                         * @member {Array.<string>} idValues
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @instance
                         */
                        RecordKey.prototype.idValues = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * RecordKey type.
                         * @member {"datastoreKey"|"bigQueryKey"|undefined} type
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @instance
                         */
                        Object.defineProperty(RecordKey.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["datastoreKey", "bigQueryKey"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new RecordKey instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordKey=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.RecordKey} RecordKey instance
                         */
                        RecordKey.create = function create(properties) {
                            return new RecordKey(properties);
                        };
    
                        /**
                         * Encodes the specified RecordKey message. Does not implicitly {@link google.privacy.dlp.v2.RecordKey.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordKey} message RecordKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordKey.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.datastoreKey != null && Object.hasOwnProperty.call(message, "datastoreKey"))
                                $root.google.privacy.dlp.v2.DatastoreKey.encode(message.datastoreKey, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.bigQueryKey != null && Object.hasOwnProperty.call(message, "bigQueryKey"))
                                $root.google.privacy.dlp.v2.BigQueryKey.encode(message.bigQueryKey, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.idValues != null && message.idValues.length)
                                for (var i = 0; i < message.idValues.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.idValues[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RecordKey message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.RecordKey.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {google.privacy.dlp.v2.IRecordKey} message RecordKey message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordKey.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RecordKey message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.RecordKey} RecordKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordKey.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.RecordKey();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.datastoreKey = $root.google.privacy.dlp.v2.DatastoreKey.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.bigQueryKey = $root.google.privacy.dlp.v2.BigQueryKey.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.idValues && message.idValues.length))
                                        message.idValues = [];
                                    message.idValues.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RecordKey message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.RecordKey} RecordKey
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordKey.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RecordKey message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RecordKey.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.datastoreKey != null && message.hasOwnProperty("datastoreKey")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.DatastoreKey.verify(message.datastoreKey);
                                    if (error)
                                        return "datastoreKey." + error;
                                }
                            }
                            if (message.bigQueryKey != null && message.hasOwnProperty("bigQueryKey")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.privacy.dlp.v2.BigQueryKey.verify(message.bigQueryKey);
                                    if (error)
                                        return "bigQueryKey." + error;
                                }
                            }
                            if (message.idValues != null && message.hasOwnProperty("idValues")) {
                                if (!Array.isArray(message.idValues))
                                    return "idValues: array expected";
                                for (var i = 0; i < message.idValues.length; ++i)
                                    if (!$util.isString(message.idValues[i]))
                                        return "idValues: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RecordKey message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.RecordKey} RecordKey
                         */
                        RecordKey.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.RecordKey)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.RecordKey();
                            if (object.datastoreKey != null) {
                                if (typeof object.datastoreKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordKey.datastoreKey: object expected");
                                message.datastoreKey = $root.google.privacy.dlp.v2.DatastoreKey.fromObject(object.datastoreKey);
                            }
                            if (object.bigQueryKey != null) {
                                if (typeof object.bigQueryKey !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.RecordKey.bigQueryKey: object expected");
                                message.bigQueryKey = $root.google.privacy.dlp.v2.BigQueryKey.fromObject(object.bigQueryKey);
                            }
                            if (object.idValues) {
                                if (!Array.isArray(object.idValues))
                                    throw TypeError(".google.privacy.dlp.v2.RecordKey.idValues: array expected");
                                message.idValues = [];
                                for (var i = 0; i < object.idValues.length; ++i)
                                    message.idValues[i] = String(object.idValues[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RecordKey message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @static
                         * @param {google.privacy.dlp.v2.RecordKey} message RecordKey
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RecordKey.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.idValues = [];
                            if (message.datastoreKey != null && message.hasOwnProperty("datastoreKey")) {
                                object.datastoreKey = $root.google.privacy.dlp.v2.DatastoreKey.toObject(message.datastoreKey, options);
                                if (options.oneofs)
                                    object.type = "datastoreKey";
                            }
                            if (message.bigQueryKey != null && message.hasOwnProperty("bigQueryKey")) {
                                object.bigQueryKey = $root.google.privacy.dlp.v2.BigQueryKey.toObject(message.bigQueryKey, options);
                                if (options.oneofs)
                                    object.type = "bigQueryKey";
                            }
                            if (message.idValues && message.idValues.length) {
                                object.idValues = [];
                                for (var j = 0; j < message.idValues.length; ++j)
                                    object.idValues[j] = message.idValues[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this RecordKey to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.RecordKey
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RecordKey.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RecordKey;
                    })();
    
                    v2.BigQueryTable = (function() {
    
                        /**
                         * Properties of a BigQueryTable.
                         * @memberof google.privacy.dlp.v2
                         * @interface IBigQueryTable
                         * @property {string|null} [projectId] BigQueryTable projectId
                         * @property {string|null} [datasetId] BigQueryTable datasetId
                         * @property {string|null} [tableId] BigQueryTable tableId
                         */
    
                        /**
                         * Constructs a new BigQueryTable.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a BigQueryTable.
                         * @implements IBigQueryTable
                         * @constructor
                         * @param {google.privacy.dlp.v2.IBigQueryTable=} [properties] Properties to set
                         */
                        function BigQueryTable(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BigQueryTable projectId.
                         * @member {string} projectId
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @instance
                         */
                        BigQueryTable.prototype.projectId = "";
    
                        /**
                         * BigQueryTable datasetId.
                         * @member {string} datasetId
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @instance
                         */
                        BigQueryTable.prototype.datasetId = "";
    
                        /**
                         * BigQueryTable tableId.
                         * @member {string} tableId
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @instance
                         */
                        BigQueryTable.prototype.tableId = "";
    
                        /**
                         * Creates a new BigQueryTable instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryTable=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.BigQueryTable} BigQueryTable instance
                         */
                        BigQueryTable.create = function create(properties) {
                            return new BigQueryTable(properties);
                        };
    
                        /**
                         * Encodes the specified BigQueryTable message. Does not implicitly {@link google.privacy.dlp.v2.BigQueryTable.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryTable} message BigQueryTable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryTable.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.projectId);
                            if (message.datasetId != null && Object.hasOwnProperty.call(message, "datasetId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.datasetId);
                            if (message.tableId != null && Object.hasOwnProperty.call(message, "tableId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.tableId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BigQueryTable message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BigQueryTable.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryTable} message BigQueryTable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryTable.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BigQueryTable message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.BigQueryTable} BigQueryTable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryTable.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BigQueryTable();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.projectId = reader.string();
                                    break;
                                case 2:
                                    message.datasetId = reader.string();
                                    break;
                                case 3:
                                    message.tableId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BigQueryTable message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.BigQueryTable} BigQueryTable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryTable.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BigQueryTable message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BigQueryTable.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.projectId != null && message.hasOwnProperty("projectId"))
                                if (!$util.isString(message.projectId))
                                    return "projectId: string expected";
                            if (message.datasetId != null && message.hasOwnProperty("datasetId"))
                                if (!$util.isString(message.datasetId))
                                    return "datasetId: string expected";
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                if (!$util.isString(message.tableId))
                                    return "tableId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a BigQueryTable message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.BigQueryTable} BigQueryTable
                         */
                        BigQueryTable.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.BigQueryTable)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.BigQueryTable();
                            if (object.projectId != null)
                                message.projectId = String(object.projectId);
                            if (object.datasetId != null)
                                message.datasetId = String(object.datasetId);
                            if (object.tableId != null)
                                message.tableId = String(object.tableId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BigQueryTable message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @static
                         * @param {google.privacy.dlp.v2.BigQueryTable} message BigQueryTable
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BigQueryTable.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.projectId = "";
                                object.datasetId = "";
                                object.tableId = "";
                            }
                            if (message.projectId != null && message.hasOwnProperty("projectId"))
                                object.projectId = message.projectId;
                            if (message.datasetId != null && message.hasOwnProperty("datasetId"))
                                object.datasetId = message.datasetId;
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                object.tableId = message.tableId;
                            return object;
                        };
    
                        /**
                         * Converts this BigQueryTable to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.BigQueryTable
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BigQueryTable.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return BigQueryTable;
                    })();
    
                    v2.BigQueryField = (function() {
    
                        /**
                         * Properties of a BigQueryField.
                         * @memberof google.privacy.dlp.v2
                         * @interface IBigQueryField
                         * @property {google.privacy.dlp.v2.IBigQueryTable|null} [table] BigQueryField table
                         * @property {google.privacy.dlp.v2.IFieldId|null} [field] BigQueryField field
                         */
    
                        /**
                         * Constructs a new BigQueryField.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a BigQueryField.
                         * @implements IBigQueryField
                         * @constructor
                         * @param {google.privacy.dlp.v2.IBigQueryField=} [properties] Properties to set
                         */
                        function BigQueryField(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BigQueryField table.
                         * @member {google.privacy.dlp.v2.IBigQueryTable|null|undefined} table
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @instance
                         */
                        BigQueryField.prototype.table = null;
    
                        /**
                         * BigQueryField field.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @instance
                         */
                        BigQueryField.prototype.field = null;
    
                        /**
                         * Creates a new BigQueryField instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryField=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.BigQueryField} BigQueryField instance
                         */
                        BigQueryField.create = function create(properties) {
                            return new BigQueryField(properties);
                        };
    
                        /**
                         * Encodes the specified BigQueryField message. Does not implicitly {@link google.privacy.dlp.v2.BigQueryField.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryField} message BigQueryField message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryField.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                $root.google.privacy.dlp.v2.BigQueryTable.encode(message.table, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BigQueryField message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.BigQueryField.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {google.privacy.dlp.v2.IBigQueryField} message BigQueryField message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BigQueryField.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BigQueryField message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.BigQueryField} BigQueryField
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryField.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.BigQueryField();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.table = $root.google.privacy.dlp.v2.BigQueryTable.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BigQueryField message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.BigQueryField} BigQueryField
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BigQueryField.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BigQueryField message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BigQueryField.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.table != null && message.hasOwnProperty("table")) {
                                var error = $root.google.privacy.dlp.v2.BigQueryTable.verify(message.table);
                                if (error)
                                    return "table." + error;
                            }
                            if (message.field != null && message.hasOwnProperty("field")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                if (error)
                                    return "field." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a BigQueryField message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.BigQueryField} BigQueryField
                         */
                        BigQueryField.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.BigQueryField)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.BigQueryField();
                            if (object.table != null) {
                                if (typeof object.table !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.BigQueryField.table: object expected");
                                message.table = $root.google.privacy.dlp.v2.BigQueryTable.fromObject(object.table);
                            }
                            if (object.field != null) {
                                if (typeof object.field !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.BigQueryField.field: object expected");
                                message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BigQueryField message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @static
                         * @param {google.privacy.dlp.v2.BigQueryField} message BigQueryField
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BigQueryField.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.table = null;
                                object.field = null;
                            }
                            if (message.table != null && message.hasOwnProperty("table"))
                                object.table = $root.google.privacy.dlp.v2.BigQueryTable.toObject(message.table, options);
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                            return object;
                        };
    
                        /**
                         * Converts this BigQueryField to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.BigQueryField
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BigQueryField.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return BigQueryField;
                    })();
    
                    v2.EntityId = (function() {
    
                        /**
                         * Properties of an EntityId.
                         * @memberof google.privacy.dlp.v2
                         * @interface IEntityId
                         * @property {google.privacy.dlp.v2.IFieldId|null} [field] EntityId field
                         */
    
                        /**
                         * Constructs a new EntityId.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents an EntityId.
                         * @implements IEntityId
                         * @constructor
                         * @param {google.privacy.dlp.v2.IEntityId=} [properties] Properties to set
                         */
                        function EntityId(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * EntityId field.
                         * @member {google.privacy.dlp.v2.IFieldId|null|undefined} field
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @instance
                         */
                        EntityId.prototype.field = null;
    
                        /**
                         * Creates a new EntityId instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {google.privacy.dlp.v2.IEntityId=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.EntityId} EntityId instance
                         */
                        EntityId.create = function create(properties) {
                            return new EntityId(properties);
                        };
    
                        /**
                         * Encodes the specified EntityId message. Does not implicitly {@link google.privacy.dlp.v2.EntityId.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {google.privacy.dlp.v2.IEntityId} message EntityId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EntityId.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                $root.google.privacy.dlp.v2.FieldId.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified EntityId message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.EntityId.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {google.privacy.dlp.v2.IEntityId} message EntityId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EntityId.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an EntityId message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.EntityId} EntityId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EntityId.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.EntityId();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = $root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an EntityId message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.EntityId} EntityId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EntityId.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an EntityId message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        EntityId.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field")) {
                                var error = $root.google.privacy.dlp.v2.FieldId.verify(message.field);
                                if (error)
                                    return "field." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an EntityId message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.EntityId} EntityId
                         */
                        EntityId.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.EntityId)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.EntityId();
                            if (object.field != null) {
                                if (typeof object.field !== "object")
                                    throw TypeError(".google.privacy.dlp.v2.EntityId.field: object expected");
                                message.field = $root.google.privacy.dlp.v2.FieldId.fromObject(object.field);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an EntityId message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @static
                         * @param {google.privacy.dlp.v2.EntityId} message EntityId
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        EntityId.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.field = null;
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = $root.google.privacy.dlp.v2.FieldId.toObject(message.field, options);
                            return object;
                        };
    
                        /**
                         * Converts this EntityId to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.EntityId
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        EntityId.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return EntityId;
                    })();
    
                    v2.TableOptions = (function() {
    
                        /**
                         * Properties of a TableOptions.
                         * @memberof google.privacy.dlp.v2
                         * @interface ITableOptions
                         * @property {Array.<google.privacy.dlp.v2.IFieldId>|null} [identifyingFields] TableOptions identifyingFields
                         */
    
                        /**
                         * Constructs a new TableOptions.
                         * @memberof google.privacy.dlp.v2
                         * @classdesc Represents a TableOptions.
                         * @implements ITableOptions
                         * @constructor
                         * @param {google.privacy.dlp.v2.ITableOptions=} [properties] Properties to set
                         */
                        function TableOptions(properties) {
                            this.identifyingFields = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TableOptions identifyingFields.
                         * @member {Array.<google.privacy.dlp.v2.IFieldId>} identifyingFields
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @instance
                         */
                        TableOptions.prototype.identifyingFields = $util.emptyArray;
    
                        /**
                         * Creates a new TableOptions instance using the specified properties.
                         * @function create
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {google.privacy.dlp.v2.ITableOptions=} [properties] Properties to set
                         * @returns {google.privacy.dlp.v2.TableOptions} TableOptions instance
                         */
                        TableOptions.create = function create(properties) {
                            return new TableOptions(properties);
                        };
    
                        /**
                         * Encodes the specified TableOptions message. Does not implicitly {@link google.privacy.dlp.v2.TableOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {google.privacy.dlp.v2.ITableOptions} message TableOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TableOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.identifyingFields != null && message.identifyingFields.length)
                                for (var i = 0; i < message.identifyingFields.length; ++i)
                                    $root.google.privacy.dlp.v2.FieldId.encode(message.identifyingFields[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TableOptions message, length delimited. Does not implicitly {@link google.privacy.dlp.v2.TableOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {google.privacy.dlp.v2.ITableOptions} message TableOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TableOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TableOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.privacy.dlp.v2.TableOptions} TableOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TableOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.privacy.dlp.v2.TableOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.identifyingFields && message.identifyingFields.length))
                                        message.identifyingFields = [];
                                    message.identifyingFields.push($root.google.privacy.dlp.v2.FieldId.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TableOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.privacy.dlp.v2.TableOptions} TableOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TableOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TableOptions message.
                         * @function verify
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TableOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.identifyingFields != null && message.hasOwnProperty("identifyingFields")) {
                                if (!Array.isArray(message.identifyingFields))
                                    return "identifyingFields: array expected";
                                for (var i = 0; i < message.identifyingFields.length; ++i) {
                                    var error = $root.google.privacy.dlp.v2.FieldId.verify(message.identifyingFields[i]);
                                    if (error)
                                        return "identifyingFields." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TableOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.privacy.dlp.v2.TableOptions} TableOptions
                         */
                        TableOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.privacy.dlp.v2.TableOptions)
                                return object;
                            var message = new $root.google.privacy.dlp.v2.TableOptions();
                            if (object.identifyingFields) {
                                if (!Array.isArray(object.identifyingFields))
                                    throw TypeError(".google.privacy.dlp.v2.TableOptions.identifyingFields: array expected");
                                message.identifyingFields = [];
                                for (var i = 0; i < object.identifyingFields.length; ++i) {
                                    if (typeof object.identifyingFields[i] !== "object")
                                        throw TypeError(".google.privacy.dlp.v2.TableOptions.identifyingFields: object expected");
                                    message.identifyingFields[i] = $root.google.privacy.dlp.v2.FieldId.fromObject(object.identifyingFields[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TableOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @static
                         * @param {google.privacy.dlp.v2.TableOptions} message TableOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TableOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.identifyingFields = [];
                            if (message.identifyingFields && message.identifyingFields.length) {
                                object.identifyingFields = [];
                                for (var j = 0; j < message.identifyingFields.length; ++j)
                                    object.identifyingFields[j] = $root.google.privacy.dlp.v2.FieldId.toObject(message.identifyingFields[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TableOptions to JSON.
                         * @function toJSON
                         * @memberof google.privacy.dlp.v2.TableOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TableOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return TableOptions;
                    })();
    
                    return v2;
                })();
    
                return dlp;
            })();
    
            return privacy;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            if (!(message.pattern && message.pattern.length))
                                message.pattern = [];
                            message.pattern.push(reader.string());
                            break;
                        case 3:
                            message.nameField = reader.string();
                            break;
                        case 4:
                            message.history = reader.int32();
                            break;
                        case 5:
                            message.plural = reader.string();
                            break;
                        case 6:
                            message.singular = reader.string();
                            break;
                        case 10:
                            if (!(message.style && message.style.length))
                                message.style = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.style.push(reader.int32());
                            } else
                                message.style.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.childType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceReference;
            })();
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fullyDecodeReservedExpansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = "";
    
                /**
                 * HttpRule put.
                 * @member {string} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = "";
    
                /**
                 * HttpRule post.
                 * @member {string} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = "";
    
                /**
                 * HttpRule delete.
                 * @member {string} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = "";
    
                /**
                 * HttpRule patch.
                 * @member {string} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = "";
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.responseBody = reader.string();
                            break;
                        case 11:
                            if (!(message.additionalBindings && message.additionalBindings.length))
                                message.additionalBindings = [];
                            message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            case 3:
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.typeName = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.defaultValue = reader.string();
                            break;
                        case 9:
                            message.oneofIndex = reader.int32();
                            break;
                        case 10:
                            message.jsonName = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        case 17:
                            message.proto3Optional = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.inputType = reader.string();
                            break;
                        case 3:
                            message.outputType = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.clientStreaming = reader.bool();
                            break;
                        case 6:
                            message.serverStreaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.javaPackage = reader.string();
                            break;
                        case 8:
                            message.javaOuterClassname = reader.string();
                            break;
                        case 10:
                            message.javaMultipleFiles = reader.bool();
                            break;
                        case 20:
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        case 27:
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        case 9:
                            message.optimizeFor = reader.int32();
                            break;
                        case 11:
                            message.goPackage = reader.string();
                            break;
                        case 16:
                            message.ccGenericServices = reader.bool();
                            break;
                        case 17:
                            message.javaGenericServices = reader.bool();
                            break;
                        case 18:
                            message.pyGenericServices = reader.bool();
                            break;
                        case 42:
                            message.phpGenericServices = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.ccEnableArenas = reader.bool();
                            break;
                        case 36:
                            message.objcClassPrefix = reader.string();
                            break;
                        case 37:
                            message.csharpNamespace = reader.string();
                            break;
                        case 39:
                            message.swiftPrefix = reader.string();
                            break;
                        case 40:
                            message.phpClassPrefix = reader.string();
                            break;
                        case 41:
                            message.phpNamespace = reader.string();
                            break;
                        case 44:
                            message.phpMetadataNamespace = reader.string();
                            break;
                        case 45:
                            message.rubyPackage = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                message[".google.api.resourceDefinition"] = [];
                            message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageSetWireFormat = reader.bool();
                            break;
                        case 2:
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.mapEntry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1052:
                            if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                message[".google.api.fieldBehavior"] = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                            } else
                                message[".google.api.fieldBehavior"].push(reader.int32());
                            break;
                        case 1055:
                            message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allowAlias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1049:
                            message[".google.api.defaultHost"] = reader.string();
                            break;
                        case 1050:
                            message[".google.api.oauthScopes"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 34:
                            message.idempotencyLevel = reader.int32();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1051:
                            if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                message[".google.api.methodSignature"] = [];
                            message[".google.api.methodSignature"].push(reader.string());
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifierValue = reader.string();
                            break;
                        case 4:
                            message.positiveIntValue = reader.uint64();
                            break;
                        case 5:
                            message.negativeIntValue = reader.int64();
                            break;
                        case 6:
                            message.doubleValue = reader.double();
                            break;
                        case 7:
                            message.stringValue = reader.bytes();
                            break;
                        case 8:
                            message.aggregateValue = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.namePart = reader.string();
                                break;
                            case 2:
                                message.isExtension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leadingComments = reader.string();
                                break;
                            case 4:
                                message.trailingComments = reader.string();
                                break;
                            case 6:
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.sourceFile = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Empty;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.paths && message.paths.length))
                                message.paths = [];
                            message.paths.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FieldMask;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            return protobuf;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.int32();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        case 3:
                            if (!(message.details && message.details.length))
                                message.details = [];
                            message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Date = (function() {
    
                /**
                 * Properties of a Date.
                 * @memberof google.type
                 * @interface IDate
                 * @property {number|null} [year] Date year
                 * @property {number|null} [month] Date month
                 * @property {number|null} [day] Date day
                 */
    
                /**
                 * Constructs a new Date.
                 * @memberof google.type
                 * @classdesc Represents a Date.
                 * @implements IDate
                 * @constructor
                 * @param {google.type.IDate=} [properties] Properties to set
                 */
                function Date(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Date year.
                 * @member {number} year
                 * @memberof google.type.Date
                 * @instance
                 */
                Date.prototype.year = 0;
    
                /**
                 * Date month.
                 * @member {number} month
                 * @memberof google.type.Date
                 * @instance
                 */
                Date.prototype.month = 0;
    
                /**
                 * Date day.
                 * @member {number} day
                 * @memberof google.type.Date
                 * @instance
                 */
                Date.prototype.day = 0;
    
                /**
                 * Creates a new Date instance using the specified properties.
                 * @function create
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.IDate=} [properties] Properties to set
                 * @returns {google.type.Date} Date instance
                 */
                Date.create = function create(properties) {
                    return new Date(properties);
                };
    
                /**
                 * Encodes the specified Date message. Does not implicitly {@link google.type.Date.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.IDate} message Date message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Date.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.year != null && Object.hasOwnProperty.call(message, "year"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.year);
                    if (message.month != null && Object.hasOwnProperty.call(message, "month"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.month);
                    if (message.day != null && Object.hasOwnProperty.call(message, "day"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.day);
                    return writer;
                };
    
                /**
                 * Encodes the specified Date message, length delimited. Does not implicitly {@link google.type.Date.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.IDate} message Date message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Date.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Date message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Date
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Date} Date
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Date.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Date();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.year = reader.int32();
                            break;
                        case 2:
                            message.month = reader.int32();
                            break;
                        case 3:
                            message.day = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Date message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Date
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Date} Date
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Date.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Date message.
                 * @function verify
                 * @memberof google.type.Date
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Date.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.year != null && message.hasOwnProperty("year"))
                        if (!$util.isInteger(message.year))
                            return "year: integer expected";
                    if (message.month != null && message.hasOwnProperty("month"))
                        if (!$util.isInteger(message.month))
                            return "month: integer expected";
                    if (message.day != null && message.hasOwnProperty("day"))
                        if (!$util.isInteger(message.day))
                            return "day: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Date message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Date
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Date} Date
                 */
                Date.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Date)
                        return object;
                    var message = new $root.google.type.Date();
                    if (object.year != null)
                        message.year = object.year | 0;
                    if (object.month != null)
                        message.month = object.month | 0;
                    if (object.day != null)
                        message.day = object.day | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Date message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.Date} message Date
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Date.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.year = 0;
                        object.month = 0;
                        object.day = 0;
                    }
                    if (message.year != null && message.hasOwnProperty("year"))
                        object.year = message.year;
                    if (message.month != null && message.hasOwnProperty("month"))
                        object.month = message.month;
                    if (message.day != null && message.hasOwnProperty("day"))
                        object.day = message.day;
                    return object;
                };
    
                /**
                 * Converts this Date to JSON.
                 * @function toJSON
                 * @memberof google.type.Date
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Date.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Date;
            })();
    
            /**
             * DayOfWeek enum.
             * @name google.type.DayOfWeek
             * @enum {number}
             * @property {number} DAY_OF_WEEK_UNSPECIFIED=0 DAY_OF_WEEK_UNSPECIFIED value
             * @property {number} MONDAY=1 MONDAY value
             * @property {number} TUESDAY=2 TUESDAY value
             * @property {number} WEDNESDAY=3 WEDNESDAY value
             * @property {number} THURSDAY=4 THURSDAY value
             * @property {number} FRIDAY=5 FRIDAY value
             * @property {number} SATURDAY=6 SATURDAY value
             * @property {number} SUNDAY=7 SUNDAY value
             */
            type.DayOfWeek = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DAY_OF_WEEK_UNSPECIFIED"] = 0;
                values[valuesById[1] = "MONDAY"] = 1;
                values[valuesById[2] = "TUESDAY"] = 2;
                values[valuesById[3] = "WEDNESDAY"] = 3;
                values[valuesById[4] = "THURSDAY"] = 4;
                values[valuesById[5] = "FRIDAY"] = 5;
                values[valuesById[6] = "SATURDAY"] = 6;
                values[valuesById[7] = "SUNDAY"] = 7;
                return values;
            })();
    
            type.TimeOfDay = (function() {
    
                /**
                 * Properties of a TimeOfDay.
                 * @memberof google.type
                 * @interface ITimeOfDay
                 * @property {number|null} [hours] TimeOfDay hours
                 * @property {number|null} [minutes] TimeOfDay minutes
                 * @property {number|null} [seconds] TimeOfDay seconds
                 * @property {number|null} [nanos] TimeOfDay nanos
                 */
    
                /**
                 * Constructs a new TimeOfDay.
                 * @memberof google.type
                 * @classdesc Represents a TimeOfDay.
                 * @implements ITimeOfDay
                 * @constructor
                 * @param {google.type.ITimeOfDay=} [properties] Properties to set
                 */
                function TimeOfDay(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TimeOfDay hours.
                 * @member {number} hours
                 * @memberof google.type.TimeOfDay
                 * @instance
                 */
                TimeOfDay.prototype.hours = 0;
    
                /**
                 * TimeOfDay minutes.
                 * @member {number} minutes
                 * @memberof google.type.TimeOfDay
                 * @instance
                 */
                TimeOfDay.prototype.minutes = 0;
    
                /**
                 * TimeOfDay seconds.
                 * @member {number} seconds
                 * @memberof google.type.TimeOfDay
                 * @instance
                 */
                TimeOfDay.prototype.seconds = 0;
    
                /**
                 * TimeOfDay nanos.
                 * @member {number} nanos
                 * @memberof google.type.TimeOfDay
                 * @instance
                 */
                TimeOfDay.prototype.nanos = 0;
    
                /**
                 * Creates a new TimeOfDay instance using the specified properties.
                 * @function create
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {google.type.ITimeOfDay=} [properties] Properties to set
                 * @returns {google.type.TimeOfDay} TimeOfDay instance
                 */
                TimeOfDay.create = function create(properties) {
                    return new TimeOfDay(properties);
                };
    
                /**
                 * Encodes the specified TimeOfDay message. Does not implicitly {@link google.type.TimeOfDay.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {google.type.ITimeOfDay} message TimeOfDay message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeOfDay.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hours != null && Object.hasOwnProperty.call(message, "hours"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hours);
                    if (message.minutes != null && Object.hasOwnProperty.call(message, "minutes"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.minutes);
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified TimeOfDay message, length delimited. Does not implicitly {@link google.type.TimeOfDay.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {google.type.ITimeOfDay} message TimeOfDay message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeOfDay.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TimeOfDay message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.TimeOfDay} TimeOfDay
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeOfDay.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.TimeOfDay();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.hours = reader.int32();
                            break;
                        case 2:
                            message.minutes = reader.int32();
                            break;
                        case 3:
                            message.seconds = reader.int32();
                            break;
                        case 4:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TimeOfDay message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.TimeOfDay} TimeOfDay
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeOfDay.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TimeOfDay message.
                 * @function verify
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TimeOfDay.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hours != null && message.hasOwnProperty("hours"))
                        if (!$util.isInteger(message.hours))
                            return "hours: integer expected";
                    if (message.minutes != null && message.hasOwnProperty("minutes"))
                        if (!$util.isInteger(message.minutes))
                            return "minutes: integer expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds))
                            return "seconds: integer expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a TimeOfDay message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.TimeOfDay} TimeOfDay
                 */
                TimeOfDay.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.TimeOfDay)
                        return object;
                    var message = new $root.google.type.TimeOfDay();
                    if (object.hours != null)
                        message.hours = object.hours | 0;
                    if (object.minutes != null)
                        message.minutes = object.minutes | 0;
                    if (object.seconds != null)
                        message.seconds = object.seconds | 0;
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a TimeOfDay message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.TimeOfDay
                 * @static
                 * @param {google.type.TimeOfDay} message TimeOfDay
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TimeOfDay.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.hours = 0;
                        object.minutes = 0;
                        object.seconds = 0;
                        object.nanos = 0;
                    }
                    if (message.hours != null && message.hasOwnProperty("hours"))
                        object.hours = message.hours;
                    if (message.minutes != null && message.hasOwnProperty("minutes"))
                        object.minutes = message.minutes;
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        object.seconds = message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this TimeOfDay to JSON.
                 * @function toJSON
                 * @memberof google.type.TimeOfDay
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TimeOfDay.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TimeOfDay;
            })();
    
            return type;
        })();
    
        return google;
    })();

    return $root;
});
